{
   "SERVER":{
      "nativeFunctions":[
         {
            "name":"NSEarlyWritePlayerIndexPersistenceForLeave",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"int playerIndex",
            "returnTypeString":"void"
         },
         {
            "name":"NSIsWritingPlayerPersistence",
            "retrunType":6,
            "a3arg":1,
            "helpText":"",
            "argTypes":"",
            "returnTypeString":"bool"
         },
         {
            "name":"NSIsPlayerIndexLocalPlayer",
            "retrunType":6,
            "a3arg":1,
            "helpText":"",
            "argTypes":"int playerIndex",
            "returnTypeString":"bool"
         },
         {
            "name":"NSIsDedicated",
            "retrunType":6,
            "a3arg":1,
            "helpText":"",
            "argTypes":"",
            "returnTypeString":"bool"
         },
         {
            "name":"NSSendMessage",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"int playerIndex, string text, bool isTeam",
            "returnTypeString":"void"
         },
         {
            "name":"NSBroadcastMessage",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"int fromPlayerIndex, int toPlayerIndex, string text, bool isTeam, bool isDead, int messageType",
            "returnTypeString":"void"
         },
         {
            "name":"VPKNotifyFile",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Tells the file system that a file at the exact path provided must exist in the currently loading VPK."
         },
         {
            "name":"GetPlayerSettingsFieldForClassName",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Returns the value for the requested field from the corresponding .set file.",
            "argTypes":"( \"className\", \"fieldName\" )",
            "returnTypeString":"var",
            "shortArgTypes":".ss."
         },
         {
            "name":"GetPlayerSettingsFieldForClassName_Health",
            "retrunType":1,
            "a3arg":1,
            "helpText":"Returns the value for the default health field from the corresponding .set file.",
            "argTypes":"string className",
            "returnTypeString":"float",
            "shortArgTypes":".s"
         },
         {
            "name":"GetPlayerSettingsFieldForClassName_HealthShield",
            "retrunType":1,
            "a3arg":1,
            "helpText":"Returns the value for the default health shield field from the corresponding .set file.",
            "argTypes":"string className",
            "returnTypeString":"float",
            "shortArgTypes":".s"
         },
         {
            "name":"GetPlayerSettingsFieldForClassName_HealthDoomed",
            "retrunType":1,
            "a3arg":1,
            "helpText":"Returns the value for the default health doomed field from the corresponding .set file.",
            "argTypes":"string className",
            "returnTypeString":"float",
            "shortArgTypes":".s"
         },
         {
            "name":"GetPlayerSettingsFieldForClassName_HealthPerSegment",
            "retrunType":1,
            "a3arg":1,
            "helpText":"",
            "argTypes":"string className",
            "returnTypeString":"float",
            "shortArgTypes":".s"
         },
         {
            "name":"GetSettingsForPlayer_DodgeTable",
            "retrunType":38,
            "a3arg":1,
            "helpText":"Returns a table with all the dodge related active settings for a given player",
            "argTypes":"player",
            "returnTypeString":"table",
            "shortArgTypes":".."
         },
         {
            "name":"PlayerSettingsNameToIndex",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Returns unique index for the given player class name"
         },
         {
            "name":"PlayerSettingsIndexToName",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Returns name of the player class assigned to the given index"
         },
         {
            "name":"GetPlayerSettingsAssetForClassName",
            "retrunType":40,
            "a3arg":0,
            "helpText":"Returns the value for the requested field from the corresponding .set file.",
            "argTypes":"string classname, string fieldname",
            "returnTypeString":"asset"
         },
         {
            "name":"IsServer",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if this is server script"
         },
         {
            "name":"IsClient",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if this is client script"
         },
         {
            "name":"IsUI",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if this is UI script"
         },
         {
            "name":"IsToolsMode",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if the game was launched with \"-tools\"."
         },
         {
            "name":"IsFNF",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if the game was launched with \"-fnf\"."
         },
         {
            "name":"IsQA",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if the game was launched with \"-qa\"."
         },
         {
            "name":"Dev_CommandLineHasParm",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if the game was launched with the specified parameter."
         },
         {
            "name":"Dev_CommandLineParmValue",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Returns the string following the parameter if it exists."
         },
         {
            "name":"Dev_CommandLineRemoveParm",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Removes parameter from the command line. Useful if you want a command line parameter to only be effective once."
         },
         {
            "name":"Dev_CommandLineAddParm",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Adds parameter to the command line. Useful to change code/scrip the command line. Pass in the key and value."
         },
         {
            "name":"NativeFuncTest",
            "retrunType":5,
            "a3arg":0,
            "helpText":"empty function: takes int, bool, float, returns 1"
         },
         {
            "name":"GetDeveloperLevel",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Gets the level of 'developer'"
         },
         {
            "name":"GetBugReproNum",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Gets the integer value of the 'bug_reproNum' convar"
         },
         {
            "name":"AngleNormalize",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Wraps given angle to [-180, 180] range"
         },
         {
            "name":"CalcRelativeVector",
            "retrunType":3,
            "a3arg":0,
            "helpText":"Given an absolute angle and absolute direction vector, returns a local direction vector; one that is relative to the absolute angle's axes"
         },
         {
            "name":"CalcRelativeAngles",
            "retrunType":3,
            "a3arg":0,
            "helpText":"Given an angle and vector, returns the angular difference needed to face from the given angle to the given vector"
         },
         {
            "name":"BoxIntersectsBox",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Given an angle and vector, returns the angular difference needed to face from the given angle to the given vector"
         },
         {
            "name":"TriggerBreakpoint",
            "retrunType":0,
            "a3arg":0,
            "helpText":"For debugging"
         },
         {
            "name":"SpamLog",
            "retrunType":0,
            "a3arg":1,
            "helpText":"Prints to the game's spam logfile (usually stored in DevNet).",
            "argTypes":"( string )",
            "returnTypeString":"void",
            "shortArgTypes":".s"
         },
         {
            "name":"PerfInitLabel",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Initialize profile entry with name."
         },
         {
            "name":"PerfStart",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Start timer for profile entry."
         },
         {
            "name":"PerfEnd",
            "retrunType":0,
            "a3arg":0,
            "helpText":"End the timer for profile entry."
         },
         {
            "name":"PerfClearAll",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Clear all data"
         },
         {
            "name":"PerfReset",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Reset just the timing data, keep labels."
         },
         {
            "name":"PerfDump",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Print profile data."
         },
         {
            "name":"RProfStart",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Start rpof timer for index."
         },
         {
            "name":"RProfEnd",
            "retrunType":0,
            "a3arg":0,
            "helpText":"End rpof timer for index."
         },
         {
            "name":"TimerStart",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Start a timer.  Use TimerEnd to get the elapsed time.  Only one Timer can be active at a time."
         },
         {
            "name":"TimerEnd",
            "retrunType":1,
            "a3arg":0,
            "helpText":"End the timer started with TimerStart.  Return milliseconds since TimerStart was called.  Only one Timer can be active at a time."
         },
         {
            "name":"clamp",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Returns first parameter clamped between first and second parameter."
         },
         {
            "name":"Interpolate",
            "retrunType":1,
            "a3arg":1,
            "helpText":"Interpolate with cubic hermite during ease-in and ease-out times",
            "argTypes":"startTime, moveTime, easeIn, easeOut",
            "returnTypeString":"float",
            "shortArgTypes":".nnnn"
         },
         {
            "name":"LerpVector",
            "retrunType":3,
            "a3arg":1,
            "helpText":"Linearly interpolate between two vectors",
            "argTypes":"vecFrom, vecTo, percent",
            "returnTypeString":"vector",
            "shortArgTypes":".vvn"
         },
         {
            "name":"GetRandom3DPointIn2DCircle",
            "retrunType":3,
            "a3arg":1,
            "helpText":"Get a random 2d point in a circle, as a 3d point, with optional 3d base",
            "argTypes":"radius, base3D_or_null",
            "returnTypeString":"vector",
            "shortArgTypes":".n."
         },
         {
            "name":"Graph",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Map a value V from C to D. Linier interpolate between A and B mapped to C and D"
         },
         {
            "name":"GraphCapped",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Map a value V from C to D. If V <= A, result = C. If V >= B, result = D. Otherwise linearly interpolate between A and B mapped to C and D"
         },
         {
            "name":"GraphCappedVector",
            "retrunType":3,
            "a3arg":0,
            "helpText":"Map a value V from Vector C to Vector D. If V <= A, result = C. If V >= B, result = D. Otherwise linearly interpolate between A and B mapped to C and D"
         },
         {
            "name":"Smooth01",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Remap [0,1] to a cosine curved [0,1]"
         },
         {
            "name":"SmoothCD",
            "retrunType":35,
            "a3arg":0,
            "helpText":"Interpolate between values, preserving velocity (so it is smooth)"
         },
         {
            "name":"SmoothCDVector",
            "retrunType":35,
            "a3arg":0,
            "helpText":"Interpolate between values, preserving velocity (so it is smooth)"
         },
         {
            "name":"ReloadingScriptsBegin",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Call before reloading scripts"
         },
         {
            "name":"ReloadingScriptsEnd",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Call after reloading scripts"
         },
         {
            "name":"CodeWarning",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Print string that code uses for errors."
         },
         {
            "name":"Dev_GetPlayerSettingByKeyField_Global",
            "retrunType":35,
            "a3arg":0,
            "helpText":"Slow dev ONLY. Given a player setting name and key, resolves a string key to its value in that setting info file"
         },
         {
            "name":"Dev_GetAISettingByKeyField_Global",
            "retrunType":35,
            "a3arg":0,
            "helpText":"Slow dev ONLY. Given a player setting name and key, resolves a string key to its value in that setting info file"
         },
         {
            "name":"Dev_GetPlayerSettingAssetByKeyField_Global",
            "retrunType":40,
            "a3arg":0,
            "helpText":"Slow dev ONLY. Given a player setting name and key, resolves a string key to its asset value in that setting info file"
         },
         {
            "name":"Dev_GetAISettingAssetByKeyField_Global",
            "retrunType":40,
            "a3arg":0,
            "helpText":"Slow dev ONLY. Given a player setting name and key, resolves a string key to its asset value in that setting info file"
         },
         {
            "name":"GetWeaponInfoFileKeyField_Global",
            "retrunType":35,
            "a3arg":0,
            "helpText":"Given a weapon name and key, resolves a string key to its value in that weapons info file. Assumes no mods set."
         },
         {
            "name":"GetWeaponInfoFileKeyField_WithMods_Global",
            "retrunType":35,
            "a3arg":0,
            "helpText":"Given a weapon name, a list of weapon mods to apply, and key, returns the value of that field in that weapons info file.",
            "argTypes":"string weaponName, array< string > modArray, string key",
            "returnTypeString":"var"
         },
         {
            "name":"GetWeaponMods_Global",
            "retrunType":35,
            "a3arg":0,
            "helpText":"Given a weapon name, returns a list of the mods available on that weapon",
            "argTypes":"string weaponName",
            "returnTypeString":"array< string >"
         },
         {
            "name":"SetBodyGroupsForWeaponConfig",
            "retrunType":0,
            "a3arg":0,
            "helpText":"",
            "argTypes":"entity ent, string weaponName, array< string > modArray",
            "returnTypeString":"void"
         },
         {
            "name":"GetWeaponInfoFileKeyFieldAsset_Global",
            "retrunType":40,
            "a3arg":0,
            "helpText":"Given a weapon name and key, resolves a string key to its value in that weapons info file. Assumes no mods set.",
            "argTypes":"string weaponname, string key",
            "returnTypeString":"asset"
         },
         {
            "name":"GetWeaponInfoFileKeyFieldAsset_WithMods_Global",
            "retrunType":40,
            "a3arg":0,
            "helpText":"Given a weapon name, a list of weapon mods to apply, and key, returns the value of that field in that weapons info file.",
            "argTypes":"string weaponName, array< string > modArray, string key",
            "returnTypeString":"asset"
         },
         {
            "name":"GetHitgroupForHitboxOnEntity",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Given ( entity, hitboxIndex ) - returns the hitgroup for the hitbox on that entity"
         },
         {
            "name":"DevP4Checkout",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Check out file from P4"
         },
         {
            "name":"DevP4Add",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Add or edit a file to P4"
         },
         {
            "name":"DevTextBufferWrite",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Append string to a temp buffer. Dev only."
         },
         {
            "name":"DevTextBufferClear",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Append string to a temp buffer. Dev only."
         },
         {
            "name":"DevTextBufferDumpToFile",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Dump temp buffer out to specified path/filename."
         },
         {
            "name":"PersistenceGetEnumCount",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Get a count of how many distinct values the given enum has."
         },
         {
            "name":"PersistenceGetEnumIndexForItemName",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Get a count of how many distinct values the given enum has."
         },
         {
            "name":"PersistenceGetEnumItemNameForIndex",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Get a count of how many distinct values the given enum has."
         },
         {
            "name":"PersistenceEnumValueIsValid",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if the given enum value contains the given value."
         },
         {
            "name":"PersistenceGetArrayCount",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Get a count of how many elements the given item has."
         },
         {
            "name":"SetXPForLevel",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets the XP required for a player to get to a certain level"
         },
         {
            "name":"GetLevelForXP",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Gets level for a player with a given amount of XP"
         },
         {
            "name":"GetConVarString",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Gets the value of a convar as a string"
         },
         {
            "name":"GetConVarInt",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Gets the value of a convar as an integer"
         },
         {
            "name":"GetConVarFloat",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Gets the value of a convar as a float"
         },
         {
            "name":"GetConVarBool",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Gets the value of a convar as a boolean"
         },
         {
            "name":"SetConVarString",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets the value of a convar with a string"
         },
         {
            "name":"SetConVarInt",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets the value of a convar with an integer"
         },
         {
            "name":"SetConVarFloat",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets the value of a convar with a float"
         },
         {
            "name":"SetConVarBool",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets the value of a convar with a boolean"
         },
         {
            "name":"SetConVarToDefault",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets the value of a convar to its internal default value"
         },
         {
            "name":"IsMagneticTarget",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns if an entity is a magnetic target"
         },
         {
            "name":"IsTurret",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Is entity a turret"
         },
         {
            "name":"Script_IsRunningTrialVersion",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Only call when we have a active user."
         },
         {
            "name":"EverythingUnlockedConVarEnabled",
            "retrunType":6,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"GetUnixTimestamp",
            "retrunType":5,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"GetDataTable",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Gets the given datatable asset",
            "argTypes":"asset datatablepath",
            "returnTypeString":"var"
         },
         {
            "name":"GetDataTableColumnByName",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Finds the column in the datatable with the given name. -1 if none",
            "argTypes":"var datatable, string columnName",
            "returnTypeString":"int"
         },
         {
            "name":"GetDatatableRowCount",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Returns the number of rows in the datatable.",
            "argTypes":"var datatable",
            "returnTypeString":"int"
         },
         {
            "name":"GetDataTableBool",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Gets a bool from the given row/column of a datatable",
            "argTypes":"var datatable, int row, int column",
            "returnTypeString":"bool"
         },
         {
            "name":"GetDataTableInt",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Gets an int from the given row/column of a datatable",
            "argTypes":"var datatable, int row, int column",
            "returnTypeString":"int"
         },
         {
            "name":"GetDataTableFloat",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Gets a float from the given row/column of a datatable",
            "argTypes":"var datatable, int row, int column",
            "returnTypeString":"float"
         },
         {
            "name":"GetDataTableVector",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Gets a vector from the given row/column of a datatable",
            "argTypes":"var datatable, int row, int column",
            "returnTypeString":"vector"
         },
         {
            "name":"GetDataTableString",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Gets a string from the given row/column of a datatable",
            "argTypes":"var datatable, int row, int column",
            "returnTypeString":"string"
         },
         {
            "name":"GetDataTableAsset",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Gets an asset from the given row/column of a datatable",
            "argTypes":"var datatable, int row, int column",
            "returnTypeString":"asset"
         },
         {
            "name":"GetDataTableRowMatchingBoolValue",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Finds and returns the first row of the datatable for which the bool in the given column matches the given value. -1 if none",
            "argTypes":"var datatable, int column, bool value",
            "returnTypeString":"int"
         },
         {
            "name":"GetDataTableRowMatchingIntValue",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Finds and returns the first row of the datatable for which the int in the given column matches the given value. -1 if none",
            "argTypes":"var datatable, int column, int value",
            "returnTypeString":"int"
         },
         {
            "name":"GetDataTableRowLessThanOrEqualToIntValue",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Finds and returns the first row of the datatable for which the int in the given column is less than or equal to the given value. -1 if none",
            "argTypes":"var datatable, int column, int value",
            "returnTypeString":"int"
         },
         {
            "name":"GetDataTableRowGreaterThanOrEqualToIntValue",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Finds and returns the first row of the datatable for which the int in the given column is greater than or equal to the given value. -1 if none",
            "argTypes":"var datatable, int column, int value",
            "returnTypeString":"int"
         },
         {
            "name":"GetDataTableRowMatchingFloatValue",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Finds and returns the first row of the datatable for which the float in the given column matches the given value. -1 if none",
            "argTypes":"var datatable, int column, float value",
            "returnTypeString":"int"
         },
         {
            "name":"GetDataTableRowLessThanOrEqualToFloatValue",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Finds and returns the first row of the datatable for which the float in the given column is less than or equal to the given value. -1 if none",
            "argTypes":"var datatable, int column, float value",
            "returnTypeString":"int"
         },
         {
            "name":"GetDataTableRowGreaterThanOrEqualToFloatValue",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Finds and returns the first row of the datatable for which the float in the given column is greater than or equal to the given value. -1 if none",
            "argTypes":"var datatable, int column, float value",
            "returnTypeString":"int"
         },
         {
            "name":"GetDataTableRowMatchingVectorValue",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Finds and returns the first row of the datatable for which the vector in the given column matches the given value. -1 if none",
            "argTypes":"var datatable, int column, vector value",
            "returnTypeString":"int"
         },
         {
            "name":"GetDataTableRowMatchingStringValue",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Finds and returns the first row of the datatable for which the string in the given column matches the given value. -1 if none",
            "argTypes":"var datatable, int column, string value",
            "returnTypeString":"int"
         },
         {
            "name":"GetDataTableRowMatchingAssetValue",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Finds and returns the first row of the datatable for which the asset in the given column matches the given value. -1 if none",
            "argTypes":"var datatable, int column, asset value",
            "returnTypeString":"int"
         },
         {
            "name":"IsGameFullyInstalled",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if the full game is installed. You can't start mp or any sp map but sp_training and sp_crashsite if this is false.",
            "argTypes":"",
            "returnTypeString":"bool"
         },
         {
            "name":"IsGamePartiallyInstalled",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if the game is partially installed. You can't start sp training this is false.",
            "argTypes":"",
            "returnTypeString":"bool"
         },
         {
            "name":"GetGameFullyInstalledProgress",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Returns fraction 0.0 to 1.0 of downloading of full game progress.",
            "argTypes":"",
            "returnTypeString":"float"
         },
         {
            "name":"AABBIntersectsAABB",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Check if two OBBs intersect"
         },
         {
            "name":"OBBIntersectsOBB",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Check if two OBBs intersect"
         },
         {
            "name":"TraceLOSMultiple",
            "retrunType":6,
            "a3arg":1,
            "helpText":"Do multiple LOS checks, early out if any return true. Runs on multiple threads",
            "argTypes":"starts array, ends array, ent ignoreEntity, TRACE_MASK_* mask, TRACE_COLLISION_GROUP_* group",
            "returnTypeString":"bool",
            "shortArgTypes":"....ii"
         },
         {
            "name":"TraceLine",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Does a trace and returns struct of result values.",
            "argTypes":"vector startPos, vector endPos, var ignoreEntOrArrayOfEnts = null, int traceMask = 0, int collisionGroup = 0",
            "returnTypeString":"TraceResults"
         },
         {
            "name":"TraceLineHighDetail",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Does a high-detail (per poly on static models) trace and returns struct of result values.",
            "argTypes":"vector startPos, vector endPos, var ignoreEntOrArrayOfEnts = null, int traceMask = 0, int collisionGroup = 0",
            "returnTypeString":"TraceResults"
         },
         {
            "name":"TraceHull",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Does a hull trace and returns table of result values.",
            "argTypes":"vector startPos, vector endPos, vector hullMins, vector hullMaxs, var ignoreEntOrArrayOfEnts = null, int traceMask = 0, int collisionGroup = 0",
            "returnTypeString":"TraceResults"
         },
         {
            "name":"TraceLineNoEnts",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Does a trace and returns table of result values.",
            "argTypes":"vector startPos, vector endPos, int traceMask = 0",
            "returnTypeString":"TraceResults"
         },
         {
            "name":"TraceLineSimple",
            "retrunType":1,
            "a3arg":0,
            "helpText":"given 2 points & ent to ignore, return fraction along line that hits world or models"
         },
         {
            "name":"TraceHullSimple",
            "retrunType":1,
            "a3arg":0,
            "helpText":"given 2 points & ent to ignore, return fraction along hull that hits world or models"
         },
         {
            "name":"DoTraceCoordCheck",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Enable/Disable coordinate check on trace start/end positions"
         },
         {
            "name":"TraceGetEntsAlongLine",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Does a trace a returns all ents along a line",
            "argTypes":"vector startPos, vector endPos, int traceMask = 0, int collisionGroup = 0",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"CheckPassThroughDir",
            "retrunType":6,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"IsPointInFrontofLine",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Check if point is in front of line defined by point and direction"
         },
         {
            "name":"FindVisibleEntitiesInCone",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Returns an array of entities that are inside of a cone and visible to the apex",
            "argTypes":"vector coneApex, vector coneAxis, float coneHeight, float coneAngleToAxis, array< entity > ignoredEntities, int traceMask, int flags, entity antilagPlayer, entity weapon = null",
            "returnTypeString":"array< VisibleEntityInCone >"
         },
         {
            "name":"VortexBulletHitCheck",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Check for vortexSphere collisions between two points",
            "argTypes":"entity attacker, vector startPos, vector endPos",
            "returnTypeString":"VortexBulletHit ornull"
         },
         {
            "name":"PrecacheParticleSystem",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Precache an effect and returns the particleSystemIndex associated with it.",
            "argTypes":"asset",
            "returnTypeString":"int"
         },
         {
            "name":"GetParticleSystemIndex",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Returns an associated particleSystemIndex, or 0 if none exists.",
            "argTypes":"asset",
            "returnTypeString":"int"
         },
         {
            "name":"GetParticleSystemName",
            "retrunType":33,
            "a3arg":0,
            "helpText":"For development/debugging. Given ( particleSystemIndex ), returns the name of the given particle system, or an empty string if none exists.",
            "argTypes":"int",
            "returnTypeString":"asset"
         },
         {
            "name":"StartParticleEffectInWorld",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Given ( particleSystemIndex, origin, angles ), creates a new effect in the world at the given position/orientation. Unreliable! The effect will not be visible to players who join late, who have a bad connection, or in kill replays that begin after the call."
         },
         {
            "name":"StartParticleEffectInWorldWithControlPoint",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Given ( particleSystemIndex, origin, angles, controlpoint ), creates a new effect in the world at the given position/orientation, and sets control point 1 to the given location. Unreliable! The effect will not be visible to players who join late, who have a bad connection, or in kill replays that begin after the call."
         },
         {
            "name":"StartParticleEffectInWorld_ReturnEntity",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Given ( particleSystemIndex, origin, angles ), creates a new effect in the world at the given position/orientation, and returns an info_particle_system entity. This is more expensive but ensures the effect shows for players joining late and in kill replay. You must destroy the returned entity when you are done with it."
         },
         {
            "name":"StartParticleEffectOnEntity",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Given ( entity, particleSystemIndex, FX_PATTACH_ attachType, attachmentIndex ), creates a new effect owned by the given entity. Unreliable! The effect will not be visible to players who join late, who have a bad connection, or in kill replays that begin after the call."
         },
         {
            "name":"StartParticleEffectOnEntityWithControlPoint",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Given ( entity, particleSystemIndex, FX_PATTACH_ attachType, attachmentIndex, FX_PATTACH_ controlPointAttachType, controlPointAttachmentIndex ), creates a new effect owned by the given entity and sets control point 1. Unreliable! The effect will not be visible to players who join late, who have a bad connection, or in kill replays that begin after the call."
         },
         {
            "name":"StartParticleEffectOnEntityWithPos",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Given ( entity, particleSystemIndex, FX_PATTACH_ attachType, attachmentIndex, position, angles ), creates a new effect owned by the given entity. Unreliable! The effect will not be visible to players who join late, who have a bad connection, or in kill replays that begin after the call."
         },
         {
            "name":"StartParticleEffectOnEntityWithPosWithControlPoint",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Given ( entity, particleSystemIndex, FX_PATTACH_ attachType, attachmentIndex, position, angles, FX_PATTACH_ controlPointAttachType, controlPointAttachmentIndex ), creates a new effect owned by the given entity and sets control point 1. Unreliable! The effect will not be visible to players who join late, who have a bad connection, or in kill replays that begin after the call."
         },
         {
            "name":"StartParticleEffectOnEntity_ReturnEntity",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Given ( entity, particleSystemIndex, FX_PATTACH_ attachType, attachmentIndex ), creates a new effect owned by the given entity, and returns an info_particle_system entity. This is more expensive but ensures the effect shows for players joining late and in kill replay. You must destroy the returned entity when you are done with it."
         },
         {
            "name":"StartParticleEffectOnEntityWithPos_ReturnEntity",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Given ( entity, particleSystemIndex, FX_PATTACH_ attachType, attachmentIndex, position, angles ), creates a new effect owned by the given entity, and returns an info_particle_system entity. This is more expensive but ensures the effect shows for players joining late and in kill replay. You must destroy the returned entity when you are done with it."
         },
         {
            "name":"EffectStop",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Given ( effect entity ), kills an effect, playing the endcap. (Deletes the entity.)"
         },
         {
            "name":"EffectSleep",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Given ( effect entity ), force an effect to hibernate."
         },
         {
            "name":"EffectWake",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Given ( effect entity ), resume an effect that was previously put to sleep."
         },
         {
            "name":"EffectSetControlPointVector",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Given ( effect, controlPointIndex, vector ), sets the xyz of an effect's control point."
         },
         {
            "name":"EffectSetControlPointAngles",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Given ( effect, controlPointIndex, angles ), sets the orientation of an effect's control point."
         },
         {
            "name":"EffectSetControlPointEntity",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Given ( effect, controlPointIndex, entity ), sets the entity assigned to an effect's control point."
         },
         {
            "name":"EffectAddTrackingForControlPoint",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Given ( effect, controlPointIndex, otherEntity, FX_PATTACH_ attachType, attachmentIndex ), adds automatic updating of an effect's control point. Effect must have been created on an entity."
         },
         {
            "name":"Rodeo_IsAttached",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Return true if in rodeo attach"
         },
         {
            "name":"Rodeo_Detach",
            "retrunType":0,
            "a3arg":0,
            "helpText":"End rodeo attach"
         },
         {
            "name":"Rodeo_Allow",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Allow given player to rodeo things"
         },
         {
            "name":"Rodeo_Disallow",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Disallow the player from rodeo things"
         },
         {
            "name":"Rodeo_IsPreviousEntity",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if the given pilot just rodeoed the given titan."
         },
         {
            "name":"Rodeo_SetCooldown",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Disable rodeo for the next N seconds. N being the rodeoCooldown player setting."
         },
         {
            "name":"Rodeo_OnFinishClimbOnAnimation",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Tell code the rodeo climbing on animation sequence has finished."
         },
         {
            "name":"Leech_IsLeechable",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Mark the entity as able to be leeched"
         },
         {
            "name":"Leech_SetLeechable",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Mark the entity as able to be leeched"
         },
         {
            "name":"Leech_ClearLeechable",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Clear the flag that makes this entity leechable"
         },
         {
            "name":"Operator_FindFloorHeight",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Find what height the given operator should move to"
         },
         {
            "name":"Operator_DiveEnable",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Enable dive mode on the operator"
         },
         {
            "name":"Operator_DiveDisable",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Disable dive mode on the operator"
         },
         {
            "name":"Operator_IsDiving",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if operator is currently in dive mode"
         },
         {
            "name":"Operator_ForceDefaultFloorHeight",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Force operator to always fly at whatever the default floor height is set to"
         },
         {
            "name":"Operator_SetDefaultFloorHeight",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Set the default floor height value. Used when no operator floor is found"
         },
         {
            "name":"Operator_IgnoreWorldForMovement",
            "retrunType":0,
            "a3arg":0,
            "helpText":"When set, the operator can fly through walls"
         },
         {
            "name":"Operator_IgnoreWorldForFloorTrace",
            "retrunType":0,
            "a3arg":0,
            "helpText":"When set, the operator will only search for the operator floor when calculating what height to hover at"
         },
         {
            "name":"Operator_MoveGridSizeScale",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Adjusts how far out the operator will do searches for surrounding floor. Smaller values will hug the floor closer, but move less smoothly."
         },
         {
            "name":"Operator_MoveFloorHeightOffset",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Once the operator has calculated what height to hover at, this is an additional vertical offset to add to that"
         },
         {
            "name":"Operator_JumpIsDodge",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Pressing jump as the operator will perform a dash rather than a vertical jump"
         },
         {
            "name":"Operator_SetMaxJumpSpeed",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Set maximum the jump speed velocity can ever be"
         },
         {
            "name":"Operator_SetJumpAcceleration",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Set host fast to accelerate up to the maximum jump speed"
         },
         {
            "name":"PlayerMelee_LungeConeTrace",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Do a lunge cone trace returning the target closest to center of screen",
            "argTypes":"entity player, int callback",
            "returnTypeString":"entity"
         },
         {
            "name":"PlayerMelee_FindVisibleEntitiesInCone",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Returns an array of entities that are inside a cone and visible to the player",
            "argTypes":"entity playerTitan",
            "returnTypeString":"array< VisibleEntityInCone >"
         },
         {
            "name":"PlayerMelee_AttackTrace",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Do a trace for potential melee targets in front of player. Returns a table with keys 'entity' and 'position', which is the hit entity and position",
            "argTypes":"entity player, float range, bool functionref( entity attacker, entity target ) isValidTargetFunc",
            "returnTypeString":"table"
         },
         {
            "name":"PlayerMelee_IsExecutionReachable",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Casts a slightly smaller version of the player's bounding box to see if they can reach target"
         },
         {
            "name":"PlayerMelee_IsServerSideEffects",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if melee effects should be server-side only"
         },
         {
            "name":"PlayerMelee_StartLagCompensateTarget",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Start lag compensation for a specific target only"
         },
         {
            "name":"PlayerMelee_StartLagCompensateTargetForLunge",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Start lag compensation for a lunge for a specific target only"
         },
         {
            "name":"PlayerMelee_FinishLagCompensateTarget",
            "retrunType":0,
            "a3arg":0,
            "helpText":"End lag compensatation"
         },
         {
            "name":"SmartAmmo_GetMaxTargetedBurst",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Returns maximum bursts to fire on a single target"
         },
         {
            "name":"SmartAmmo_GetTargetingTime",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Returns time it will take to lock onto given target"
         },
         {
            "name":"SmartAmmo_GetTargetMaxLocks",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Returns maximum value the lock \"fraction\" can have"
         },
         {
            "name":"SmartAmmo_IsTrackingEntity",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns whether the given weapon is tracking the given entity"
         },
         {
            "name":"SmartAmmo_IsValidTarget",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if this is a valid smart ammo target"
         },
         {
            "name":"StatusEffect_AddTimed",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Adds a status effect that will stop automatically after a given time.",
            "argTypes":"entity ent, int eStatusEffect, float severity01, float duration, float easeOut",
            "returnTypeString":"int"
         },
         {
            "name":"StatusEffect_AddEndless",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Adds a status effect.",
            "argTypes":"entity ent, int eStatusEffect, float severity01",
            "returnTypeString":"int"
         },
         {
            "name":"StatusEffect_Stop",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Stops a status effect given its handle (return value of StatusEffect_AddTimed or StatusEffect_AddEndless).",
            "argTypes":"entity ent, int effectHandle",
            "returnTypeString":"bool"
         },
         {
            "name":"StatusEffect_StopAll",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Stops all status effects of a given type. Returns the number that were stopped.",
            "argTypes":"entity ent, int eStatusEffect",
            "returnTypeString":"int"
         },
         {
            "name":"StatusEffect_Get",
            "retrunType":1,
            "a3arg":0,
            "helpText":"",
            "argTypes":"entity ent, int eStatusEffect",
            "returnTypeString":"float"
         },
         {
            "name":"StatusEffect_GetAll",
            "retrunType":35,
            "a3arg":0,
            "helpText":"",
            "argTypes":"entity ent",
            "returnTypeString":"array< float >"
         },
         {
            "name":"RegisterNetworkedVariable",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Registers a named networked variable.",
            "argTypes":"string name, int SNDC_category, int SNVT_type, var defaultValue = 0, float rangemin = 0, float rangemax = 0",
            "returnTypeString":"void"
         },
         {
            "name":"GetNetworkedVariableIndex",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Gets the internal index used to reference a scripted network variable. For use with FX_PATTACH_SCRIPT_NETWORK_VAR.",
            "argTypes":"string name",
            "returnTypeString":"int"
         },
         {
            "name":"SetGlobalNetBool",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets a global bool network variable (see RegisterNetworkedVariable)"
         },
         {
            "name":"SetGlobalNetInt",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets a global int network variable (see RegisterNetworkedVariable)"
         },
         {
            "name":"SetGlobalNetFloat",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets a global float network variable (see RegisterNetworkedVariable)"
         },
         {
            "name":"SetGlobalNetFloatOverTime",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets a global float network variable gradually over time from its current value to the specified new value (see RegisterNetworkedVariable)"
         },
         {
            "name":"SetGlobalNetTime",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets a global time (float) network variable (see RegisterNetworkedVariable)"
         },
         {
            "name":"SetGlobalNetEnt",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets a global entity network variable (see RegisterNetworkedVariable)"
         },
         {
            "name":"GetGlobalNetBool",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Gets a global bool network variable (see RegisterNetworkedVariable)"
         },
         {
            "name":"GetGlobalNetInt",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Gets an global int network variable (see RegisterNetworkedVariable)"
         },
         {
            "name":"GetGlobalNetFloat",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Gets a global float network variable (see RegisterNetworkedVariable)"
         },
         {
            "name":"GetGlobalNetTime",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Gets a global time (float) network variable (see RegisterNetworkedVariable)"
         },
         {
            "name":"GetGlobalNetEnt",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Gets a global entity network variable (see RegisterNetworkedVariable)"
         },
         {
            "name":"InPrediction",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if currently in prediction mode"
         },
         {
            "name":"IsFirstTimePredicted",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if in prediction mode and this is the first time the command is being predicted"
         },
         {
            "name":"GetMapName",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Get the name of the map."
         },
         {
            "name":"Time",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Get the current server time"
         },
         {
            "name":"FrameTime",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Get the time spent on the last frame"
         },
         {
            "name":"PlatformTime",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Get the time since startup."
         },
         {
            "name":"IntervalPerTick",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Get the time between each tick"
         },
         {
            "name":"FrameCount",
            "retrunType":5,
            "a3arg":0,
            "helpText":"",
            "argTypes":"",
            "returnTypeString":"int"
         },
         {
            "name":"PrecacheWeapon",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Precache a weapon."
         },
         {
            "name":"PrecacheModel",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Precache a model.",
            "argTypes":"asset modelFile",
            "returnTypeString":"void"
         },
         {
            "name":"PrecacheMaterial",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Precache a material.",
            "argTypes":"asset",
            "returnTypeString":"void"
         },
         {
            "name":"ShouldSendDevStats",
            "retrunType":6,
            "a3arg":0,
            "helpText":"True if script should send stats to devnet."
         },
         {
            "name":"PrecacheImpactEffectTable",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Precache an impact effect table.",
            "argTypes":"string tableName",
            "returnTypeString":"int"
         },
         {
            "name":"DebugScreenText",
            "retrunType":0,
            "a3arg":0,
            "helpText":"",
            "argTypes":"float posX, float posY, string text",
            "returnTypeString":"void"
         },
         {
            "name":"DebugDrawBox",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Draw a debug overlay box"
         },
         {
            "name":"DebugDrawLine",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Draw a debug overlay line. TRUE means draw through world."
         },
         {
            "name":"DebugDrawText",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Draw debug text. TRUE means draw through world."
         },
         {
            "name":"IsCriticalHit",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if the given hit is a critical hit"
         },
         {
            "name":"IsRodeoHitBox",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if the given hitbox is a Rodeo hit box."
         },
         {
            "name":"SendToConsole",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Send a string to the console as a command"
         },
         {
            "name":"DispatchSpawn",
            "retrunType":6,
            "a3arg":1,
            "helpText":"Tells the specified entity to spawn. Should only be called once per entity.",
            "argTypes":"entity",
            "returnTypeString":"bool",
            "shortArgTypes":".e"
         },
         {
            "name":"DoEntFire",
            "retrunType":0,
            "a3arg":0,
            "helpText":"#EntFire:Queues an entity i/o event"
         },
         {
            "name":"EntFireNow",
            "retrunType":0,
            "a3arg":0,
            "helpText":"@"
         },
         {
            "name":"EntFireByHandle",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Queues an entity i/o event. First parameter is an entity instance."
         },
         {
            "name":"EntFireByHandleNow",
            "retrunType":0,
            "a3arg":0,
            "helpText":"@"
         },
         {
            "name":"CreateProp",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Create a physics prop"
         },
         {
            "name":"RecordAchievementEvent",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Records achievement event or progress"
         },
         {
            "name":"EmitAISound",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Create a sound event that AI can respond to.",
            "argTypes":"int soundFlags, int contextFlags, vector pos, float radius, float duration",
            "returnTypeString":"void"
         },
         {
            "name":"EmitAISoundWithOwner",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Create a sound event that AI can respond to, specifying the owner of the sound.",
            "argTypes":"entity ownerEnt, int soundFlags, int contextFlags, vector pos, float radius, float duration",
            "returnTypeString":"void"
         },
         {
            "name":"EmitAISoundToTarget",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Create a sound event that AI can respond to, specifying who the sound should target.",
            "argTypes":"entity targetEnt, int soundFlags, int contextFlags, vector pos, float radius, float duration",
            "returnTypeString":"void"
         },
         {
            "name":"EmitAISoundWithOwnerToTarget",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Create a sound event that AI can respond to, specifying who the sound should target, and the owner of the sound.",
            "argTypes":"entity ownerEnt, entity targetEnt, int soundFlags, int contextFlags, vector pos, float radius, float duration",
            "returnTypeString":"void"
         },
         {
            "name":"ServiceEventQueue",
            "retrunType":0,
            "a3arg":0,
            "helpText":"@"
         },
         {
            "name":"IsFastIterationEnabled",
            "retrunType":6,
            "a3arg":0,
            "helpText":"True if the 'fast_iteration' convar is enabled."
         },
         {
            "name":"SetDucking",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Set the level of an audio ducking channel"
         },
         {
            "name":"GetConnectingAndConnectedPlayerArray",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of all players, even ones who are connecting",
            "argTypes":"",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetPendingClientsCount",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Gets a count of the number of clients who are connecting or reserved but do not yet have an entity."
         },
         {
            "name":"CenterPrintAll",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Print a message in center of screen for all clients"
         },
         {
            "name":"GetImpactEffectTable",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Get the index of the given impact effect table."
         },
         {
            "name":"CalcWeaponDamage",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Calculate weapon damage for attacker and victim at given distance"
         },
         {
            "name":"SetBTLoadoutUnlocked",
            "retrunType":0,
            "a3arg":0,
            "helpText":"",
            "argTypes":"int loadoutIndex",
            "returnTypeString":"void"
         },
         {
            "name":"SetBTLoadoutsUnlockedBitfield",
            "retrunType":0,
            "a3arg":0,
            "helpText":"",
            "argTypes":"int unlockBits",
            "returnTypeString":"void"
         },
         {
            "name":"GetBTLoadoutsUnlockedBitfield",
            "retrunType":5,
            "a3arg":0,
            "helpText":"",
            "argTypes":"",
            "returnTypeString":"int"
         },
         {
            "name":"ReloadScriptCallbacks",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Rebinds script callbacks"
         },
         {
            "name":"IsBTLoadoutUnlocked",
            "retrunType":6,
            "a3arg":0,
            "helpText":"",
            "argTypes":"int loadoutIndex",
            "returnTypeString":"bool"
         },
         {
            "name":"Replay_IsEnabled",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if replays are enabled in code."
         },
         {
            "name":"GetHealthFrac",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Get health/maxhealth"
         },
         {
            "name":"GetPlayerArray",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of all players",
            "argTypes":"",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetPlayerArrayOfTeam",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"int team",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetPlayerArrayOfEnemies",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"int team",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetPlayerArray_Alive",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetPlayerArrayOfTeam_Alive",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"int team",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetPlayerArrayOfEnemies_Alive",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"int team",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetPlayerArray_Pilots",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetPlayerArrayOfTeam_Pilots",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"int team",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetPlayerArrayOfEnemies_Pilots",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"int team",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetPlayerArray_AlivePilots",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetPlayerArrayOfTeam_AlivePilots",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"int team",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetPlayerArrayOfEnemies_AlivePilots",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"int team",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetPlayerDecoyArray",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetTitanArray",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of all titans",
            "argTypes":"",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetTitanArrayOfTeam",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"int team",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetTitanArrayOfEnemies",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"int team",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetTitanSoulArray",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of all titan souls",
            "argTypes":"",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetTitanCountForTeam",
            "retrunType":5,
            "a3arg":0,
            "helpText":"",
            "argTypes":"int team",
            "returnTypeString":"int"
         },
         {
            "name":"GetPlayerArrayEx",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of all players by class, team, within dist. team -1 for any team, 'any' for any class, otherwise 'titan' or 'pilot', -1 for any dist",
            "argTypes":"string classname, int onSameTeamAsNum, int enemiesOfTeamNum, vector origin, float maxdist",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetTeamPlayerCount",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Get the number of players in a team"
         },
         {
            "name":"GetSurfacePropForEntity",
            "retrunType":5,
            "a3arg":0,
            "helpText":"",
            "argTypes":"entity ent",
            "returnTypeString":"int"
         },
         {
            "name":"GetEntByIndex",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Find and returns the entity with the given entity index."
         },
         {
            "name":"GetNPCArray",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of all NPCs",
            "argTypes":"",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetNPCArrayOfTeam",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"int team",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetNPCArrayOfEnemies",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"int team",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetNPCArrayEx",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of all NPCs by class, team, within dist. team -1 for any team, 'any' for any class, -1 for any dist",
            "argTypes":"string classname, int onSameTeamAsNum, int enemiesOfTeamNum, vector origin, float maxdist",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetNPCArrayWithSubclassEx",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of all NPCs by class, team, and subclass (array), within dist. team -1 for any team, 'any' for any class, -1 for any dist",
            "argTypes":"string classname, int onSameTeamAsNum, int enemiesOfTeamNum, vector origin, float maxdist, array< int > subclasses",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetNPCArrayByClass",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of all NPCs of class",
            "argTypes":"string classname",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetNPCArrayByClassAndSubclass",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of all NPCs of class and subclass",
            "argTypes":"string classname, array< int > subclasses",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetProjectileArray",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of all projectiles",
            "argTypes":"",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetProjectileArrayEx",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of all projectiles by class, team, within dist. team -1 for any team, 'any' for any class, -1 for any dist",
            "argTypes":"string classname, int onSameTeamAsNum, int enemiesOfTeamNum, vector origin, float maxdist",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"IsPlayerSafeFromNPCs",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Check if player is safe from NPCs"
         },
         {
            "name":"IsPlayerSafeFromProjectiles",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Check if player would safe from projectiles at a given position"
         },
         {
            "name":"GetWindowHint",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Returns the best window hint. Start position, clearance radius, clearance height, direction, distance, gravity, search margin, ignore ent"
         },
         {
            "name":"BuildingCubeMaps",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if building cube maps."
         },
         {
            "name":"IsTestMap",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns value of IsTestMap from the level's script list .rson file"
         },
         {
            "name":"ScreenFade",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Given (player, r, g, b, a, fadeTime, fadeHold, FFADE_ flags), fade the player's screen."
         },
         {
            "name":"GetModelViewerList",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Returns list of files in scripts/model_viewer_list.txt, which is written by reRun",
            "argTypes":"",
            "returnTypeString":"array< asset >"
         },
         {
            "name":"Entities_First",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Begin an iteration over the list of entities"
         },
         {
            "name":"Entities_Next",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Continue an iteration over the list of entities, providing reference to a previously found entity"
         },
         {
            "name":"Entities_CreateByClassname",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Creates an entity by classname but does not spawn it.  Call DispatchSpawn( ent ) to spawn the entity into the level."
         },
         {
            "name":"Entities_CreateProjectileByClassname",
            "retrunType":13,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"Entities_CreateByTemplate",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Create an entity based on the named template.  If no template found, returns null."
         },
         {
            "name":"Entities_CreateByTemplateMultiple",
            "retrunType":37,
            "a3arg":1,
            "helpText":"Create zero or more entities from templates that match the given string, and return them as an array. Wildcards allowed.",
            "argTypes":"matchingString",
            "returnTypeString":"array",
            "shortArgTypes":".s"
         },
         {
            "name":"Entities_CreateByPointTemplates",
            "retrunType":37,
            "a3arg":1,
            "helpText":"Create zero or more entities from point-templates that match the given string, and return them as an array. Wildcards allowed.",
            "argTypes":"matchingString, [origin], [angles]",
            "returnTypeString":"array",
            "shortArgTypes":".svv"
         },
         {
            "name":"Entities_FindByClassname",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Find entities by class name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
         },
         {
            "name":"Entities_FindByName",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Find entities by name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
         },
         {
            "name":"Entities_FindInSphere",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Find entities within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
         },
         {
            "name":"Entities_FindByTarget",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Find entities by targetname. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
         },
         {
            "name":"Entities_FindByModel",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Find entities by model name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
         },
         {
            "name":"Entities_FindByNameNearest",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Find entities by name nearest to a point."
         },
         {
            "name":"Entities_FindByNameWithin",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Find entities by name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
         },
         {
            "name":"Entities_FindByClassnameNearest",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Find entities by class name nearest to a point."
         },
         {
            "name":"Entities_FindByClassnameWithin",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Find entities by class name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
         },
         {
            "name":"EmitSoundOnEntity",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Plays a given sound on the given entity."
         },
         {
            "name":"EmitSoundOnEntityNoSave",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Plays a given sound on the given entity. Doesn't save sound"
         },
         {
            "name":"EmitSoundOnEntityAfterDelay",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Plays the given sound on the given entity after a given number of seconds."
         },
         {
            "name":"EmitSoundOnEntityOnlyToPlayerWithSeek",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Plays the given sound on the given entity only to a given player, seeking the given number of seconds into it."
         },
         {
            "name":"EmitSoundOnEntityExceptToPlayerWithSeek",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Plays the given sound on the given entity except to a given player, seeking the given number of seconds into it."
         },
         {
            "name":"EmitSoundOnEntityToTeam",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Plays a given sound on the given entity only for one team."
         },
         {
            "name":"EmitSoundOnEntityToEnemies",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Plays a given sound on the given entity only for enemies of the given team."
         },
         {
            "name":"EmitSoundAtPosition",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Plays a sound in the world unattached to an entity."
         },
         {
            "name":"EmitSoundAtPositionOnlyToPlayer",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Play a sound in the world only to a given player."
         },
         {
            "name":"EmitSoundAtPositionExceptToPlayer",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Play a sound in the world for everyone except to a specific player."
         },
         {
            "name":"StopSoundOnEntity",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Stops any instances of a certain sound playing on the given entity."
         },
         {
            "name":"StopSoundAtPosition",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Stops any instances of a certain sound playing very near the given position."
         },
         {
            "name":"FadeOutSoundOnEntity",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Fades out a sound over time."
         },
         {
            "name":"EmitSoundOnEntityOnlyToPlayer",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Play a sound on an entity only to a given player."
         },
         {
            "name":"EmitSoundOnEntityOnlyToPlayerWithFadeIn",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Play a sound on an entity only to a given player with a fade in time."
         },
         {
            "name":"EmitSoundOnEntityExceptToPlayer",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Play a sound for everyone except for a specific player."
         },
         {
            "name":"EmitSoundOnEntityExceptToPlayerNotPredicted",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Play a sound for everyone except for a specific player.  Use this version if the player is not hearing a predicted version, but rather a different sound entirely."
         },
         {
            "name":"DoesAliasExist",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns whether the given alias exists."
         },
         {
            "name":"GetSoundTags",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Returns int which is ORed together SOUNDTAG_* values for this sound (from scripts/audio/metadata_tags.rson)"
         },
         {
            "name":"SetRapidShiftOffset",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Specifies a player-shift offset to a location to also test sound radii against. (0 0 0 is disabled)"
         },
         {
            "name":"GrantClientSidePickup_MatchCandy",
            "retrunType":0,
            "a3arg":0,
            "helpText":"",
            "argTypes":"entity playerEnt, int amount, vector origin, int flags, int recieptID",
            "returnTypeString":"void"
         },
         {
            "name":"GetAISettingHullType",
            "retrunType":5,
            "a3arg":0,
            "helpText":"",
            "argTypes":"string aiSettingsName",
            "returnTypeString":"int"
         },
         {
            "name":"GetApproxClosestHitboxToRay",
            "retrunType":3,
            "a3arg":0,
            "helpText":"Given (ent, rayStart, rayDir), return an approximate point closest to the ray, based on hitbox centers."
         },
         {
            "name":"SendHudMessage",
            "retrunType":0,
            "a3arg":1,
            "helpText":"Send a HUD message to the given player.",
            "argTypes":"player, text, xPos, yPos, r1, g1, b1, a1, r2, g2, b2, a2, fadeTimeIn, holdTime, fadeTimeOut",
            "returnTypeString":"",
            "shortArgTypes":"..snniiiinnn"
         },
         {
            "name":"SendHudMessageToAll",
            "retrunType":0,
            "a3arg":1,
            "helpText":"Send a HUD message to the given player.",
            "argTypes":"player, text, xPos, yPos, r1, g1, b1, a1, r2, g2, b2, a2, fadeTimeIn, holdTime, fadeTimeOut",
            "returnTypeString":"",
            "shortArgTypes":".snniiiinnn"
         },
         {
            "name":"GetEntArrayByName_Expensive",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of entities matching a name",
            "argTypes":"string name",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetEntArrayByNameWildCard_Expensive",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of entities matching a name with support for *",
            "argTypes":"string name",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetEntArrayByClass_Expensive",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of entities matching a class",
            "argTypes":"string classname",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetEntArrayByClassWildCard_Expensive",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of entities matching a class with support for *",
            "argTypes":"string classname",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetEntArrayByScriptName",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of entities matching a script name",
            "argTypes":"string name",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetEntArrayByScriptNameInInstance",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of entities matching a script name and instance",
            "argTypes":"string scriptName, string instanceName",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetEntByScriptName",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Get entity matching the given script name. It will script error if no entity is found or more than one entity is found."
         },
         {
            "name":"GetEntByScriptNameInInstance",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Get entity matching the given script name and instance. It will script error if no entity is found or more than one entity is found."
         },
         {
            "name":"GetWeaponArray",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get weapons in the world",
            "argTypes":"bool onlyNotOwned",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"CreateWeaponEntityByName",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Create a weapon entity."
         },
         {
            "name":"CreateWeaponEntityByNameConstrained",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Create a constrained weapon entity that will stay in place at spawn."
         },
         {
            "name":"CreateWeaponEntityByNameWithPhysics",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Create a constrained weapon entity that will move at spawn."
         },
         {
            "name":"CreateScriptManagedEntArray",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Return array ID index"
         },
         {
            "name":"AddToScriptManagedEntArray",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Add an entity to script managed array"
         },
         {
            "name":"RemoveFromScriptManagedEntArray",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Remove entity from script managed array"
         },
         {
            "name":"GetScriptManagedEntArrayLen",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Get the size of the script managed ent array"
         },
         {
            "name":"GetScriptManagedEntArray",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get the script managed ent array for the given index",
            "argTypes":"int index",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetScriptManagedEntArrayWithinCenter",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get the script managed ent array for the given index within distance of a point",
            "argTypes":"int index, int notTeam, vector origin, float dist",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"SpawnPoints_SetRatingMultipliers_Enemy",
            "retrunType":0,
            "a3arg":0,
            "helpText":"For a class, set enemy rating multipliers for titan, pilot, ai"
         },
         {
            "name":"SpawnPoints_SetRatingMultipliers_Friendly",
            "retrunType":0,
            "a3arg":0,
            "helpText":"For a class, set friendly rating multipliers for titan, pilot, ai"
         },
         {
            "name":"SpawnPoints_SetRatingMultiplier_PetTitan",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Set pet Titan rating multiplier"
         },
         {
            "name":"SpawnPoints_GetPilot",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get pilot spawn points",
            "argTypes":"",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"SpawnPoints_GetTitan",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get titan spawn points",
            "argTypes":"",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"SpawnPoints_GetDropPod",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get droppod spawn points",
            "argTypes":"",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"SpawnPoints_GetPilotStart",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get pilot start spawn points for a team",
            "argTypes":"int team",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"SpawnPoints_GetTitanStart",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get titan start spawn points for a team",
            "argTypes":"int team",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"SpawnPoints_GetDropPodStart",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get droppod start spawn points for a team",
            "argTypes":"int team",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"SpawnPoints_SortPilot",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sort spawn points for pilot"
         },
         {
            "name":"SpawnPoints_SortTitan",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sort spawn points for titan"
         },
         {
            "name":"SpawnPoints_SortDropPod",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sort spawn points for droppod"
         },
         {
            "name":"SpawnPoints_SortPilotStart",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sort start spawn points for pilot"
         },
         {
            "name":"SpawnPoints_SortTitanStart",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sort start spawn points for titan"
         },
         {
            "name":"SpawnPoints_SortDropPodStart",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sort start spawn points for droppod"
         },
         {
            "name":"SpawnPoints_InitRatings",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Initialize rating spawn points"
         },
         {
            "name":"SpawnPoints_DiscardRatings",
            "retrunType":0,
            "a3arg":0,
            "helpText":"End rating spawn points without sorting"
         },
         {
            "name":"SpawnPoints_InitFrontlineData",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Initialize rating spawn points for frontlines"
         },
         {
            "name":"AssertNoPlayerChildren",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Check the given entity has no player childrens attached. If so, it will raise a script error."
         },
         {
            "name":"TryClearParent",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Tell code to try clear the move parent for the given entity, even if the entity is currently marked for deletion. This is a hack for shipping only and should not be used."
         },
         {
            "name":"CalculateHashForString",
            "retrunType":5,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"ShouldDoReplayIsForcedByCode",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns the value of tweak var 'replay_forced'."
         },
         {
            "name":"SetVisibleEntitiesInConeQueriableEnabled",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Given (entity, enabled) should this entity be a candidate to be returned from FindVisibleEntitiesInCone"
         },
         {
            "name":"SetCrosshairTeamColoringDisabled",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Given (entity, disabled) should this entity be disabled from doing team color crosshair logic"
         },
         {
            "name":"SetForceDrawWhileParented",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Force entity to be drawn while parented even to first person player"
         },
         {
            "name":"SetHideOnCloak",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Fully hide when cloaked"
         },
         {
            "name":"SetCustomSmartAmmoTarget",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets an entity to be a smart ammo target."
         },
         {
            "name":"SetPreventSmartAmmoLock",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Whether an entity is immune to smart ammo lock or not"
         },
         {
            "name":"SetSmartAmmoLockFromTitansOnly",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Whether an entity is immune to smart ammo lock from humans"
         },
         {
            "name":"NoteMatchState",
            "retrunType":0,
            "a3arg":0,
            "helpText":"( MATCHPHASE_?, maxRounds, roundsIMC, roundsMilitia, timeLimit, timePassed, maxScore, scoreIMC, scoreMilitia )"
         },
         {
            "name":"NoteLobbyState",
            "retrunType":0,
            "a3arg":0,
            "helpText":"( countdownRemaining [< 0 if no countdown] )"
         },
         {
            "name":"IsHighPerfDevServer",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Is high performance dev server"
         },
         {
            "name":"LogPlayerMatchStat_KilledAPilot",
            "retrunType":0,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"LogPlayerMatchStat_Death",
            "retrunType":0,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"LogPlayerMatchStat_EarnedXP",
            "retrunType":0,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"LogPlayerMatchStat_UsedBurncard",
            "retrunType":0,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"LogPlayerMatchStat_HappyHourMeritsGiven",
            "retrunType":0,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"ShouldAwardHappyHourBonus",
            "retrunType":6,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"LogPlayerStat_BurncardDiscard",
            "retrunType":0,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"SendAllPlayersBackToPartyScreen",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Send all players on the server back to the party server / screen"
         },
         {
            "name":"Explosion",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Creates an explosion. Does damage in an area, moves physics objects, plays effects. Explosion( center, attacker, inflictor, damage, damageHeavyArmor, innerRadius, outerRadius, flags, projectileLaunchOrigin, explosionForce, scriptDamageFlags, scriptDamageSourceIdentifier, impactEffectTableName )"
         },
         {
            "name":"Explosion_DamageDefSimple",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Creates an explosion. Does damage in an area, moves physics objects, plays effects. Explosion_DamageDefSimple( damageDefID, center, attacker, inflictor, projectileLaunchOrigin )"
         },
         {
            "name":"Explosion_DamageDef",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Same as Explosion_DamageDefSimple but specify damage and radius. Explosion_DamageDef( damageDefID, center, attacker, inflictor, damage, damageHeavyArmor, innerRadius, outerRadius, projectileLaunchOrigin )"
         },
         {
            "name":"RadiusDamage",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Does silent, invisible damage in a spherical area. RadiusDamage( center, attacker, inflictor, damage, damageHeavyArmor, innerRadius, outerRadius, flags, distanceFromAttacker, explosionForce, scriptDamageFlags, scriptDamageSourceIdentifier )"
         },
         {
            "name":"RadiusDamage_DamageDefSimple",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Does silent, invisible damage in a spherical area. RadiusDamage_DamageDefSimple( damagedefID, center, attacker, inflictor, distanceFromAttacker )"
         },
         {
            "name":"RadiusDamage_DamageDef",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Same as RadiusDamage_DamageDefSimple but specify damage and radius. RadiusDamage_DamageDef( damagedefID, center, attacker, inflictor, damage, damageHeavyArmor, innerRadius, outerRadius, distanceFromAttacker )"
         },
         {
            "name":"GetTeamEnt",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Returns an entity representing the specified team"
         },
         {
            "name":"Remote_BeginRegisteringFunctions",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Begin registration of remote functions."
         },
         {
            "name":"Remote_RegisterFunction",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Register a function name to be used in remote calls."
         },
         {
            "name":"Remote_EndRegisteringFunctions",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Finish registration of remote functions."
         },
         {
            "name":"Remote_CallFunction_Replay",
            "retrunType":0,
            "a3arg":1,
            "helpText":"Given a player, function name, and optional parameters, call function in client script. Then call it again if we rewind and play a kill replay. The command will not reach the client at all if called during a span of time the player skips because they were watching a replay. Allowed var types are null, bool, int, and float.",
            "argTypes":"player, functionName, [param1], [param2], [param3], ...",
            "returnTypeString":"void",
            "shortArgTypes":".es"
         },
         {
            "name":"Remote_CallFunction_NonReplay",
            "retrunType":0,
            "a3arg":1,
            "helpText":"Given a player, function name, and optional parameters, call function in client script. Does not get called again in replays. Allowed var types are null, bool, int, and float.",
            "argTypes":"player, functionName, [param1], [param2], [param3], ...",
            "returnTypeString":"void",
            "shortArgTypes":".es"
         },
         {
            "name":"Remote_CallFunction_UI",
            "retrunType":0,
            "a3arg":1,
            "helpText":"Given a player, function name, and optional parameters, call function in UI script. Allowed var types are null, bool, int, and float.",
            "argTypes":"player, functionName, [param1], [param2], [param3], ...",
            "returnTypeString":"void",
            "shortArgTypes":".es"
         },
         {
            "name":"LoadRecordedAnimation",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Loads an anim_recording asset generated by bakery.",
            "argTypes":"asset recordedAnimPath",
            "returnTypeString":"var"
         },
         {
            "name":"GetRecordedAnimationDuration",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Returns the duration in seconds of the recorded anim.",
            "argTypes":"var recordedAnim",
            "returnTypeString":"float"
         },
         {
            "name":"GetRecordedAnimationStartForRefPoint",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Calculates the position of the first frame of the recorded animation if it were played so that its reference origin/angles line up with the given origin/angles.",
            "argTypes":"var recordedAnim, vector refOrg, vector refAng",
            "returnTypeString":"vector"
         },
         {
            "name":"SaveGame_Create",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Do a save,  SaveGame_Create( string saveName, int saveVersion, int start_point ) "
         },
         {
            "name":"SaveGame_CreateWithCommitDelay",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Do a save,  SaveGame_Create( string saveName, int saveVersion, float delay, int trycount ) , will call back  'bool CodeCallback_SaveGameIsSafeToCommit()' to validate it is ok to commit the save file."
         },
         {
            "name":"SaveGame_Commit",
            "retrunType":0,
            "a3arg":0,
            "helpText":"If their is an outstanding save commit, accept it asap."
         },
         {
            "name":"SaveGame_Reject",
            "retrunType":0,
            "a3arg":0,
            "helpText":"If their is an outstanding save commit, reject it asap."
         },
         {
            "name":"SaveGame_Load",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Do a restore,  SaveGame_Load( string saveName )"
         },
         {
            "name":"SaveGame_IsValid",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Checks if a file is ok to use. SaveGame_IsValid( string saveName )"
         },
         {
            "name":"SaveGame_GetVersion",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Return the script version of a save load. SaveGame_GetVersion( string saveName ) "
         },
         {
            "name":"SaveGame_GetStartPoint",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Return the script start point of a save load. SaveGame_GetStartPoint( string saveName )"
         },
         {
            "name":"SaveGame_GetMapName",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Return the map name of a save load. SaveGame_GetMapName( string saveName ) "
         },
         {
            "name":"ChangeLevel",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Loads a new level. The data in transitionStruct can be read in the next level with GetLevelTransitionStruct().",
            "argTypes":"string mapname, LevelTransitionStruct transitionStruct",
            "returnTypeString":"void"
         },
         {
            "name":"GetLevelTransitionStruct",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Reads the transition data set by ChangeLevel() on the previous map. Returns null if this is the first map or the previous map didn't supply any data.",
            "argTypes":"",
            "returnTypeString":"LevelTransitionStruct ornull"
         },
         {
            "name":"PutEntityInSafeSpot",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Tries to put an entity into a position not in solid, given a desired 'end' position. Returns true if successful. If you don't have a safeStartingLocationForEntity, just set it the same as the end position. PutEntityInSafeSpot( entity, referenceEnt, movingGroundEnt, safeStartingLocationForEntity, positionAtEndOfAnimationForEntity )"
         },
         {
            "name":"SetTimeshiftTimeOfDay_Night",
            "retrunType":0,
            "a3arg":0,
            "helpText":"",
            "argTypes":"",
            "returnTypeString":"void"
         },
         {
            "name":"SetTimeshiftTimeOfDay_Day",
            "retrunType":0,
            "a3arg":0,
            "helpText":"",
            "argTypes":"",
            "returnTypeString":"void"
         },
         {
            "name":"SetTimeshiftArmDeviceSkin",
            "retrunType":0,
            "a3arg":0,
            "helpText":"",
            "argTypes":"int skinIndex",
            "returnTypeString":"void"
         },
         {
            "name":"WeaponIsPrecached",
            "retrunType":6,
            "a3arg":0,
            "helpText":"",
            "argTypes":"string weaponName",
            "returnTypeString":"bool"
         },
         {
            "name":"ModelIsPrecached",
            "retrunType":6,
            "a3arg":0,
            "helpText":"",
            "argTypes":"asset modelAssetName",
            "returnTypeString":"bool"
         },
         {
            "name":"CreateRope",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Creates a rope between two points or entities.",
            "argTypes":"vector start, vector end, float length = 0, entity startEnt = null, entity endEnt = null, int startAttachment = 0, int endAttachment = 0, string material = \"\", int segmentCount = 0",
            "returnTypeString":"entity"
         },
         {
            "name":"GetTeamSkill",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Gets the overall skill of the given team"
         },
         {
            "name":"CreatePINTelemetryHeader",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"int versionMajor, int versionMinor, table keyValuePairs",
            "returnTypeString":"void"
         },
         {
            "name":"AddPINTelemetryEvent",
            "retrunType":32,
            "a3arg":1,
            "helpText":"",
            "argTypes":"string eventName, table headerKeyValuePairs, table bodyKeyValuePairs",
            "returnTypeString":"void"
         },
         {
            "name":"GetPINPlatformName",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Gets the platform name the way PIN likes it"
         },
         {
            "name":"GetDatacenterName",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Gets the name of this server's datacenter"
         },
         {
            "name":"IsGameFromReload",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Is this a reloaded save game?"
         },
         {
            "name":"GetCPULevel",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Gets the CPU level for the platform this server is running on"
         },
         {
            "name":"IsEnemyTeam",
            "retrunType":6,
            "a3arg":0,
            "helpText":"",
            "argTypes":"int teamNumber, int otherTeam",
            "returnTypeString":"bool"
         },
         {
            "name":"GetCurrentPlaylistGamemodesCount",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Returns the number of gamemodes in the current playlist"
         },
         {
            "name":"GetPlaylistGamemodesCount",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Returns the number of gamemodes in the specified playlist"
         },
         {
            "name":"GetCurrentPlaylistGamemodeByIndex",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Returns the name of the gamemode at the specified index in the current playlist"
         },
         {
            "name":"GetPlaylistGamemodeByIndex",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Returns the name of the gamemode at the specified index in the specified playlist"
         },
         {
            "name":"GetPlaylistGamemodeByIndexVar",
            "retrunType":33,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"GetCurrentPlaylistGamemodeByIndexVar",
            "retrunType":33,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"GetCurrentPlaylistGamemodeByIndexMapsCount",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Returns the number of maps for the gamemode at the specified index in the current playlist"
         },
         {
            "name":"GetPlaylistGamemodeByIndexMapsCount",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Returns the number of maps for the gamemode at the specified index in the specified playlist"
         },
         {
            "name":"GetCurrentPlaylistGamemodeByIndexMapByIndex",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Returns the name of the map at the specified gamemode and map indices in the current playlist"
         },
         {
            "name":"GetPlaylistGamemodeByIndexMapByIndex",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Returns the name of the map at the specified gamemode and map indices in the specified playlist"
         },
         {
            "name":"GetCurrentPlaylistMapsCount",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Returns the total number of maps in current playlist"
         },
         {
            "name":"GetPlaylistMapsCount",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Returns the total number of maps in the specified playlist"
         },
         {
            "name":"IsPrivateMatch",
            "retrunType":6,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"IsCoopMatch",
            "retrunType":6,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"GetLobbyTeamsShowAsBalanced",
            "retrunType":6,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"DevLobbyIsFrozen",
            "retrunType":6,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"GetGamemodeVarOrUseValue",
            "retrunType":33,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"GetPlaylistCount",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Returns the total number of playlists"
         },
         {
            "name":"GetPlaylistName",
            "retrunType":32,
            "a3arg":0,
            "helpText":"Gets the name of the playlist, by index"
         },
         {
            "name":"GetPlaylistVarOrUseValue",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Get the value of a variable from a playlist, and if it doesn't exist, use the value passed in"
         },
         {
            "name":"GetPlaylistVarOrUseValueOriginal",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Get the original value of a variable from a playlist, and if it doesn't exist, use the value passed in"
         },
         {
            "name":"GetCurrentPlaylistName",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Get the name of the current playlist"
         },
         {
            "name":"Code_GetCurrentPlaylistVar",
            "retrunType":32,
            "a3arg":0,
            "helpText":"Get the value of a variable from the current playlist"
         },
         {
            "name":"Code_GetCurrentPlaylistVarOrUseValue",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Get the value of a variable from the current playlist, and if it doesn't exist, use the value passed in"
         },
         {
            "name":"GetCurrentPlaylistVarOrUseValueOriginal",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Get the original value of a variable from the current playlist, and if it doesn't exist, use the value passed in"
         },
         {
            "name":"GetMaxPlayersForPlaylistName",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Gets the max players for the specified playlist"
         },
         {
            "name":"GetMaxTeamsForPlaylistName",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Gets the max teams for the specified playlist"
         },
         {
            "name":"SetPlaylistVarOverride",
            "retrunType":0,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"ClearPlaylistVarOverrides",
            "retrunType":0,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"SetCurrentPlaylist",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Sets the current playlist"
         },
         {
            "name":"SendTrainingGauntletStatsToBackend",
            "retrunType":0,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"IsMatchmakingServer",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if this is a matchmaking server"
         },
         {
            "name":"GetLobbyType",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Returns 'party' or 'game' lobby type"
         },
         {
            "name":"GetPlayerByIndex",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Returns player entity n where n is in [0,maxPlayers-1]."
         },
         {
            "name":"DamageDef_GetCount",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Get number of damage defs defined"
         },
         {
            "name":"DamageDef_GetName",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Get damage def name"
         },
         {
            "name":"DamageDef_GetObituary",
            "retrunType":33,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"DamageDef_GetDeathProtection",
            "retrunType":6,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"Dev_DamageDef_GetSettingByKeyField",
            "retrunType":35,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"GameRules_GetGameMode",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Get the base, game mode name"
         },
         {
            "name":"GameRules_GetTeamScore",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Get a team's score, given a team index."
         },
         {
            "name":"GameRules_GetTeamScore2",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Get a team's second score, given a team index."
         },
         {
            "name":"GameRules_GetTeamKills",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Get a team's score, given a team index."
         },
         {
            "name":"GameRules_GetTeamDeaths",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Get a team's score, given a team index."
         },
         {
            "name":"GameRules_GetTeamName",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Get a team's name, given a team index."
         },
         {
            "name":"GameRules_TimeLimitEnabled",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if the time limit should be enabled"
         },
         {
            "name":"GameRules_AllowMatchEnd",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if the match can end"
         },
         {
            "name":"GameRules_GetClassMax",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Get the max players allowed for a class."
         },
         {
            "name":"GameRules_SetGameMode",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Set the game mode"
         },
         {
            "name":"GameRules_SetTeamScore",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Set a team's score, given a team index and new score."
         },
         {
            "name":"GameRules_SetTeamScore2",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Set a team's second score, given a team index and new score."
         },
         {
            "name":"GameRules_EndMatch",
            "retrunType":0,
            "a3arg":0,
            "helpText":"End the match."
         },
         {
            "name":"GameRules_MarkGameStatePrematchEnding",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Note that the game has started (end of prematch)."
         },
         {
            "name":"GameRules_MarkGameStateWinnerDetermined",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Note that a winner has been declared (start of epilogue, etc)."
         },
         {
            "name":"GameRules_ChangeMap",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Change to a new map"
         },
         {
            "name":"GameRules_GetRecentMap",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Returns the most recent maps loaded"
         },
         {
            "name":"GameRules_GetRecentGameMode",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Returns the most recent game modes loaded"
         },
         {
            "name":"GameRules_GetRecentTeamScore",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Returns the most recent team scores"
         },
         {
            "name":"GameRules_EnableGlobalChat",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Set whether you want everyone to hear everyone else"
         },
         {
            "name":"GameRules_GetUniqueMatchID",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Gets the unique ID for this match"
         },
         {
            "name":"GameRules_SetDeadPlayersCanOnlySpeakToDeadPlayersInHudChat",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Set if dead players can only text chat with other dead players"
         },
         {
            "name":"MarkTeamsAsBalanced_On",
            "retrunType":0,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"MarkTeamsAsBalanced_Off",
            "retrunType":0,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"SendPlayersToPartyScreen",
            "retrunType":0,
            "a3arg":1,
            "helpText":"Sends a group of players off to the party screen, possibly by allocating a server first",
            "argTypes":"",
            "returnTypeString":"void",
            "shortArgTypes":".."
         },
         {
            "name":"BeginPrivateMatchSearchForPlayer",
            "retrunType":0,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"MatchmakePlayer",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Find a match for this player"
         },
         {
            "name":"AbortMatchSearchesForPlayer",
            "retrunType":0,
            "a3arg":0,
            "helpText":""
         },
         {
            "name":"SetMaxActivityMode",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Set max activity mode on the server (0,1,2)"
         },
         {
            "name":"DamageInfo_GetAttacker",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Return the attacker that inflicted this damage"
         },
         {
            "name":"DamageInfo_GetInflictor",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Return the entity that inflicted this damage (projectile, etc...)"
         },
         {
            "name":"DamageInfo_GetWeapon",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Return the weapon that the attacker was using"
         },
         {
            "name":"DamageInfo_GetForceKill",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Return whether this damage should force a kill"
         },
         {
            "name":"DamageInfo_GetDamage",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Return the amount of damage"
         },
         {
            "name":"DamageInfo_GetDamageCriticalHitScale",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Gets the scale that critical hit damage should be multiplied by."
         },
         {
            "name":"DamageInfo_GetDamagePosition",
            "retrunType":3,
            "a3arg":0,
            "helpText":"Gets the world position where the damage was dealt"
         },
         {
            "name":"DamageInfo_GetHitGroup",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Get the section group being damaged"
         },
         {
            "name":"DamageInfo_GetHitBox",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Get the section being damaged"
         },
         {
            "name":"DamageInfo_GetDeathPackage",
            "retrunType":33,
            "a3arg":0,
            "helpText":"Returns what death package you have set, if any."
         },
         {
            "name":"DamageInfo_GetDamageType",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Gets the code damage type"
         },
         {
            "name":"DamageInfo_GetCustomDamageType",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Gets the damage type that was set by script when firing the weapon."
         },
         {
            "name":"DamageInfo_GetDamageSourceIdentifier",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Gets the damage source identifier that was set by script when this damage mechanism was created."
         },
         {
            "name":"DamageInfo_GetViewPunchMultiplier",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Gets the view punch multiplier"
         },
         {
            "name":"DamageInfo_GetDistFromAttackOrigin",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Get the distance from where the bullet/projectile was fired."
         },
         {
            "name":"DamageInfo_GetDistFromExplosionCenter",
            "retrunType":1,
            "a3arg":0,
            "helpText":"If it's a radius damage, gives the distance from the center of the blast. Otherwise defaults to zero."
         },
         {
            "name":"DamageInfo_GetDamageForce",
            "retrunType":3,
            "a3arg":0,
            "helpText":"Get damage force vector."
         },
         {
            "name":"DamageInfo_IsRagdollAllowed",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Checks if code is allowing this entity to ragdoll on death"
         },
         {
            "name":"DamageInfo_GetDamageFlags",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Get all DAMAGEFLAG_* flags."
         },
         {
            "name":"DamageInfo_HasDamageFlags",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if contains all given DAMAGEFLAG_* flags."
         },
         {
            "name":"DamageInfo_GetDamageWeaponName",
            "retrunType":32,
            "a3arg":0,
            "helpText":"Returns weapon name, even if weapon entity is gone"
         },
         {
            "name":"DamageInfo_ShouldRecordStatsForWeapon",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns if stats should be recorded for damage weapon"
         },
         {
            "name":"DamageInfo_SetForceKill",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets whether this damage should force a kill"
         },
         {
            "name":"DamageInfo_SetDamage",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Set the amount of damage"
         },
         {
            "name":"DamageInfo_SetCustomDamageType",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Overrides the damage type that was set by script when firing the weapon."
         },
         {
            "name":"DamageInfo_AddCustomDamageType",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Add damage flag."
         },
         {
            "name":"DamageInfo_RemoveCustomDamageType",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Remove damage flag."
         },
         {
            "name":"DamageInfo_SetDamageSourceIdentifier",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets the damage source identifier."
         },
         {
            "name":"DamageInfo_SetDeathPackage",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Set what death (anim) package to use if this damage kills the guy."
         },
         {
            "name":"DamageInfo_SetDamageForce",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Set damage force vector."
         },
         {
            "name":"DamageInfo_SetFlinchDirection",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Set which direction the target should flinch in."
         },
         {
            "name":"DamageInfo_AddDamageFlags",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Add a DAMAGEFLAG_* flag."
         },
         {
            "name":"AINFileIsUpToDate",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if the map's AIN file is up-to-date."
         },
         {
            "name":"AINExists",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns AIN file exists"
         },
         {
            "name":"NPCSetSearchPathUseDist",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Set the maximum distance for considering search paths"
         },
         {
            "name":"NPCGetSearchPathUseDist",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Get the maximum distance for considering search paths"
         },
         {
            "name":"NPCSetAimConeFocusParams",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets how long it takes AI cone to focus to values in weapon settings, and how much to increase cone by when not focused"
         },
         {
            "name":"NPCSetAimPatternFocusParams",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets how long it takes AI spread pattern to focus to values in weapon settings, and also for when the AI is not in players FOV, and multiplier for not in FOV"
         },
         {
            "name":"NPCSetReacquireParams",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets how long it takes AI to not see enemy before considering enemy to be reacquired. Set time to prevent reacquire if AI has been suppressing enemy"
         },
         {
            "name":"NPCSetSquadNoFlankThreshold",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets distance and member percent fraction (0 - 1) for not using flanking"
         },
         {
            "name":"CreateNPCSquad",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Creates an empty NPC Squad"
         },
         {
            "name":"GetNearestNodeToPos",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Gets the nearest node to a position"
         },
         {
            "name":"GetBestNodeForPosInWedge",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Gets the best node in a wedge shape, taking distance from a given point into account, that has the given script data bits set"
         },
         {
            "name":"GetNodePos",
            "retrunType":3,
            "a3arg":0,
            "helpText":"Gets the position of a node"
         },
         {
            "name":"GetNodeCount",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Gets the number of nodes in the level"
         },
         {
            "name":"GetNodeScriptData_Boolean",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns boolean data on an AI node at a given slot"
         },
         {
            "name":"SetNodeScriptData_Boolean",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets boolean data on an AI node at a given slot"
         },
         {
            "name":"GetAINScriptVersion",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Returns what the currently loaded AINs script version is"
         },
         {
            "name":"SetAINScriptVersion",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Sets what the currently loaded AINs script version is for later serialization to file"
         },
         {
            "name":"NavMesh_IsUpToDate",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Returns true if the map's navmesh is up-to-date."
         },
         {
            "name":"NavMesh_ClampPointForAI",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Clamps a goal point to the NavMesh for a given AI. Uses AIs hull size as test extents",
            "argTypes":"vector pointToClamp, entity contextAI",
            "returnTypeString":"vector ornull"
         },
         {
            "name":"NavMesh_ClampPointForAIWithExtents",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Clamps a goal point to the NavMesh for a given AI. As extents increase in size more possible clamp positions become available, but too large and the clamped position may be very far from the original point",
            "argTypes":"vector pointToClamp, entity contextAI, vector extents",
            "returnTypeString":"vector ornull"
         },
         {
            "name":"NavMesh_ClampPointForHull",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Clamps a goal point to the NavMesh for a given hull",
            "argTypes":"vector pointToClamp, int hull",
            "returnTypeString":"vector ornull"
         },
         {
            "name":"NavMesh_ClampPointForHullWithExtents",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Clamps a goal point to the NavMesh for a given hull. As extents increase in size more possible clamp positions become available, but too large and the clamped position may be very far from the original point",
            "argTypes":"vector pointToClamp, int hull, vector extents",
            "returnTypeString":"vector ornull"
         },
         {
            "name":"NavMesh_GetNeighborPositions",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get nearby ground positions by following the NavMesh graph",
            "argTypes":"vector startPos, int hull, int numPositionsRequested",
            "returnTypeString":"array< vector >"
         },
         {
            "name":"NavMesh_RandomPositions",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get n ( < 64) ground positions around a spot within minDist and maxDist",
            "argTypes":"vector startPos, int hull, int numPositionsRequested, float minDist, float maxDist",
            "returnTypeString":"array< vector >"
         },
         {
            "name":"NavMesh_RandomPositions_LargeArea",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get upto n ground positions around a spot within minDist and maxDist. Gets center of random polygons",
            "argTypes":"vector startPos, int hull, int numPositionsRequested, float minDist, float maxDist",
            "returnTypeString":"array< vector >"
         },
         {
            "name":"NavMesh_IsPosReachableForAI",
            "retrunType":6,
            "a3arg":0,
            "helpText":"Return if a position is reachable for an AI from it's current position. Only checks static pathing."
         },
         {
            "name":"GetBoundsMin",
            "retrunType":3,
            "a3arg":0,
            "helpText":"Get minimum bounds for a HULL type"
         },
         {
            "name":"GetBoundsMax",
            "retrunType":3,
            "a3arg":0,
            "helpText":"Get maximum bounds for a HULL type"
         },
         {
            "name":"GetNPCSquadSize",
            "retrunType":5,
            "a3arg":0,
            "helpText":"Gets the number of members in a squad"
         },
         {
            "name":"SetNPCSquadMode",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Set squad mode"
         },
         {
            "name":"GetNPCArrayBySquad",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of all NPCs of squad",
            "argTypes":"string squadname",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"UpdateEnemyMemoryFromTeammates",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Get a dump of enemies from all teammate AI"
         },
         {
            "name":"UpdateEnemyMemoryWithinRadius",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Get all enemy information within radius"
         },
         {
            "name":"SetEnableNPCs",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Enable or disable AI in the level"
         },
         {
            "name":"ToggleNPCPathsForEntity",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Enable or disable pathing for collision of an entity"
         },
         {
            "name":"ToggleNPCPathsForEntityAtPosition",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Enable or disable pathing for collision of an entity at a given position"
         },
         {
            "name":"TransitionNPCPathsForEntity",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Transition pathing from moving collision to end state of the moving collision or vice versa"
         },
         {
            "name":"SkitSetDistancesToClosestHarpoints",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Initialize distance to nearest hard point"
         },
         {
            "name":"GetSkitNodeArray_NearPlayers",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get skit nodes sorted by nearest to average player position with some randomization",
            "argTypes":"",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetSkitNodeArray_NearHardpoints",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get skit nodes sorted by nearest to hardpoints with some randomization",
            "argTypes":"",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetSkitNodeArray_NearPos",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get skit nodes sorted by nearest to pos with some randomization",
            "argTypes":"",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"AI_CreateDangerousArea",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Create a known dangerous area that AI should avoid if necessary. The lifetime of the danger is tied to an entity",
            "argTypes":"entity lifetimeEnt, entity weaponOrProjectile, float radius, int safeTeam, bool affectsNormalArmor, bool affectsHeavyArmor",
            "returnTypeString":"void"
         },
         {
            "name":"AI_CreateDangerousArea_Static",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Same as AI_CreateDangerousArea except the origin is always in a single place",
            "argTypes":"entity lifetimeEnt, entity weaponOrProjectile, float radius, int safeTeam, bool affectsNormalArmor, bool affectsHeavyArmor, vector staticOrigin",
            "returnTypeString":"void"
         },
         {
            "name":"AI_CreateDangerousArea_DamageDef",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Create dangerous area using damage def",
            "argTypes":"int damageDef, entity lifetimeEnt, int safeTeam, bool affectsNormalArmor, bool affectsHeavyArmor",
            "returnTypeString":"void"
         },
         {
            "name":"Weapon_SetDespawnTime",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Dropped weapons disappear after this much time"
         },
         {
            "name":"SmartAmmo_SetCustomFractionSource",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Set a source for a lock-on warning"
         },
         {
            "name":"SmartAmmo_ClearCustomFractionSource",
            "retrunType":0,
            "a3arg":0,
            "helpText":"Clear a source for a lock-on warning. Pass in null for target player to clear all lock-on warnings for the given source."
         },
         {
            "name":"SmartAmmo_GetCustomFractionSource",
            "retrunType":1,
            "a3arg":0,
            "helpText":"Get the current fraction value for the given source and target"
         },
         {
            "name":"CreateTurretEnt",
            "retrunType":13,
            "a3arg":0,
            "helpText":"",
            "argTypes":"vector origin, vector angles, entity ownerEnt, asset turretModel, string turretSettingsName",
            "returnTypeString":"entity"
         },
         {
            "name":"CreateControlPanelEnt",
            "retrunType":13,
            "a3arg":0,
            "helpText":"",
            "argTypes":"vector origin, vector angles, entity ownerEnt, asset model",
            "returnTypeString":"entity"
         },
         {
            "name":"GetSpawnerArrayByClassName",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of spawners matching a class name",
            "argTypes":"string name",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetSpawnerArrayByScriptName",
            "retrunType":32,
            "a3arg":1,
            "helpText":"Get array of spawners matching a script name",
            "argTypes":"string name",
            "returnTypeString":"array< entity >"
         },
         {
            "name":"GetSpawnerByScriptName",
            "retrunType":13,
            "a3arg":0,
            "helpText":"Get spawner matching the given script name. It will script error if no spawner is found or more than one entity is found."
         }
      ],
      "intConstants":[
         {
            "name":"VO_DEBOUNCE_TIME_AI_CHATTER_HIGH",
            "val":55
         },
         {
            "name":"COCKPIT_STIM_FX",
            "val":165
         },
         {
            "name":"shGlobalMP",
            "val":83
         },
         {
            "name":"CNPC_Titan",
            "val":18
         },
         {
            "name":"ANTI_RODEO_DEFAULT_WINDOW_START",
            "val":244
         },
         {
            "name":"svSpawnGlobals",
            "val":98
         },
         {
            "name":"CNPC_Dropship",
            "val":19
         },
         {
            "name":"CBaseGrenade",
            "val":42
         },
         {
            "name":"PILOT_STIM_HLD_FX",
            "val":166
         },
         {
            "name":"CPlayerDecoy",
            "val":38
         },
         {
            "name":"CRopeKeyframe",
            "val":26
         },
         {
            "name":"CScriptProp",
            "val":13
         },
         {
            "name":"shTitanXP",
            "val":92
         },
         {
            "name":"VO_DEBOUNCE_TIME_AI_CHATTER_LOWEST",
            "val":58
         },
         {
            "name":"GAMETYPE_COLOR",
            "val":51
         },
         {
            "name":"burn",
            "val":185
         },
         {
            "name":"CBaseEntity",
            "val":4
         },
         {
            "name":"_nextEntVarIndex",
            "val":71
         },
         {
            "name":"CBaseCombatWeapon",
            "val":2
         },
         {
            "name":"_serverVars",
            "val":62
         },
         {
            "name":"level",
            "val":45
         },
         {
            "name":"shCapturePointGlobals",
            "val":178
         },
         {
            "name":"ScriptMover",
            "val":12
         },
         {
            "name":"_RegisteringFunctions",
            "val":61
         },
         {
            "name":"CTriggerPointGravity",
            "val":32
         },
         {
            "name":"VO_DEBOUNCE_TIME_AI_CHATTER",
            "val":56
         },
         {
            "name":"_nextServerVarIndex",
            "val":65
         },
         {
            "name":"consoleVars",
            "val":294
         },
         {
            "name":"ANTI_RODEO_DEFAULT_WINDOW_DURATION",
            "val":243
         },
         {
            "name":"CFirstPersonProxy",
            "val":24
         },
         {
            "name":"HARDPOINTS",
            "val":274
         },
         {
            "name":"shFactionXP",
            "val":90
         },
         {
            "name":"CTeamSpawnPoint",
            "val":35
         },
         {
            "name":"LEGAL_PLAYER_TITAN_SETTINGS",
            "val":59
         },
         {
            "name":"CBaseHelicopter",
            "val":20
         },
         {
            "name":"CParticleSystem",
            "val":39
         },
         {
            "name":"BUBBLE_SHIELD_FX_PARTICLE_SYSTEM_INDEX",
            "val":252
         },
         {
            "name":"_entityClassVarChangeCallbacks",
            "val":70
         },
         {
            "name":"GAMETYPE",
            "val":52
         },
         {
            "name":"CTitanSoul",
            "val":17
         },
         {
            "name":"CBreakable",
            "val":28
         },
         {
            "name":"ANTI_RODEO_DEFAULT_START_DELAY",
            "val":241
         },
         {
            "name":"_entityClassVarHandles",
            "val":69
         },
         {
            "name":"HOLO_PILOT_TRAIL_FX",
            "val":137
         },
         {
            "name":"CTurret",
            "val":9
         },
         {
            "name":"CProjectile",
            "val":6
         },
         {
            "name":"HUMAN_RAGDOLL_IMPACT_TABLE_IDX",
            "val":199
         },
         {
            "name":"burnMeterCanUseFuncTable",
            "val":186
         },
         {
            "name":"factionLeaderData",
            "val":173
         },
         {
            "name":"battleChatterData",
            "val":171
         },
         {
            "name":"CAI_Hint",
            "val":30
         },
         {
            "name":"GAMEDESC_CURRENT",
            "val":54
         },
         {
            "name":"earn",
            "val":130
         },
         {
            "name":"NullNodeFP",
            "val":122
         },
         {
            "name":"svGlobal",
            "val":102
         },
         {
            "name":"VO_DEBOUNCE_TIME_AI_CHATTER_LOW",
            "val":57
         },
         {
            "name":"CAI_BaseNPC",
            "val":16
         },
         {
            "name":"_cc",
            "val":100
         },
         {
            "name":"CEnvExplosion",
            "val":41
         },
         {
            "name":"ANTI_RODEO_DEFAULT_DRAIN_DURATION",
            "val":242
         },
         {
            "name":"CBaseAnimating",
            "val":3
         },
         {
            "name":"shWeaponXP",
            "val":94
         },
         {
            "name":"CNPC_Drone",
            "val":22
         },
         {
            "name":"RODEO_BATTERY_EXPLOSION_EFFECT",
            "val":240
         },
         {
            "name":"_entityClassVars",
            "val":66
         },
         {
            "name":"_entityVarsByEHandle",
            "val":72
         },
         {
            "name":"GAMETYPE_ICON",
            "val":50
         },
         {
            "name":"_entityClassVarsSyncToAllClients",
            "val":68
         },
         {
            "name":"_entityClassVarsIsEnts",
            "val":67
         },
         {
            "name":"CPlayer",
            "val":25
         },
         {
            "name":"regexp",
            "val":0
         },
         {
            "name":"CScriptTraceVolume",
            "val":11
         },
         {
            "name":"CNPC_SentryTurret",
            "val":15
         },
         {
            "name":"CBaseTrigger",
            "val":34
         },
         {
            "name":"CHardPointEntity",
            "val":36
         },
         {
            "name":"reloadingScripts",
            "val":46
         },
         {
            "name":"CSpawner",
            "val":37
         },
         {
            "name":"_serverVarHandles",
            "val":64
         },
         {
            "name":"GAMETYPE_TEXT",
            "val":48
         },
         {
            "name":"INVALID_REF",
            "val":89
         },
         {
            "name":"CVortexSphere",
            "val":8
         },
         {
            "name":"reloadedScripts",
            "val":47
         },
         {
            "name":"CWindowHint",
            "val":23
         },
         {
            "name":"CBreakableSurface",
            "val":27
         },
         {
            "name":"CTriggerCylinder",
            "val":33
         },
         {
            "name":"CCrossbowBolt",
            "val":7
         },
         {
            "name":"_sc",
            "val":101
         },
         {
            "name":"_ClientCommandCallbacks",
            "val":99
         },
         {
            "name":"CDynamicProp",
            "val":14
         },
         {
            "name":"CWeaponX",
            "val":1
         },
         {
            "name":"GAMETYPE_DESC",
            "val":49
         },
         {
            "name":"CBaseCombatCharacter",
            "val":10
         },
         {
            "name":"MAX_TEAMS",
            "val":53
         },
         {
            "name":"CAI_SkitNode",
            "val":29
         },
         {
            "name":"CAI_BaseActor",
            "val":31
         },
         {
            "name":"RERUN_LAUNCH_STARTPOINT",
            "val":44
         },
         {
            "name":"_serverEntityVars",
            "val":63
         },
         {
            "name":"CMissile",
            "val":5
         },
         {
            "name":"CScriptDamageInfo",
            "val":40
         },
         {
            "name":"CAI_TrackPather",
            "val":21
         }
      ],
      "nativeClassFunctions":[
         {
            "className":"CAI_BaseNPC",
            "parent":"CBaseCombatCharacter",
            "functions":[
               {
                  "name":"HasAISettings",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Return if AI settings have been set"
               },
               {
                  "name":"SetAISettings",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the AI's settings file"
               },
               {
                  "name":"GetAISettingsName",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Gets the AI settings name"
               },
               {
                  "name":"SetBehaviorSelector",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the AI's behavior selector"
               },
               {
                  "name":"GetSubclass",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets the AI's subclass type"
               },
               {
                  "name":"SetSubclass",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the AI's subclass type"
               },
               {
                  "name":"GetAIClass",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets the AI Class"
               },
               {
                  "name":"GetAIClassName",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Gets the AI Class by name"
               },
               {
                  "name":"GetBodyType",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Gets the AI body type"
               },
               {
                  "name":"IsCrouching",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether the AI is crouching"
               },
               {
                  "name":"UseSequenceBounds",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Use animation sequence for bounding box (expensive)"
               },
               {
                  "name":"GetSettingModelName",
                  "retrunType":40,
                  "a3arg":0,
                  "helpText":"Return default model name for current team",
                  "argTypes":"",
                  "returnTypeString":"asset"
               },
               {
                  "name":"GetSettingTitle",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Return default title for current team"
               },
               {
                  "name":"AddToFireteam",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Add this npc to the specified player's fireteam in the specified slot, and set player as this npc's boss."
               },
               {
                  "name":"RemoveFromFireteam",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Remove this npc from any fireteam."
               },
               {
                  "name":"EnableBehavior",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Enable NPC Behavior by behavior name"
               },
               {
                  "name":"DisableBehavior",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Disable NPC Behavior by behavior name"
               },
               {
                  "name":"InitFollowBehavior",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Setup follow behavior (follow target and formation)"
               },
               {
                  "name":"SetFollowTargetMoveTolerance",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set target move tolerance to change follow position when follow target moves"
               },
               {
                  "name":"SetFollowGoalTolerance",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set goal tolerance when not in combat"
               },
               {
                  "name":"SetFollowGoalCombatTolerance",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set goal tolerance when in combat"
               },
               {
                  "name":"GetFollowTarget",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets the entity the NPC is following"
               },
               {
                  "name":"AssaultPointClampedExtents",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Same as AssaultPoint but clamps position to navmesh within extents."
               },
               {
                  "name":"AssaultPointClamped",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Same as AssaultPoint but clamps position to navmesh."
               },
               {
                  "name":"AssaultPoint",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Uses assault behavior to reach a given location."
               },
               {
                  "name":"AssaultPointToAnimSetCallback",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Callback when AI arrives at position to do animation"
               },
               {
                  "name":"AssaultGetFightRadius",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get assault fight radius."
               },
               {
                  "name":"AssaultGetGoalRadius",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get assault goal radius."
               },
               {
                  "name":"AssaultGetGoalHeight",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get assault goal radius."
               },
               {
                  "name":"AssaultGetArrivalTolerance",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get the custom assault arrival tolerance."
               },
               {
                  "name":"AssaultClearArrivalTolerance",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Removes the custom assault arrival tolerance."
               },
               {
                  "name":"AssaultSetFightRadius",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set assault fight radius."
               },
               {
                  "name":"AssaultSetGoalRadius",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set assault goal radius. Sets goal height to radius if it is taller than the radius"
               },
               {
                  "name":"AssaultSetGoalHeight",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set assault goal height."
               },
               {
                  "name":"AssaultSetArrivalTolerance",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets a custom assault arrival tolerance."
               },
               {
                  "name":"AssaultSetAngles",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set assault angles and faceAngles."
               },
               {
                  "name":"AssaultSetFinalDestination",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set assault final destination flag which allows AI to take up squad assigned positions."
               },
               {
                  "name":"InitSquadAssaultInterupt",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetMinGoalRadius",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get minium goal radius for an AI for current AI setting"
               },
               {
                  "name":"SetAlert",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets AI to alert state once. The state can be changed by AI when appropriate"
               },
               {
                  "name":"GetDangerousAreaWeapon",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Get weapon name for current dangerous area"
               },
               {
                  "name":"ForceCheckGroundEntity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Force check ground entity"
               },
               {
                  "name":"GetNPCVelocity",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Gets an NPC's velocity."
               },
               {
                  "name":"TestAnimPath",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Checks if NPC can play an animation from its current position and angles without getting blocked"
               },
               {
                  "name":"TestAnimPathFrom",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Checks if NPC can play an animation from a position and angles without getting blocked"
               },
               {
                  "name":"SetActivityModifier",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Enables or disables activity modifiers on this entity. See ACT_MODIFIER_***"
               },
               {
                  "name":"IsActivityModifierActive",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether or not an activity modifier is active on this entity. See ACT_MODIFIER_***"
               },
               {
                  "name":"GetSquadCentroid",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Gets the squad members average origin"
               },
               {
                  "name":"SetSquad",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets NPC's squad. Set to \"\" to clear"
               },
               {
                  "name":"SetAutoSquad",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set NPC to auto managed squad."
               },
               {
                  "name":"GetEnemy",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets the NPC's enemy, if he has one"
               },
               {
                  "name":"GetEnemyLKP",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Return the last known position of the enemy for this NPC"
               },
               {
                  "name":"GetEnemyLSP",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Return the last seen position of the enemy for this NPC"
               },
               {
                  "name":"GetEnemyLastTimeSeen",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns the last time this AI saw his enemy. Only valid if GetEnemy() is not null"
               },
               {
                  "name":"GetTimeFirstAttackAfterReacquire",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Return the time that this AI first shot at the enemy after reacquire"
               },
               {
                  "name":"GetClosestEnemyPlayer",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets closest non-cloaked enemy player, even if not visible, within sensing dist"
               },
               {
                  "name":"GetClosestEnemyNPC",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets closest non-cloaked enemy NPC, even if not visible, within sensing dist"
               },
               {
                  "name":"GetClosestEnemy",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets closest non-cloaked enemy player or NPC, even if not visible, within sensing dist"
               },
               {
                  "name":"GetSafeHint",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets the safe hint entity the AI is currently using"
               },
               {
                  "name":"GetGoalEnt",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets the NPC's goal entity"
               },
               {
                  "name":"SetGoalEnt",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the NPC's goal entity"
               },
               {
                  "name":"CanSee",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Determines if the given entity is visible to this NPC"
               },
               {
                  "name":"TimeSinceSeen",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Time since this NPC last saw this entity"
               },
               {
                  "name":"TimeSinceKnown",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Time since this NPC last knew this entity's position"
               },
               {
                  "name":"GetNearestVisibleFriendlyPlayer",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets the nearest visible friendly player"
               },
               {
                  "name":"GetSquadEnemy",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets the enemy the NPC's squad is focused on"
               },
               {
                  "name":"GetLookDist",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get actual maximum sight dist currently in use"
               },
               {
                  "name":"SetLookDistOverride",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set maximum sight dist that overrides the aisetting file"
               },
               {
                  "name":"GetLookDistOverride",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get the overriden maximum sight dist. It will be -1 if it has not been overriden"
               },
               {
                  "name":"DisableLookDistOverride",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Disable the maximum sight dist override and instead use values form the aisetting file"
               },
               {
                  "name":"SetEngagementDistVsWeak",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set engagement distances vs weak enemy (min vs weak, max vs weak)"
               },
               {
                  "name":"SetEngagementDistVsStrong",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set engagement distances vs strong enemy (min vs strong, max vs strong)"
               },
               {
                  "name":"GetHearingSensitivity",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get hearing sensitivity (default 1.0)"
               },
               {
                  "name":"SetHearingSensitivity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set hearing sensitivity"
               },
               {
                  "name":"GetAllowMelee",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Check if npc is allowed to jump"
               },
               {
                  "name":"SetAllowMelee",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set if npc is allowed to jump"
               },
               {
                  "name":"GetNPCState",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Return the current NPC state"
               },
               {
                  "name":"GetPrevNPCState",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Return the previous NPC state"
               },
               {
                  "name":"GetSurprisedReactionReason",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Returns the reason the AI is reacting surprised. Compare to enum RSR_***"
               },
               {
                  "name":"SetMoveAnim",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the movement animation to use"
               },
               {
                  "name":"ClearMoveAnim",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clears script override move animation"
               },
               {
                  "name":"SetIdleAnim",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the idle animation to use"
               },
               {
                  "name":"ClearIdleAnim",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clears script override idle animation"
               },
               {
                  "name":"SetAttackAnim",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the attack animation to use"
               },
               {
                  "name":"ClearAttackAnim",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clears script override attack animation"
               },
               {
                  "name":"SetDeathActivity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Forces a certain death animation"
               },
               {
                  "name":"ClearDeathActivity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clears the script overridden death animation"
               },
               {
                  "name":"Anim_AdvanceCycleEveryFrame",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"For animations that must be synced with non AI. Must be parented to an entity"
               },
               {
                  "name":"DisableArrivalOnce",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Disable arrival animation once; arriving at goal or new path find will clear this"
               },
               {
                  "name":"TakeActiveWeapon",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Removes npc's current weapon (no drop)"
               },
               {
                  "name":"SetHullType",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the npc's hull type: HULL_HUMAN, HULL_SMALL, HULL_MEDIUM, HULL_FLYING_VEHICLE, HULL_TITAN"
               },
               {
                  "name":"SetEnemyLKP",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the npc's LKP of the enemy to a given position"
               },
               {
                  "name":"SetEnemy",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the npc's enemy"
               },
               {
                  "name":"LockEnemy",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Lock's npc's enemy to one entity until it is dead or cleared"
               },
               {
                  "name":"ClearEnemy",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the npc's enemy set by SetEnemy"
               },
               {
                  "name":"SetPotentialThreatPos",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets threat pos to take cover from"
               },
               {
                  "name":"ClearPotentialThreatPos",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clears threat pos to take cover from"
               },
               {
                  "name":"SetSecondaryEnemy",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets secondary enemy, use for special behaviors only"
               },
               {
                  "name":"ClearEnemyMemory",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clears memory about current enemy"
               },
               {
                  "name":"ClearAllEnemyMemory",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clears memory about all enemies"
               },
               {
                  "name":"RequestSpecialRangeAttack",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Request AI to do special attack when possible, resets to off after attack is done"
               },
               {
                  "name":"SetEnemyChangeCallback",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the callback function when to be used when the NPCs enemy changes",
                  "argTypes":"void functionref( entity self )",
                  "returnTypeString":"void"
               },
               {
                  "name":"GetPrevScheduleName",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Gets the previous NPC schedule"
               },
               {
                  "name":"GetCurScheduleName",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Gets the current NPC schedule"
               },
               {
                  "name":"SetDefaultSchedule",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the default schedule to use when there is nothing else to do"
               },
               {
                  "name":"SetEfficientMode",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether this npc should run in efficient mode (less frequent think)"
               },
               {
                  "name":"SetThinkEveryFrame",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether this npc should think every frame. Should only be used briefly to match up animation with non-npc entity"
               },
               {
                  "name":"DoRodeoAttack",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Do rodeo attack while attach on enemy"
               },
               {
                  "name":"SetRodeoAllowed",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set if this NPC can be rodeoed"
               },
               {
                  "name":"SetAimAssistForcePullPitchEnabled",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"bool forcePitchEnabled",
                  "returnTypeString":"void"
               },
               {
                  "name":"SetHologram",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Make this NPC a hologram. It will generate hologram impact effects when hit."
               },
               {
                  "name":"ClearHologram",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Make this NPC no longer a hologram."
               },
               {
                  "name":"Freeze",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Freeze NPC"
               },
               {
                  "name":"Unfreeze",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Unfreeze NPC"
               },
               {
                  "name":"IsFrozen",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the NPC is currently frozen"
               },
               {
                  "name":"DisableNPCFlag",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Turn off NPC_* flags"
               },
               {
                  "name":"DisableNPCMoveFlag",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Turn off NPCMF_* flags"
               },
               {
                  "name":"EnableNPCFlag",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Turn on NPC_* flags"
               },
               {
                  "name":"EnableNPCMoveFlag",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Turn on NPCMF_* flags"
               },
               {
                  "name":"SetNPCFlag",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set NPC_* flags"
               },
               {
                  "name":"SetNPCMoveFlag",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set NPCMF_* flags"
               },
               {
                  "name":"GetNPCFlag",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Get NPC_* flags"
               },
               {
                  "name":"GetNPCMoveFlag",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Get NPCMF_* flags"
               },
               {
                  "name":"SetCapabilityFlag",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set bits_CAP_* flags"
               },
               {
                  "name":"GetCapabilityFlag",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Get bits_CAP_* flags"
               },
               {
                  "name":"SetCanBeMeleeExecuted",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether this npc is a valid melee execute target"
               },
               {
                  "name":"SetCanBeGroundExecuted",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether this npc can be executed on ground"
               },
               {
                  "name":"IsNonCombatAI",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns if AI is a non-combat AI"
               },
               {
                  "name":"CanBeMeleeExecuted",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Sets whether this npc is a valid melee execute target"
               },
               {
                  "name":"CanBeGroundExecuted",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Sets whether this npc is a valid ground execute target"
               },
               {
                  "name":"SetValidHealthBarTarget",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether this npc can display a healthbar"
               },
               {
                  "name":"IsValidHealthBarTarget",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Sets whether this npc can display a healthbar"
               },
               {
                  "name":"SetNPCMoveSpeedScale",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets movement speed multiplier"
               },
               {
                  "name":"SetDangerousAreaRadius",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"IsInterruptable",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns if AI is in a state that can be interrupted"
               },
               {
                  "name":"IsInsideIndoorArea",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns if AI is indoors. Indoors is based off AI reaching path nodes inside trigger volume 'trigger_indoor_area'"
               },
               {
                  "name":"IsAtShootingCoverHint",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetDangerousAreaReactionTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"IsSecondaryAttack",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"If AI is using secondary attack"
               },
               {
                  "name":"AISetting_BaseHealth",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"AISetting_MaxFlyingSpeed",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"AISetting_GetDefaultWeapon",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"AISetting_GetGrenadeWeapon",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"AISetting_SummonDrone",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"AISetting_MeleeChargeSet",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"AISetting_LeechAnimSet",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"AISetting_LeechAnimTag",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"AISetting_LeechDataKnifeTag",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"AISetting_OnLeechFunc",
                  "retrunType":34,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"AISetting_ShootableByFriendlyPlayer",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetMeleeDamageMaxForTarget",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"Anim_ScriptedPlay",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Same as Anim_Play but block AI"
               },
               {
                  "name":"Anim_ScriptedPlayWithRefPoint",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Same as Anim_PlayWithRefPoint but block AI"
               },
               {
                  "name":"Anim_ScriptedPlayActivityByName",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"Anim_ScriptedPlayActivityByNameWithRefPoint",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"Anim_ScriptedJump",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Play jump animation to position"
               },
               {
                  "name":"Anim_ScriptedAddGestureSequence",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Play a gesture by sequence name"
               },
               {
                  "name":"Anim_ScriptedAddGestureActivity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Play a gesture by activity and set if it should auto kill on finishing"
               },
               {
                  "name":"Anim_ScriptedRemoveGestureActivity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Remove a gesture by activity"
               },
               {
                  "name":"Anim_ScriptedRemoveAllGestures",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Remove all gesture animations"
               },
               {
                  "name":"SetAllowSpecialJump",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set allowing special jumps"
               },
               {
                  "name":"GetNPCViewVector",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get current aim direction"
               },
               {
                  "name":"GetNPCViewForward",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get current aim direction"
               },
               {
                  "name":"GetNPCViewUp",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get current aim up"
               },
               {
                  "name":"GetNPCViewRight",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get current aim right"
               },
               {
                  "name":"GetMaxEnemyDist",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetMaxEnemyDistHeavyArmor",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetMaxTurretYaw",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"Dev_GetAISettingByKeyField",
                  "retrunType":35,
                  "a3arg":0,
                  "helpText":"Get AI setting key field."
               },
               {
                  "name":"Dev_GetAISettingAssetByKeyField",
                  "retrunType":40,
                  "a3arg":0,
                  "helpText":"Get AI setting key field. Assume return type is an asset",
                  "argTypes":"string",
                  "returnTypeString":"asset"
               },
               {
                  "name":"AssaultPointToAnim",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Uses assault behavior to reach a given location, but does not stop at the goal. When approaching the goal, the NPC will ramp its speed to match the beginning speed of the specified sequence.",
                  "argTypes":"vector point, vector angles, string animName, bool doArrival, float tolerance",
                  "returnTypeString":"void"
               },
               {
                  "name":"LastKnownPosition",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Returns the last known position(LKP) that an AI has for a given enemy",
                  "argTypes":"entity enemy",
                  "returnTypeString":"vector ornull"
               },
               {
                  "name":"LastSeenPosition",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Returns the last seen position(LSP) that an AI has for a given enemy",
                  "argTypes":"entity enemy",
                  "returnTypeString":"vector ornull"
               },
               {
                  "name":"SquadLastKnownPosition",
                  "retrunType":3,
                  "a3arg":1,
                  "helpText":"Gets the NPC's squad's last known position of their enemy",
                  "argTypes":"",
                  "returnTypeString":"vector",
                  "shortArgTypes":"."
               }
            ]
         },
         {
            "className":"CAI_Hint",
            "parent":"CBaseEntity",
            "functions":[
               {
                  "name":"GetHintType",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Gets the type of the hint, such as \"window\" or \"door\""
               },
               {
                  "name":"GetHintGenericType",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Gets the Generic Hint for \"generic\" hint types"
               },
               {
                  "name":"SetHintDisabled",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether or not any AI can use this hint"
               }
            ]
         },
         {
            "className":"CAI_SkitNode",
            "parent":"CBaseEntity",
            "functions":[
               {
                  "name":"SetReserved",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"IsReserved",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               }
            ]
         },
         {
            "className":"CAI_TrackPather",
            "parent":"CAI_BaseNPC",
            "functions":[
               {
                  "name":"FlyPath",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Fly forward along the path starting with the specified node."
               },
               {
                  "name":"FlyPathBackward",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Fly along the path nodes in reverse order, starting with the specified node."
               },
               {
                  "name":"FlyToNodeViaPath",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Fly to a node, flying along the path, starting with the node closest to the vehicle's current position."
               },
               {
                  "name":"FlyToNodeUseNodeSpeed",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Fly straight to a node, don't slow to a stop, but maintain the node speed all the way to the node."
               },
               {
                  "name":"FlyToPointToAnim",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Path to track node, but does not stop at the goal. When approaching the goal, the entity will ramp its speed to match the beginning speed of the specified animation sequence."
               },
               {
                  "name":"FlyToPoint",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Fly to a position in space."
               }
            ]
         },
         {
            "className":"CBaseAnimating",
            "parent":"CBaseEntity",
            "functions":[
               {
                  "name":"LookupAttachment",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get the named attachment id"
               },
               {
                  "name":"SetDoomed",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set this entity to use doomed animations"
               },
               {
                  "name":"ClearDoomed",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set this entity to not use doomed animations"
               },
               {
                  "name":"GetAttachmentOrigin",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get the attachement id's origin vector"
               },
               {
                  "name":"GetAttachmentAngles",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get the attachement id's angles as a p,y,r vector"
               },
               {
                  "name":"GetAttachmentForward",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get the attachement id's forward vector"
               },
               {
                  "name":"LookupSequence",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get integer index for sequence string"
               },
               {
                  "name":"GetSequenceDuration",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get animation sequence duration in seconds"
               },
               {
                  "name":"GetAnimDeltas",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get animation position deltas"
               },
               {
                  "name":"GetAnimEndPos",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get where animation will end up if played from current position and angles"
               },
               {
                  "name":"SetBodygroup",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets a bodygroup"
               },
               {
                  "name":"IsSequenceFinished",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Ask whether the main sequence is done playing"
               },
               {
                  "name":"SetFullBodygroup",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the entire bodygroup state."
               },
               {
                  "name":"GetFullBodygroup",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets the entire bodygroup state."
               },
               {
                  "name":"FindBodyGroup",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Given ( groupName ), find a bodygroup index by name."
               },
               {
                  "name":"GetBodyGroupState",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Given ( groupIndex ), gets the currently active model index of a bodygroup."
               },
               {
                  "name":"GetBodyGroupModelCount",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Given ( groupIndex ), gets the number of models in a bodygroup."
               },
               {
                  "name":"SetDoFaceAnimations",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set whether this model should do face animations or not"
               },
               {
                  "name":"LookupPoseParameterIndex",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get the specified pose parameter index by name. Returns -1 if not found."
               },
               {
                  "name":"SetPoseParameter",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the specified pose parameter to the specified value"
               },
               {
                  "name":"SetPoseParameterOverTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the specified pose parameter to the specified value over the given duration"
               },
               {
                  "name":"GetPoseParameter",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get the specified pose parameter value"
               },
               {
                  "name":"SetPoseParametersSameAs",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set pose parameters to be the same as the given entity"
               },
               {
                  "name":"SequenceTransitionFromEntity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Initialize the sequence transitioner to blend from the given entity"
               },
               {
                  "name":"Anim_HasSequence",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns bool whether the entity's model has the specified sequence."
               },
               {
                  "name":"Anim_HasActivity",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns bool whether the entity's model has the specified activity."
               },
               {
                  "name":"Anim_GetActivity",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Returns enum value for the current activity e.g. ACT_***"
               },
               {
                  "name":"Anim_Play",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Play an anim without trying to set origin/angles."
               },
               {
                  "name":"Anim_NonScriptedPlay",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Just sets the current sequence, without the entity entering a scripted anim mode."
               },
               {
                  "name":"Anim_PlayWithRefPoint",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Plays an animation with a specific ref point."
               },
               {
                  "name":"Anim_DisableAnimDelta",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Disables movement due to animation delta."
               },
               {
                  "name":"Anim_DisableUpdatePosition",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Disables moving the entity around via the animation. In other words, they will just animate in place."
               },
               {
                  "name":"Anim_GetRefLocalOffset",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Gets position local offset from ref point for an animation."
               },
               {
                  "name":"Anim_EnablePlanting",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Enables collision and causes ref to move in Z to keep entity on ground."
               },
               {
                  "name":"Anim_EnableUseAnimatedRefAttachmentInsteadOfRootMotion",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"By default the REF attachment is checked only the first frame to get the initial offset. Then root motion is added onto that offset. Call this function to position the entity using REF every frame instead of using root motion."
               },
               {
                  "name":"Anim_SetInitialTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the initial time (in seconds) that the given animation will begin playing at"
               },
               {
                  "name":"Anim_SetStartTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Immediately setup up the animation like as if it had actually already started at the given start time"
               },
               {
                  "name":"Anim_IgnoreParentRotation",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Ignore parent rotation when playing relative to a parent attachment. Turns off automatically on Anim_Stop"
               },
               {
                  "name":"Anim_IsActive",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if currently playing an animation from Anim_Play*()"
               },
               {
                  "name":"Anim_Stop",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Stops the current animation started by Anim_Play*() after signaling \"ScriptAnimStop\""
               },
               {
                  "name":"Code_Anim_Stop",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Stops the current animation started by Anim_Play*()"
               },
               {
                  "name":"Anim_DisableSequenceTransition",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Snaps into the animation straight away rather than blending it in from its previous sequence."
               },
               {
                  "name":"GetSkin",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get skin"
               },
               {
                  "name":"SetSkin",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the skin"
               },
               {
                  "name":"GetCamo",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get camo index.",
                  "argTypes":"",
                  "returnTypeString":"int"
               },
               {
                  "name":"SetCamo",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set camo index. -1 is default.",
                  "argTypes":"int",
                  "returnTypeString":"void"
               },
               {
                  "name":"SetDecal",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the decalIndex.",
                  "argTypes":"int decalIndex",
                  "returnTypeString":"void"
               },
               {
                  "name":"GetDecal",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets the decalIndex.",
                  "argTypes":"",
                  "returnTypeString":"int"
               },
               {
                  "name":"BecomeRagdoll",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Turns the entity into a client-side ragdoll; returns true for success"
               },
               {
                  "name":"SetRagdollImpactFX",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"When this entity becomes a client ragdoll it will do impact fx according to the passed ImpactTable index (PrecacheImpactEffectTable)"
               },
               {
                  "name":"SetContinueAnimatingAfterRagdoll",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Entity will continue animating on the server after it becomes a ragdoll on the client. This helps the ragdoll keep momentum when the transition occurs."
               },
               {
                  "name":"Gib",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Gib this entity",
                  "argTypes":"vector impulseforce",
                  "returnTypeString":"void"
               },
               {
                  "name":"Dissolve",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Dissolve this entity"
               },
               {
                  "name":"DissolveNonLethal",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Dissolve this entity without killing it."
               },
               {
                  "name":"DissolveStop",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"If this.IsDissolving(), stop the effect."
               },
               {
                  "name":"IsDissolving",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"True if entity is dissolving."
               },
               {
                  "name":"DisableFastPathRendering",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Disable fast-path rendering for this entity. Don't use this unless you really need to."
               },
               {
                  "name":"GetAnimEventCycleFrac",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns the cycle for the given event in the given animation sequence. Returns -1 on any errors."
               },
               {
                  "name":"GetScriptedAnimEventCycleFrac",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns the cycle for the given AE_SV/CL_VSCRIPT_CALLBACK event, with the given option name, in the given animation sequence. Returns -1 on any errors."
               },
               {
                  "name":"LerpSkyScale",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the sky scale for this entity.  Pass in target skyscale and time to lerp to that value."
               },
               {
                  "name":"SetRecordedAnimationPlaybackRate",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the playback rate of the recorded animation started with PlayRecordedAnimation()."
               },
               {
                  "name":"GetCycle",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get how far through the animation is."
               },
               {
                  "name":"SetPlaybackRate",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the play back rate"
               },
               {
                  "name":"Anim_GetStartForRefPoint",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Gets the starting position for an animation played with a specific ref point.",
                  "argTypes":"string animName, vector origin, vector angles",
                  "returnTypeString":"AnimRefPoint"
               },
               {
                  "name":"Anim_GetStartForRefEntity",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Gets the starting position for an animation played with a parent entity and attachment as a ref point.",
                  "argTypes":"string animName, entity ent, string attachment",
                  "returnTypeString":"AnimRefPoint"
               },
               {
                  "name":"Anim_GetStartForRefPoint_Old",
                  "retrunType":38,
                  "a3arg":1,
                  "helpText":"Gets the starting position for an animation played with a specific ref point.",
                  "argTypes":"animName, referencePosition, referenceAngles",
                  "returnTypeString":"table",
                  "shortArgTypes":".svv"
               },
               {
                  "name":"Anim_GetStartForRefEntity_Old",
                  "retrunType":38,
                  "a3arg":1,
                  "helpText":"Gets the starting position for an animation played with a parent entity and attachment as a ref point.",
                  "argTypes":"animName, referenceEntity, referenceAttachment",
                  "returnTypeString":"table",
                  "shortArgTypes":".ses"
               },
               {
                  "name":"Anim_GetAttachmentAtTime",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Returns the position and angle of an attachment at the given time in the given animation",
                  "argTypes":"string animName, string attachName, float time",
                  "returnTypeString":"Attachment"
               },
               {
                  "name":"PlayRecordedAnimation",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Plays an animation recorded via StartRecordingAnimation(). If ref entity is specified, origin and angles should be in its local space.",
                  "argTypes":"var recordedAnim, vector origin, vector angles, float blendtime = 0, entity ref = null",
                  "returnTypeString":"void"
               }
            ]
         },
         {
            "className":"CBaseCombatCharacter",
            "parent":"CBaseAnimating",
            "functions":[
               {
                  "name":"GetActiveWeapon",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Returns the active weapon."
               },
               {
                  "name":"SetActiveWeaponByName",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the active weapon."
               },
               {
                  "name":"SetActiveWeaponBySlot",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the active weapon."
               },
               {
                  "name":"GetAntiTitanWeapon",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Returns the anti titan weapon."
               },
               {
                  "name":"GetSidearmWeapon",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Returns the active weapon."
               },
               {
                  "name":"GetLatestPrimaryWeapon",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Returns the last primary weapon used"
               },
               {
                  "name":"GetSelectedWeapon",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Returns the selected weapon."
               },
               {
                  "name":"IsWeaponDisabled",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the weapon is disabled"
               },
               {
                  "name":"IsUsingOffhandWeapon",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if player is using their offhand weapon"
               },
               {
                  "name":"OffsetPositionFromView",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Returns position that has been offset relative to the view"
               },
               {
                  "name":"OffsetFromViewAngles",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Returns angles that has been offset relative to the view"
               },
               {
                  "name":"RefillAllAmmo",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Refills ammo for all equipped weapons."
               },
               {
                  "name":"GetActiveWeaponPrimaryAmmoLoaded",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get the amount of currently loaded ammo in the active weapon."
               },
               {
                  "name":"SetActiveWeaponPrimaryAmmoTotal",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the total amount of ammo for the active weapon that this character has."
               },
               {
                  "name":"SetActiveWeaponPrimaryAmmoLoaded",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the amount of currently loaded ammo in the active weapon."
               },
               {
                  "name":"GetWeaponAmmoStockpile",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get the total amount of ammo for the specified weapon that this character has."
               },
               {
                  "name":"GetWeaponAmmoLoaded",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get the amount of currently loaded ammo in the specified weapon."
               },
               {
                  "name":"GetWeaponAmmoMaxLoaded",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get the max amount loaded ammo in the specified weapon."
               },
               {
                  "name":"ReplaceActiveWeapon",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Take the current weapon and instantly replace with the new weapon.  This will skip any holster and draw animations."
               },
               {
                  "name":"GiveExistingOffhandWeapon",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Give an existing weapon to the specified slot"
               },
               {
                  "name":"TakeOffhandWeapon",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Take the offhand weapon in the specified slot."
               },
               {
                  "name":"TakeOffhandWeapon_NoDelete",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Take the offhand weapon in the specified slot and return the weapon entity"
               },
               {
                  "name":"GetOffhandWeapon",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Get the offhand weapon in the specified slot."
               },
               {
                  "name":"ClearOffhand",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clear offhand weapons"
               },
               {
                  "name":"TakeWeapon",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Take the weapon by name."
               },
               {
                  "name":"TakeWeaponNow",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Take the weapon by name, skipping any put-the-weapon-away formalities."
               },
               {
                  "name":"TakeWeapon_NoDelete",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Take the weapon by name and returns weapon entity without deleting it."
               },
               {
                  "name":"SetInventoryChangedCallbackEnabled",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether this entity will generate a callback to CodeCallback_OnInventoryChanged when its inventory changes"
               },
               {
                  "name":"GetPlayerOrNPCViewVector",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Gets the forward view vector of a player or NPC. Prefer GetViewVector or GetNPCViewVector when you know whether you're working with a player or NPC."
               },
               {
                  "name":"GetPlayerOrNPCViewForward",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Gets the forward view vector of a player or NPC. Prefer GetViewForward or GetNPCViewForward when you know whether you're working with a player or NPC."
               },
               {
                  "name":"GetPlayerOrNPCViewUp",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Gets the up view vector of a player or NPC. Prefer GetViewUp or GetNPCViewUp when you know whether you're working with a player or NPC."
               },
               {
                  "name":"GetPlayerOrNPCViewRight",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Gets the right view vector of a player or NPC. Prefer GetViewright or GetNPCViewRight when you know whether you're working with a player or NPC."
               },
               {
                  "name":"SetOutOfBoundsDeadTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set time at which this player or NPC titan will die from being out of bounds (assuming it doesn't move into bounds)"
               },
               {
                  "name":"GetOutOfBoundsDeadTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get time at which this player or NPC titan will die from being out of bounds (assuming it doesn't move into bounds)"
               },
               {
                  "name":"GetAttackSpreadAngle",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns the player or NPC's attack spread in degrees from one side of the cone to the other."
               },
               {
                  "name":"GiveExistingWeapon",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Give an existing weapon entity to player or AI"
               },
               {
                  "name":"GetMeleeWeapon",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"ResetHealthChangeRate",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Reset health change rate for AI logic"
               },
               {
                  "name":"SetHealthPerSegment",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set amount of health per segment"
               },
               {
                  "name":"GetHealthPerSegment",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get amount of health per segment"
               },
               {
                  "name":"SetTitanSoul",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the titanSoul of this entity"
               },
               {
                  "name":"GetTitanSoul",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets the titanSoul for this entity"
               },
               {
                  "name":"GetSettingsHeadshotFX",
                  "retrunType":40,
                  "a3arg":0,
                  "helpText":"Get headshot fx from settings"
               },
               {
                  "name":"SetCloakReactEndTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"IsPhaseShiftedOrPending",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"PhaseShiftBegin",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"EnablePhaseShiftFlags",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"DisablePhaseShiftFlags",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"PhaseShiftCancel",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"PhaseShiftTimeRemaining",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Time left in phase shift."
               },
               {
                  "name":"PhaseShiftTimePassed",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetEntityAtPhaseShiftExitPosition",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets the entity you are about to phase shift into"
               },
               {
                  "name":"ContextAction_IsActive",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether in the middle of any context action (like melee or leeching)"
               },
               {
                  "name":"ContextAction_IsBusy",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether in the middle of a busy context action"
               },
               {
                  "name":"ContextAction_IsLeeching",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether in the middle of a leeching context action"
               },
               {
                  "name":"ContextAction_IsMeleeExecution",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the entity is in the middle of a melee execution context action"
               },
               {
                  "name":"ContextAction_IsMeleeExecutionAttacker",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the entity is an attacker in the middle of a melee execution context action"
               },
               {
                  "name":"ContextAction_IsMeleeExecutionTarget",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the entity is a target in the middle of a melee execution context action"
               },
               {
                  "name":"ContextAction_IsRequisitionBattery",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether entity is in the middle of a battery requisition context action"
               },
               {
                  "name":"ContextAction_IsRodeo",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether the player is in a rodeo context action"
               },
               {
                  "name":"ContextAction_IsInVehicle",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether the player is in a vehicle context action"
               },
               {
                  "name":"ContextAction_IsZipline",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether the player is in a zipline context action"
               },
               {
                  "name":"ContextAction_IsFastball",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether the player is in a fastball context action"
               },
               {
                  "name":"ContextAction_SetBusy",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Marks the entity as in the middle of a busy context action (so other things don't interrupt them)"
               },
               {
                  "name":"ContextAction_ClearBusy",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Marks the entity as no longer doing some kind of context action"
               },
               {
                  "name":"ContextAction_SetInVehicle",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Marks the entity as inside a vehicle"
               },
               {
                  "name":"ContextAction_ClearInVehicle",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Marks the entity as no longer inside a vehicle"
               },
               {
                  "name":"ContextAction_SetFastball",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Marks that the entity is executing a fastball"
               },
               {
                  "name":"ContextAction_ClearFastball",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Marks that the entity as no longer executing a fastball"
               },
               {
                  "name":"PlayerMelee_ExecutionStartAttacker",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Let script tell code a melee attack has started (for the attacker)"
               },
               {
                  "name":"PlayerMelee_ExecutionStartTarget",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Let script tell code a melee attack has started (for the target/victim)"
               },
               {
                  "name":"PlayerMelee_ExecutionEndAttacker",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Let script tell code a melee attack has ended (for the attacker)"
               },
               {
                  "name":"PlayerMelee_ExecutionEndTarget",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Let script tell code a melee attack has ended (for the target/victim)"
               },
               {
                  "name":"Event_LeechStart",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Let script tell code a leech has started"
               },
               {
                  "name":"Event_LeechEnd",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Let script tell code a leech has ended"
               },
               {
                  "name":"ContextAction_RequisitionBatteryStart",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Let script tell code battery requisitioning has started"
               },
               {
                  "name":"ContextAction_RequisitionBatteryEnd",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Let script tell code battery requisitioning has ended"
               },
               {
                  "name":"PrintInventory",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Prints the contents of the weapon inventory to the console"
               },
               {
                  "name":"SetNPCPriorityOverride",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets NPC enemy selection priority override. Refer to player/AI settings files for values"
               },
               {
                  "name":"SetNPCPriorityOverride_NoThreat",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"AI will never naturally choose this entity as their enemy"
               },
               {
                  "name":"ClearNPCPriorityOverride",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clears NPC enemy selection priority override"
               },
               {
                  "name":"DropWeapon",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"drops a weapon using the default class behavior"
               },
               {
                  "name":"SetHudInfoVisibilityTestAlwaysPasses",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"bool alwaysPasses",
                  "returnTypeString":"void"
               },
               {
                  "name":"GetFirstRodeoRider",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Returns the first rodeo rider found or null if there are none."
               },
               {
                  "name":"GetRodeoRider",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Returns rodeo rider (if there is one) at the given slot."
               },
               {
                  "name":"SetRodeoRider",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the rodeo rider at the given slot."
               },
               {
                  "name":"GetNumRodeoSlots",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Returns number of rodeo slots available on this entity."
               },
               {
                  "name":"SetNumRodeoSlots",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the maximum number of rodeo slots available on this entity."
               },
               {
                  "name":"SetTargetInfoIcon",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Exposed to client targetinfo RUIs as 'image targetIcon' arg.",
                  "argTypes":"asset newIcon",
                  "returnTypeString":"void"
               },
               {
                  "name":"AddTether",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Adds a tether to this player or AI. Returns an integer ID"
               },
               {
                  "name":"RemoveTether",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Removes a tether from this player or AI. ID should be return value of AddPlayerTether."
               },
               {
                  "name":"IsValidTetherID",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Checks if the tether still exists. ID should be return value of AddPlayerTether."
               },
               {
                  "name":"TransferTethersToEntity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Transfers all tethers to another entity. Destroys all tethers on the destination entity, if any."
               },
               {
                  "name":"GetLastFiredTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns the last time the entity fired a bullet weapon."
               },
               {
                  "name":"AddSharedEnergy",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"TakeSharedEnergy",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"CanUseSharedEnergy",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetSharedEnergyCount",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetSharedEnergyTotal",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetSharedEnergyTotal",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetSharedEnergyRegenRate",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetSharedEnergyRegenRate",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetSharedEnergyRegenDelay",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetSharedEnergyRegenDelay",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetMainWeapons",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Get array of the main weapons.",
                  "argTypes":"",
                  "returnTypeString":"array< entity >"
               },
               {
                  "name":"GiveOffhandWeapon",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Give the offhand weapon in the specified slot, and optionally apply active mods.",
                  "argTypes":"string weaponName, int slotIndex, array< string > mods = null",
                  "returnTypeString":"void"
               },
               {
                  "name":"GetOffhandWeapons",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Get array of the offhand weapons.",
                  "argTypes":"",
                  "returnTypeString":"array< entity >"
               },
               {
                  "name":"GiveWeapon",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Create a weapon of the given classname, and optionally apply active mods.",
                  "argTypes":"string weaponname, array< string > mods = null",
                  "returnTypeString":"entity"
               }
            ]
         },
         {
            "className":"CBaseCombatWeapon",
            "parent":"CBaseAnimating",
            "functions":[
               {
                  "name":"GetWeaponPrintName",
                  "retrunType":32,
                  "a3arg":0,
                  "helpText":"Returns the display name of the weapon"
               },
               {
                  "name":"GetWeaponDescription",
                  "retrunType":32,
                  "a3arg":0,
                  "helpText":"Returns the description of the weapon"
               },
               {
                  "name":"SetDroppedModel",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"asset",
                  "returnTypeString":"void"
               },
               {
                  "name":"SetWeaponConstrained",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Constrains a non-carried weapon in place. Similar to parenting a non-carried weapon."
               },
               {
                  "name":"LookupWorldModelAttachment",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Returns index for the given attachment on the weapon's world model."
               },
               {
                  "name":"LookupViewModelAttachment",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Returns index for the given attachment on the weapon's view model."
               }
            ]
         },
         {
            "className":"CBaseEntity",
            "functions":[
               {
                  "name":"GetHealth",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetMaxHealth",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetHealth",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetMaxHealth",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"TakeDamage",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"( int damage, attacker, inflictor, additionalParams ) - Deals damage to the entity. Additional params table can contain: weapon, origin, force, forceKill, scriptType, damageSourceId, attackerClass, meleeAttack, meleeExecution, hitbox"
               },
               {
                  "name":"IsEntAlive",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Is this entity alive?"
               },
               {
                  "name":"GetArmorType",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get the entity's armor type"
               },
               {
                  "name":"SetModel",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the file path of the model",
                  "argTypes":"asset",
                  "returnTypeString":"void"
               },
               {
                  "name":"SetUsePrompts",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the entity's hold use and press use prompts."
               },
               {
                  "name":"GetNoTarget",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetNoTarget",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetNoTargetSmartAmmo",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Get whether the smart ammo system can see this target"
               },
               {
                  "name":"SetNoTargetSmartAmmo",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set whether the smart ammo system can see this target"
               },
               {
                  "name":"IsDraw",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"IsSolid",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if solid entity"
               },
               {
                  "name":"GetModelName",
                  "retrunType":40,
                  "a3arg":0,
                  "helpText":"Returns the name of the model",
                  "argTypes":"",
                  "returnTypeString":"asset"
               },
               {
                  "name":"GetBodyGroupNameFromHitboxId",
                  "retrunType":32,
                  "a3arg":0,
                  "helpText":"Returns Body group name from the hitboxid."
               },
               {
                  "name":"GetClassName",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetTargetName",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetScriptName",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Returns the script_name for this entity"
               },
               {
                  "name":"SetScriptName",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the script_name for this entity"
               },
               {
                  "name":"GetInstanceName",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Returns the instance_name for this entity"
               },
               {
                  "name":"GetPreTemplateName",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Get the entity name stripped of template unique decoration"
               },
               {
                  "name":"GetOrigin",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetLocalOrigin",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetOrigin",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the position of the entity"
               },
               {
                  "name":"SetAbsOrigin",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the position of the entity relative to the world, regardless of parent orientation"
               },
               {
                  "name":"SetAbsOriginSmooth",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the position of the entity relative to the world, regardless of parent orientation. Does it by smoothly interpolating the entity to the new location."
               },
               {
                  "name":"SnapToAbsOrigin",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Like SetAbsOrigin(), except it will not do any blending/lerping to the new location"
               },
               {
                  "name":"SetLocalOrigin",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the position of the entity relative to its parent"
               },
               {
                  "name":"GetForwardVector",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get the forward vector of the entity"
               },
               {
                  "name":"GetRightVector",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get the right vector of the entity"
               },
               {
                  "name":"GetUpVector",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get the up vector of the entity"
               },
               {
                  "name":"SetForwardVector",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the orientation of the entity to have this forward vector"
               },
               {
                  "name":"SetAbsForwardVector",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the orientation of the entity to have this forward vector relative to the world, regardless of parent orientation"
               },
               {
                  "name":"SetLocalForwardVector",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the orientation of the entity to have this forward vector relative to its parent"
               },
               {
                  "name":"SetForwardVectorWithUp",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the orientation of the entity to have this forward vector, based on the given up vector"
               },
               {
                  "name":"SetLocalForwardVectorWithUp",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the orientation of the entity to have this forward vector, based on the given up vector, relative to its parent"
               },
               {
                  "name":"GetVelocity",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetSmoothedVelocity",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get velocity that is weighted averaged with previous velocity"
               },
               {
                  "name":"GetLocalVelocity",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetVelocity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetAngularVelocity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the local angular velocity - takes float pitch,yaw,roll velocities"
               },
               {
                  "name":"GetAngularVelocity",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get the local angular velocity - returns a vector of pitch,yaw,roll"
               },
               {
                  "name":"GetCenter",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get vector to center of object - absolute coords"
               },
               {
                  "name":"EyePosition",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get vector to eye position - absolute coords"
               },
               {
                  "name":"ShipHack_PositionBetweenEyes",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"The the position between the entity's eyes."
               },
               {
                  "name":"SetAngles",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set entity pitch, yaw, roll"
               },
               {
                  "name":"SetAbsAngles",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set entity pitch, yaw, roll relative to world, regardless of parent orientation"
               },
               {
                  "name":"SetAbsAnglesSmooth",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set entity pitch, yaw, roll relative to world, regardless of parent orientation. Will smoothly interpolate to the new angles."
               },
               {
                  "name":"SetLocalAngles",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set entity pitch, yaw, roll relative to parent"
               },
               {
                  "name":"GetAngles",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get entity pitch, yaw, roll as a vector"
               },
               {
                  "name":"GetLocalAngles",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get entity pitch, yaw, roll as a vector relative to parent"
               },
               {
                  "name":"EyeAngles",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get eye angles"
               },
               {
                  "name":"SetSize",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetBoundingMins",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get a vector containing min bounds, centered on object"
               },
               {
                  "name":"GetBoundingMaxs",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get a vector containing max bounds, centered on object"
               },
               {
                  "name":"SetBlocksLOS",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether this entity will block AI LOS"
               },
               {
                  "name":"GetBlocksLOS",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Gets whether this entity will block AI LOS"
               },
               {
                  "name":"SetBlocksRadiusDamage",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether this entity will block radius damage. An entity may block radius damage for other reasons, but setting this flag ensures that it will."
               },
               {
                  "name":"GetBlocksRadiusDamage",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Gets whether this flag is set."
               },
               {
                  "name":"Destroy",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetTeam",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"int"
               },
               {
                  "name":"Code_SetTeam",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetParent",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"If in hierarchy, retrieves the entity's parent"
               },
               {
                  "name":"GetParentAttachment",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Gives the name of the attachment that we are parented to"
               },
               {
                  "name":"GetParentAttachmentIndex",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gives the index of the attachment that we are parented to"
               },
               {
                  "name":"GetParentHitbox",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gives the index of the hitbox that we are parented to"
               },
               {
                  "name":"GetRootMoveParent",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"If in hierarchy, walks up the hierarchy to find the root parent"
               },
               {
                  "name":"FirstMoveChild",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"NextMovePeer",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetValueForModelKey",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"type safe equivalent of ent.kv.model = model",
                  "argTypes":"asset",
                  "returnTypeString":"void"
               },
               {
                  "name":"GetValueForModelKey",
                  "retrunType":40,
                  "a3arg":0,
                  "helpText":"type safe equivalent of model = ent.kv.model",
                  "argTypes":"",
                  "returnTypeString":"asset"
               },
               {
                  "name":"SetValueForTextureKey",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"type safe equivalent of ent.kv.texture = model",
                  "argTypes":"asset",
                  "returnTypeString":"void"
               },
               {
                  "name":"GetValueForTextureKey",
                  "retrunType":40,
                  "a3arg":0,
                  "helpText":"type safe equivalent of model = ent.kv.texture",
                  "argTypes":"",
                  "returnTypeString":"asset"
               },
               {
                  "name":"SetValueForEffectNameKey",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"type safe equivalent of ent.kv.effect_name = effect_name",
                  "argTypes":"asset",
                  "returnTypeString":"void"
               },
               {
                  "name":"GetValueForEffectNameKey",
                  "retrunType":40,
                  "a3arg":0,
                  "helpText":"type safe equivalent of effect_name = ent.kv.effect_name",
                  "argTypes":"",
                  "returnTypeString":"asset"
               },
               {
                  "name":"SetValueForKey",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"@"
               },
               {
                  "name":"GetValueForKey",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Get a string representation of the specified key's value."
               },
               {
                  "name":"GetTarget_Deprecated",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Shortcut for GetValueForKey( \"target\" )"
               },
               {
                  "name":"HasKey",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the specified key exists on the entity."
               },
               {
                  "name":"GetNextKey",
                  "retrunType":35,
                  "a3arg":0,
                  "helpText":"Takes a key in the entity's key value list and returns the next key. Useful for iterating through key values."
               },
               {
                  "name":"ValidateScriptScope",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Ensure that an entity's script scope has been created"
               },
               {
                  "name":"GetScriptScope",
                  "retrunType":34,
                  "a3arg":0,
                  "helpText":"Retrieve the script-side data associated with an entity"
               },
               {
                  "name":"scope",
                  "retrunType":34,
                  "a3arg":0,
                  "helpText":"Retrieve the script-side data associated with an entity"
               },
               {
                  "name":"GetScriptId",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Retrieve the unique identifier used to refer to the entity within the scripting system"
               },
               {
                  "name":"GetOwner",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets this entity's owner"
               },
               {
                  "name":"SetOwner",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets this entity's owner"
               },
               {
                  "name":"GetEntIndex",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get entity index of networked entity.  Script error if the entity doesn't have an index"
               },
               {
                  "name":"entindex",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"AddToSpatialPartition",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Add entity to spatial partition data"
               },
               {
                  "name":"RemoveFromSpatialPartition",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Remove entity from spatial partition data"
               },
               {
                  "name":"MarkAsNonMovingAttachment",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Marks this entity as an attachment that never moves away from the attachment point"
               },
               {
                  "name":"DontIncludeParentBbox",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Don't create a giant bounding box even though we are attached to an attachment"
               },
               {
                  "name":"UseHitBoxForTraceCheck",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Hitbox overrides vphysics for trace checks on this entity"
               },
               {
                  "name":"SetBoneMerge",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Treat entity as part of parent when calculating animations"
               },
               {
                  "name":"ClearBoneMerge",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clear bone merge and unlink from parent"
               },
               {
                  "name":"StopPhysics",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Stops physics for an entity"
               },
               {
                  "name":"SetPhysics",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the move type."
               },
               {
                  "name":"SetToSameParentAs",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets this entity's move parent to be the same as the given entity's."
               },
               {
                  "name":"DumpParentingState",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Prints information about the entity's parenting."
               },
               {
                  "name":"ClearParent",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clears an entity's parenting."
               },
               {
                  "name":"ClearHitboxAttachedChildren",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clears all children attached to hitboxes"
               },
               {
                  "name":"TransferChildrenTo",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Transfers all children (entities parented to this entity) to another parent."
               },
               {
                  "name":"IsChild",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if given entity is already a child of this entity"
               },
               {
                  "name":"GetIndexForEntity",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get an index that can be used for kill replay."
               },
               {
                  "name":"GetPhysicsSolidMask",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets the solid mask for this entity"
               },
               {
                  "name":"NotSolid",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the entity to be not solid."
               },
               {
                  "name":"Solid",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets an entity to solid (usually something that had NotSolid called on it."
               },
               {
                  "name":"SetBoundingBox",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Specify the bounding box for this entity, also switch collision over to BBOX (may stop physics movement, etc.)"
               },
               {
                  "name":"SetTouchTriggers",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set whether this entity will touch triggers"
               },
               {
                  "name":"SetTitle",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets an entity's title. This may be displayed on client HUDs."
               },
               {
                  "name":"GetTitle",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Gets an entity's title. This may be displayed on client HUDs."
               },
               {
                  "name":"IsPlayer",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if entity is a player."
               },
               {
                  "name":"IsNPC",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if entity is an NPC."
               },
               {
                  "name":"IsWorld",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if entity is the world entity."
               },
               {
                  "name":"IsFuncBrush",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if entity is a func brush."
               },
               {
                  "name":"IsProjectile",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if this is a projectile."
               },
               {
                  "name":"IsTriggerBox",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if this is a trigger box."
               },
               {
                  "name":"SetNextThinkNow",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the entity's next think time to as soon as possible. Calling this on multiple entities at the same time will synchronize their think times."
               },
               {
                  "name":"GetEncodedEHandle",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get an encoded handle to this ent, suitable for sending to client script."
               },
               {
                  "name":"HasOutput",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if an entity has an output of the given name."
               },
               {
                  "name":"SetGroundEntity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"sets the ground entity on a given entity"
               },
               {
                  "name":"EnableAttackableByAI",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Make AI treat this as a threat. Compare priority with values set in player and AI settings files"
               },
               {
                  "name":"DisableAttackableByAI",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clear this entity from being a threat to AI"
               },
               {
                  "name":"SetAIObstacle",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Make AI try to path around this entity or not"
               },
               {
                  "name":"GetWorldSpaceCenter",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get the centerpoint of an entity."
               },
               {
                  "name":"GetBossPlayer",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets the boss player for an entity"
               },
               {
                  "name":"SetBossPlayer",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Mark this entity as belonging to the specified player"
               },
               {
                  "name":"ClearBossPlayer",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clear this entity of any player ownership."
               },
               {
                  "name":"SetUsable",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Marks this entity as usable by any player."
               },
               {
                  "name":"GetUsableValue",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Returns a integer representing of the usable state, so that you can return to this state later."
               },
               {
                  "name":"SetUsableValue",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the usable state by integer, which was earlier obtained from GetUsableValue()."
               },
               {
                  "name":"AddUsableValue",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Adds a usable type to the entity. Should not be called often as need to recompute partition mask everytime a new value is added"
               },
               {
                  "name":"RemoveUsableValue",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Removes a usable type from the entity. Should not be called often as need to recompute partition mask evertime a new value is removed"
               },
               {
                  "name":"SetUsableByGroup",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Marks this entity as usable by specific players."
               },
               {
                  "name":"SetUsablePriority",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the priority of a usable ent"
               },
               {
                  "name":"SetUsableRadius",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets extra area for use ent"
               },
               {
                  "name":"SetUsableFOV",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set fov for this ent to use"
               },
               {
                  "name":"SetUsableFOVByDegrees",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Converts to cosine degrees"
               },
               {
                  "name":"SetUsePromptSize",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"UnsetUsable",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Undoes the effects of SetUsable()."
               },
               {
                  "name":"LagCompensate",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Make entity do lag compensation"
               },
               {
                  "name":"SetFadeDistance",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the distance that this entity starts fading."
               },
               {
                  "name":"RenderWithViewModels",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Controls whether the given entity is drawn as a viewmodel or not"
               },
               {
                  "name":"IsRenderingWithViewModels",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the entity is rendering in the view model pass"
               },
               {
                  "name":"SetTakeDamageType",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the take damage type, DAMAGE_NO, DAMAGE_YES, DAMAGE_EVENTS_ONLY"
               },
               {
                  "name":"IsMarkedForDeletion",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"True if this entity is being removed (deleted or killed)."
               },
               {
                  "name":"SetDoDestroyCallback",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"If true, this entity will be do a callback to script before being destroyed."
               },
               {
                  "name":"GetDamage",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns the amount of damage this entity would potentially inflict."
               },
               {
                  "name":"IsSpottedByTeam",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the given team has spotted this entity."
               },
               {
                  "name":"IsOnGround",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"True if standing on something"
               },
               {
                  "name":"HasPusherRootParent",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"If entity's root parent is a pusher"
               },
               {
                  "name":"GetGroundEntity",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Return ground entity"
               },
               {
                  "name":"GetGroundRelativePos",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Transform a world space position to where it would be if moving ground entity is in its original position."
               },
               {
                  "name":"SetNameVisibleToOwner",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set player visibility of this entity's name."
               },
               {
                  "name":"SetNameVisibleToFriendly",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set player visibility of this entity's name."
               },
               {
                  "name":"SetNameVisibleToEnemy",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set player visibility of this entity's name."
               },
               {
                  "name":"SetNameVisibleToNeutral",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set player visibility of this entity's name."
               },
               {
                  "name":"IsTitan",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"True if the entity is titan type."
               },
               {
                  "name":"IsOperator",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"True if the entity is operator type."
               },
               {
                  "name":"IsHuman",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"True if the entity is human type."
               },
               {
                  "name":"IsMechanical",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"True if the entity is mechanical type"
               },
               {
                  "name":"HasGibModel",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"True if the entity has gib models"
               },
               {
                  "name":"IsZipline",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"True if the entity is a zipline type."
               },
               {
                  "name":"IsBreakableGlass",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"True if the entity is breakable glass."
               },
               {
                  "name":"IsPlayerDecoy",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"True if the entity is a player decoy."
               },
               {
                  "name":"IsHologram",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"True if the entity is a hologram."
               },
               {
                  "name":"Minimap_SetAlignUpright",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Tell this entity whether to draw always upright on client minimaps"
               },
               {
                  "name":"Minimap_SetClampToEdge",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Tell this entity whether to clamp to the edges of client minimaps when drawing"
               },
               {
                  "name":"Minimap_SetHeightTracking",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Tell this entity whether to use height tracking behavior on client minimaps"
               },
               {
                  "name":"Minimap_SetObjectScale",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"The size ratio of this icon relative to the size of the smaller side of client minimaps. Values around 0.1 are ideal"
               },
               {
                  "name":"Minimap_AlwaysShow",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Forces this entity to show up on client minimaps that match the team or player handle"
               },
               {
                  "name":"Minimap_Hide",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Forces this entity to NOT show up on client minimaps that match the team or player handle"
               },
               {
                  "name":"Minimap_DisplayDefault",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Allows this entity to do default draw behavior on client minimaps that match the team or player handle (This is exclusive with AlwaysShow/Hide)"
               },
               {
                  "name":"Minimap_SetZOrder",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"The z order of this entity on the minimap relative to all other minimap entities. Larger values draw on top. Must be positive or 0"
               },
               {
                  "name":"Minimap_SetCustomState",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"A custom integer that can be RUI tracked on the client. Code behavior isn't affected by this variable. Must be positive or 0"
               },
               {
                  "name":"IsCloaked",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Return if entity is cloaked"
               },
               {
                  "name":"GetCloakEndTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Return when cloak ends (ie, when fade-in begins)"
               },
               {
                  "name":"SetCloakDuration",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the cloak (fade in, duration, fade out); duration: -1 for infinite, 0 to turn off"
               },
               {
                  "name":"SetCloakFlicker",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Makes existing cloak flicker off for (amount, duration); amount: 0..1; duration: -1 for infinite, 0 to turn off"
               },
               {
                  "name":"SetCanCloak",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether the entity can cloak or not"
               },
               {
                  "name":"CanCloak",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Gets whether the entity can cloak or not"
               },
               {
                  "name":"IsPhaseShifted",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"Highlight_GetCurrentContext",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get the current highlight context."
               },
               {
                  "name":"Highlight_GetCurrentInsideOpacity",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get the inside opacity on the current context."
               },
               {
                  "name":"Highlight_GetCurrentOutlineOpacity",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get the outline opacity on the current context."
               },
               {
                  "name":"Highlight_GetInheritHighlight",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Tells if this entity can inherit the highlighting settings from a parent entity if there is no local settings."
               },
               {
                  "name":"Highlight_GetInsideFunction",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get the inside function slot on the given context. 0 for a disabled a function."
               },
               {
                  "name":"Highlight_GetOutlineFunction",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get the outline function slot on the given context. 0 for a disabled a function."
               },
               {
                  "name":"Highlight_GetOutlineRadius",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get the outline radius on the given context."
               },
               {
                  "name":"Highlight_GetParam",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get custom parameters on the given context. Parameters are shared between inside and outline functions."
               },
               {
                  "name":"Highlight_GetState",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get custom state on the given context."
               },
               {
                  "name":"Highlight_IsEntityVisible",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Tells if this entity will be drawn."
               },
               {
                  "name":"Highlight_IsAfterPostProcess",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Tells if this highlight will be drawn after all post-processes."
               },
               {
                  "name":"Highlight_Enable",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Enable highlighting on this entity."
               },
               {
                  "name":"Highlight_SetCurrentContext",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the current highlight context. 0 by default. Server has priority over client. Use context -1 to disable highlighting."
               },
               {
                  "name":"Highlight_SetInheritHighlight",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set if this entity can inherit the highlighting settings from a parent entity if there is no local settings. False by default. Shared by all contexts."
               },
               {
                  "name":"Highlight_SetFunctions",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set function slots on the given context. Use slot 0 to disable a function."
               },
               {
                  "name":"Highlight_SetParam",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set custom parameters on the given context. Parameters are shared between inside and outline functions."
               },
               {
                  "name":"Highlight_SetVisibleByPlayer",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set if the given player can see the highlights."
               },
               {
                  "name":"Highlight_HideInside",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Hide inside function in a given duration. 0 to hide immediately. Server has priority over client."
               },
               {
                  "name":"Highlight_HideOutline",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Hide outline function in a given duration. 0 to hide immediately. Server has priority over client."
               },
               {
                  "name":"Highlight_ShowInside",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Show inside function in a given duration. 0 to show immediately. Server has priority over client."
               },
               {
                  "name":"Highlight_ShowOutline",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Show outline function in a given duration. 0 to show immediately. Server has priority over client."
               },
               {
                  "name":"HighlightEnableForTeam",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"HighlightDisableForTeam",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"HighlightSetTeamBitField",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"IsHighlightEnabledForTeam",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetGrenadeTargetDebounce",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the debounce duration for when AI are allowed to throw grenades at this target"
               },
               {
                  "name":"MakeInvisible",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Hides this entity and its children (entity still gets sent to the client, it just isn't rendered)"
               },
               {
                  "name":"MakeVisible",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Shows this entity"
               },
               {
                  "name":"Hide",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Hides this entity but not its children (entity still gets sent to the client, it just isn't rendered)"
               },
               {
                  "name":"Show",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Shows this entity"
               },
               {
                  "name":"DispatchImpactEffects",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetAimAssistAllowed",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetTimeSinceSpawning",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Return the time that this entity spawned."
               },
               {
                  "name":"GetLifeState",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetInvulnerable",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Increment invulnerability counter. IsInvulnerable will return true as long as that counter is > 0."
               },
               {
                  "name":"ClearInvulnerable",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Decrement invulnerability counter. IsInvulnerable will return true as long as that counter is > 0."
               },
               {
                  "name":"IsInvulnerable",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether the entity is invulnerable to damage."
               },
               {
                  "name":"SetInactive",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the entity to be active or inactive"
               },
               {
                  "name":"SetShieldHealth",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the shield health"
               },
               {
                  "name":"SetShieldHealthMax",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the maximum shield health"
               },
               {
                  "name":"GetShieldHealth",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get the shield health"
               },
               {
                  "name":"GetShieldHealthMax",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get the maximum shield health"
               },
               {
                  "name":"TraceAttackToTriggers",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Does a trace to trigger all triggers along it"
               },
               {
                  "name":"GetLinkEntArray",
                  "retrunType":34,
                  "a3arg":0,
                  "helpText":"Returns array of entities that this entity is linked to",
                  "argTypes":"",
                  "returnTypeString":"array< entity >"
               },
               {
                  "name":"GetLinkParentArray",
                  "retrunType":34,
                  "a3arg":0,
                  "helpText":"Returns array of entities that are linked to this entity",
                  "argTypes":"",
                  "returnTypeString":"array< entity >"
               },
               {
                  "name":"LinkToEnt",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Creates a link from the current entity to the given entity"
               },
               {
                  "name":"UnlinkFromEnt",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Removes a link from the current entity to the given entity"
               },
               {
                  "name":"GetLinkEnt",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Returns the single entity this entity is linked to (if there is one)"
               },
               {
                  "name":"GetLinkParent",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Returns the single entity that connects to this entity (if there is one)"
               },
               {
                  "name":"IsLinkedToEnt",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if there exists a link from this entity to the given entity"
               },
               {
                  "name":"AreEntityLinksNetworked",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns if this entity's links are networked"
               },
               {
                  "name":"EnableNetworkedEntityLinks",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Entity links for this entity are sent down to the clients"
               },
               {
                  "name":"DisableNetworkedEntityLinks",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Entity links for this entity are NOT sent down to clients"
               },
               {
                  "name":"SetPusher",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether this entity pushes other entities"
               },
               {
                  "name":"GetPusher",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Sets whether this entity pushes other entities"
               },
               {
                  "name":"SetKillNPCOnPush",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether this entity should kill NPCs when it pushes them"
               },
               {
                  "name":"SetForceVisibleInPhaseShift",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Forces an entity to be visible during phase shift."
               },
               {
                  "name":"AllowMantle",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Allows mantling on this entity (normally disabled for non-pusher entities)"
               },
               {
                  "name":"SetDamageNotifications",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether CodeCallback_DamageEntity should be called for this entity. Equivalent to ent.kv.damageNotifications"
               },
               {
                  "name":"SetDeathNotifications",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether CodeCallback_OnEntityKilled should be called for this entity. Equivalent to ent.kv.deathNotifications"
               },
               {
                  "name":"GetPassThroughFlags",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetPassThroughFlags",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets flags for when pass through happens on this entity"
               },
               {
                  "name":"SetPassThroughThickness",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the thickness of and entity for pass through bullets."
               },
               {
                  "name":"SetPassThroughDirection",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the direction the shot has to come from to pass the ent."
               },
               {
                  "name":"SetPreventCrits",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetCritsPrevented",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"DisableHibernation",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Prevents this entity from ever hibernating (so it is sent to all clients). Consider using MinimizeHibernation() instead."
               },
               {
                  "name":"MinimizeHibernation",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Makes this entity only hibernate beyond hibernation_far_dist."
               },
               {
                  "name":"EnableHibernation",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Returns this entity to normal hibernation behavior."
               },
               {
                  "name":"RoundOriginAndAnglesToNearestNetworkValue",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Rounds entity origin and angles so they will exactly match on client and server"
               },
               {
                  "name":"GetSpawner",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Returns spawner that created this entity, if it was created from one."
               },
               {
                  "name":"EnableRenderAlways",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set this entity to render always"
               },
               {
                  "name":"DisableRenderAlways",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set this entity to not render always"
               },
               {
                  "name":"DisableGrappleAttachment",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Prevents grapple from attaching to this entity"
               },
               {
                  "name":"EnableDebugBrokenInterpolation",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"PhysicsDummyEnableMotion",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Pass true or false to enable/disable motion for physics collision."
               },
               {
                  "name":"ConnectOutput",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Adds an I/O connection that will call the named function when the specified output fires",
                  "argTypes":"string eventName, void functionref( entity self, entity activator, entity caller, var value )",
                  "returnTypeString":"void"
               },
               {
                  "name":"DisconnectOutput",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Removes a connected script function from an I/O event.",
                  "argTypes":"string eventName, void functionref( entity self, entity activator, entity caller, var value )",
                  "returnTypeString":"void"
               },
               {
                  "name":"Die",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Kill the entity. Additional params table can contain: weapon, origin, force, forceKill, scriptType, damageSourceId, attackerClass, meleeAttack, meleeExecution, hitbox",
                  "argTypes":"entity attacker = null, entity inflictor = null, table additionalParams = null",
                  "returnTypeString":"void"
               },
               {
                  "name":"SetParent",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Parents this entity to another entity. maintainOffset defaults to false if an attachment is specified, and defaults to true otherwise.",
                  "argTypes":"entity parentEnt, string attachment = \"\", bool maintainOffset = null, float blendTime = 0",
                  "returnTypeString":"void"
               },
               {
                  "name":"SetParentWithHitbox",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Parents this entity to another entity's hitbox. maintainOffset defaults to false if a hitbox is nonzero, and defaults to true otherwise.",
                  "argTypes":"entity parentEnt, int hitboxIdx, bool maintainOffset = false, float blendTime = 0",
                  "returnTypeString":"void"
               },
               {
                  "name":"CreateTableFromModelKeyValues",
                  "retrunType":38,
                  "a3arg":1,
                  "helpText":"Creates and returns a script table built from the entity's model's .qc $keyvalues block.",
                  "argTypes":"",
                  "returnTypeString":"table",
                  "shortArgTypes":"."
               }
            ]
         },
         {
            "className":"CBaseGrenade",
            "parent":"CProjectile",
            "functions":[
               {
                  "name":"GrenadeIgnite",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Forces the grenade to ignite immediately.",
                  "argTypes":"",
                  "returnTypeString":"void"
               },
               {
                  "name":"GrenadeHasIgnited",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"bool"
               },
               {
                  "name":"GrenadeExplode",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Forces the grenade to explode immediately."
               },
               {
                  "name":"ExplodeForCollisionCallback",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Forces the grenade to explode immediately."
               },
               {
                  "name":"GetDamageRadius",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the damage radius"
               },
               {
                  "name":"GetExplosionRadius",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the explosion radius"
               },
               {
                  "name":"GetDamageAmount",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the maximum damage amount"
               },
               {
                  "name":"GetCreationTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the time this grenade was created."
               },
               {
                  "name":"GetFuseTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the fuse time of the grenade"
               },
               {
                  "name":"MarkAsAttached",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetThrower",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets who through the grenade."
               },
               {
                  "name":"SetDoesExplode",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether or not the grenade explodes"
               },
               {
                  "name":"InitMagnetic",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Init magnetic grenade parameters"
               },
               {
                  "name":"SetLauncherOwner",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetGrenadeTimer",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"float",
                  "returnTypeString":"void"
               },
               {
                  "name":"SetGrenadeIgnitionDuration",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"float",
                  "returnTypeString":"void"
               }
            ]
         },
         {
            "className":"CBaseHelicopter",
            "parent":"CAI_TrackPather",
            "functions":[
               {
                  "name":"SetSpeedImmediate",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the current and desired speed immediately"
               },
               {
                  "name":"SetFacingEntity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the entity to look at. Set to null to clear."
               },
               {
                  "name":"ClearFacingEntity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clear override. Resume normal desired yaw."
               },
               {
                  "name":"EngineEffectsDisable",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Turn off engine sounds and effects."
               },
               {
                  "name":"EngineEffectsEnable",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Turn engine sounds and effects back on."
               }
            ]
         },
         {
            "className":"CBaseTrigger",
            "parent":"CBaseEntity",
            "functions":[
               {
                  "name":"ContainsPoint",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Tests if the trigger contains a given point."
               },
               {
                  "name":"IsTouching",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Tests if the trigger contains a given entity."
               },
               {
                  "name":"IsTouched",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Tests if the trigger is being touched by any entity that can trigger it."
               },
               {
                  "name":"SetPhaseShiftCanTouch",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether or not phase shift can touch this trigger."
               },
               {
                  "name":"Enable",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Enable the trigger"
               },
               {
                  "name":"Disable",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Disable the trigger"
               },
               {
                  "name":"IsEnabled",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the trigger is enabled"
               },
               {
                  "name":"GetNearbyDistance",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns how close an entity is to the trigger box. The return value is in game units. The minimum value is 0."
               },
               {
                  "name":"GetNearbyFraction",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns how close an entity is to the trigger box. The return value is normalized from [0, 1], where 0 is just entering the nearby radius and 1 is just touching the actual trigger."
               },
               {
                  "name":"SetNearbyRadius",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the nearby radius for the trigger box."
               },
               {
                  "name":"GetNearbyRadius",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns the nearby radius of the trigger box."
               },
               {
                  "name":"GetClosestPoint",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Returns the closest point on the trigger box to the given entity."
               },
               {
                  "name":"SearchForNewTouchingEntity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Force trigger to search for entities touching it. Needed when spawning in a new trigger."
               },
               {
                  "name":"GetTouchingEntities",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Get array of touching entities",
                  "argTypes":"",
                  "returnTypeString":"array< entity >"
               },
               {
                  "name":"SetEnterCallback",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Sets a function to be called when an entity enters the trigger.",
                  "argTypes":"void functionref( entity trig, entity ent )",
                  "returnTypeString":"void"
               },
               {
                  "name":"SetLeaveCallback",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Sets a function to be called when an entity leaves the trigger.",
                  "argTypes":"void functionref( entity trig, entity ent )",
                  "returnTypeString":"void"
               }
            ]
         },
         {
            "className":"CBreakableSurface",
            "parent":"CBreakable",
            "functions":[
               {
                  "name":"BreakSphere",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Destroys glass in a radius."
               }
            ]
         },
         {
            "className":"CCrossbowBolt",
            "parent":"CProjectile",
            "functions":[
               {
                  "name":"SetRicochetMaxCount",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets max number of ricochet's a bolt can do"
               }
            ]
         },
         {
            "className":"CDynamicProp",
            "parent":"CBaseAnimating",
            "functions":[
               {
                  "name":"GetBoneFollowerForBone",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetBoneFollowersSolid",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               }
            ]
         },
         {
            "className":"CFirstPersonProxy",
            "parent":"CBaseAnimating",
            "functions":[
               {
                  "name":"HideFirstPersonProxy",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"ShowFirstPersonProxy",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               }
            ]
         },
         {
            "className":"CHardPointEntity",
            "parent":"CBaseEntity",
            "functions":[
               {
                  "name":"SetHardpointState",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetHardpointEstimatedCaptureTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetHardpointProgressRefPoint",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetHardpointAICount",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetHardpointPlayerCount",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetHardpointPlayerTitanCount",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetHardpointState",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetHardpointEstimatedCaptureTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetHardpointProgressRefPoint",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetHardpointAICount",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetHardpointPlayerCount",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetHardpointPlayerTitanCount",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetHardpointID",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetHardpointID",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetTerminal",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetTerminal",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":""
               }
            ]
         },
         {
            "className":"CMissile",
            "parent":"CProjectile",
            "functions":[
               {
                  "name":"SetDamage",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set missile's damage"
               },
               {
                  "name":"SetExplosionRadius",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set missile's inner and outer explosion radius"
               },
               {
                  "name":"SetSpeed",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set missile's speed"
               },
               {
                  "name":"GetSpeed",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get missile's speed"
               },
               {
                  "name":"SetHomingSpeeds",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set missile's homing speed"
               },
               {
                  "name":"GetHomingSpeed",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get missile's homing speed"
               },
               {
                  "name":"GetHomingSpeedAtDodgingPlayer",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get missile's homing speed -vs- dodging players."
               },
               {
                  "name":"SetMissileTarget",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set missile's homing target. If the missile's target position is set that will be used instead."
               },
               {
                  "name":"GetMissileTarget",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Get missile's homing target"
               },
               {
                  "name":"SetMissileTargetPosition",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the missile's target homing position. This will override any target entity."
               },
               {
                  "name":"GetMissileTargetPosition",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Gets the missile's target homing position. This may be garbage if not at first set."
               },
               {
                  "name":"ClearMissileTargetPosition",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clears the missile's target homing position."
               },
               {
                  "name":"MissileExplode",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Self-destruct."
               },
               {
                  "name":"InitMissileForRandomDriftFromWeaponSettings",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Init missile drift settings from weapon settings"
               },
               {
                  "name":"InitMissileForRandomDrift",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Init missile drift with custom settings"
               },
               {
                  "name":"InitMissileExpandContract",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Init missile path expand contract settings"
               },
               {
                  "name":"ApplyMissileControlledDrift",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Apply missile drift to velocity"
               },
               {
                  "name":"InitMissileSpiral",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Init spiralling missile"
               }
            ]
         },
         {
            "className":"CNPC_Drone",
            "parent":"CAI_BaseNPC",
            "functions":[
               {
                  "name":"SetAttackMode",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set whether or not to ttack targets"
               }
            ]
         },
         {
            "className":"CNPC_Dropship",
            "parent":"CBaseHelicopter",
            "functions":[
               {
                  "name":"IsJetWakeFXEnabled",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"IsJetWakeFXEnabled"
               },
               {
                  "name":"SetJetWakeFXEnabled",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"SetJetWakeFXEnabled"
               }
            ]
         },
         {
            "className":"CNPC_SentryTurret",
            "parent":"CAI_BaseNPC",
            "functions":[
               {
                  "name":"EnableTurret",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Enable the turret"
               },
               {
                  "name":"DisableTurret",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Disable the turret"
               },
               {
                  "name":"GetTurretState",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets the turret's current state. Enum values under TURRET_***"
               },
               {
                  "name":"SetMuzzleData",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the turrets muzzle attachment data assumes all muzzle attachments are consecutive (first muzzle attachment, num muzzles)"
               },
               {
                  "name":"SetControlPanel",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the control panel for this turret."
               },
               {
                  "name":"GetControlPanel",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets the control panel for this turret."
               },
               {
                  "name":"StartDeployed",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"starts the turret searching"
               },
               {
                  "name":"SetDumbFireMode",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"lets the turrets shoot at glass if a player is behind it"
               }
            ]
         },
         {
            "className":"CNPC_Titan",
            "parent":"CAI_BaseNPC",
            "functions":[
               {
                  "name":"SetCanStand",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Let client know that the titan could stand when checked."
               },
               {
                  "name":"GetCanStand",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Is the titan able to stand"
               },
               {
                  "name":"GrappleNPC",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Launch grapple"
               }
            ]
         },
         {
            "className":"CParticleSystem",
            "parent":"CBaseEntity",
            "functions":[
               {
                  "name":"DoNotCreateFXOnRestore",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Prevent the fx to be re-created on restore"
               },
               {
                  "name":"FXEnableRenderAlways",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set this entity to render always"
               },
               {
                  "name":"FXDisableRenderAlways",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set this entity to not render always"
               },
               {
                  "name":"SetStopType",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Determines how the effect will end if you destroy the entity. Options are: \"normal\" (stops emission); \"destroyImmediately\" (stops emission and kills existing particles immediately); \"playEndcap\" (stops emission and play endcap). (default is \"playEndcap\".)"
               },
               {
                  "name":"SetControlPointEnt",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Assign the given ent to the given control point index."
               }
            ]
         },
         {
            "className":"CPlayer",
            "parent":"CBaseCombatCharacter",
            "functions":[
               {
                  "name":"GetViewModelEntity",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Returns the view model entity."
               },
               {
                  "name":"IsNoclipping",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the player is in noclip mode."
               },
               {
                  "name":"IsFreeSpace",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the player will not be stuck if teleported to given position."
               },
               {
                  "name":"GetFirstPersonProxy",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Get the player's first person proxy"
               },
               {
                  "name":"GetPredictedFirstPersonProxy",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Get the player's predicted first person proxy"
               },
               {
                  "name":"SetTrackEntity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets an entity to be viewed by this player in third person."
               },
               {
                  "name":"GetTrackEntity",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets the current entity to be viewed by this player in third person."
               },
               {
                  "name":"SetTrackEntityBlendTimes",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the blend times used for blending to a tracked ent (or third-person ent)."
               },
               {
                  "name":"SetTrackEntityOffset",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the player's camera offset from the tracked entity."
               },
               {
                  "name":"GetTrackEntityOffset",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Gets the player's camera offset from the tracked entity."
               },
               {
                  "name":"SetTrackEntityPitchLookMode",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets what the pitch axis does. \"orbit\": right stick orbits around the entity. \"freelook\": right stick rotates the camera in place"
               },
               {
                  "name":"GetTrackEntityPitchLookMode",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Gets what the pitch axis does. \"orbit\": right stick orbits around the entity. \"freelook\": right stick rotates the camera in place"
               },
               {
                  "name":"SetTrackEntityYawLookMode",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets what the yaw axis does. \"orbit\": right stick orbits around the entity. \"freelook\": right stick rotates the camera in place"
               },
               {
                  "name":"GetTrackEntityYawLookMode",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Gets what the yaw axis does. \"orbit\": right stick orbits around the entity. \"freelook\": right stick rotates the camera in place"
               },
               {
                  "name":"SetTrackEntityDistanceMode",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"\"scriptOffset\" or \"convar\". Selects whether it uses the old method: distance set by convars c_maxdistance and cam_idealdist, or uses the new offset set by SetTrackEntityOffset."
               },
               {
                  "name":"GetTrackEntityDistanceMode",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"\"scriptOffset\" or \"convar\". Returns whether it uses the old method: distance set by convars c_maxdistance and cam_idealdist, or uses the new offset set by SetTrackEntityOffset."
               },
               {
                  "name":"SetTrackEntityMinYaw",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets camera min yaw when tracking entity."
               },
               {
                  "name":"SetTrackEntityMaxYaw",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets camera max yaw when tracking entity."
               },
               {
                  "name":"SetTrackEntityMinPitch",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets camera min pitch when tracking entity."
               },
               {
                  "name":"SetTrackEntityMaxPitch",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets camera max pitch when tracking entity."
               },
               {
                  "name":"GetTrackEntityMinYaw",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets camera min yaw when tracking entity."
               },
               {
                  "name":"GetTrackEntityMaxYaw",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets camera max yaw when tracking entity."
               },
               {
                  "name":"GetTrackEntityMinPitch",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets camera min pitch when tracking entity."
               },
               {
                  "name":"GetTrackEntityMaxPitch",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets camera max pitch when tracking entity."
               },
               {
                  "name":"ClearTrackEntitySettings",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Resets track entity settings to the defaults."
               },
               {
                  "name":"SetTrackEntitySpringViewToCenterRate",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets rate at which the camera rotates back to center when player isn't looking around."
               },
               {
                  "name":"GetTrackEntitySpringViewToCenterRate",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets rate at which the camera rotates back to center when player isn't looking around."
               },
               {
                  "name":"SetTrackEntityLookaheadLowerEntSpeed",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"The tracked ent speed above which the camera begins to look ahead."
               },
               {
                  "name":"SetTrackEntityLookaheadUpperEntSpeed",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"The tracked ent speed at which the camera has maximum look ahead."
               },
               {
                  "name":"SetTrackEntityLookaheadMaxAngle",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"The maximum angle the camera can turn to look ahead."
               },
               {
                  "name":"SetTrackEntityLookaheadLerpAheadRate",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"To smooth things out, the camera angle lags behind the 'ideal' lookahead angle. This is the interpolation speed when turning to look ahead."
               },
               {
                  "name":"SetTrackEntityLookaheadLerpToCenterRate",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"To smooth things out, the camera angle lags behind the 'ideal' lookahead angle. This is the interpolation speed when turning back toward center from looking ahead."
               },
               {
                  "name":"GetTrackEntityLookaheadLowerEntSpeed",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"The tracked ent speed above which the camera begins to look ahead."
               },
               {
                  "name":"GetTrackEntityLookaheadUpperEntSpeed",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"The tracked ent speed at which the camera has maximum look ahead."
               },
               {
                  "name":"GetTrackEntityLookaheadMaxAngle",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"The maximum angle the camera can turn to look ahead."
               },
               {
                  "name":"GetTrackEntityLookaheadLerpAheadRate",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"To smooth things out, the camera angle lags behind the 'ideal' lookahead angle. This is the interpolation speed when turning to look ahead."
               },
               {
                  "name":"GetTrackEntityLookaheadLerpToCenterRate",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"To smooth things out, the camera angle lags behind the 'ideal' lookahead angle. This is the interpolation speed when turning back toward center from looking ahead."
               },
               {
                  "name":"SetTrackEntityPushedInByGeo",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"If true, the camera tries to back up from the entity until it hits geo or reaches its desired position. If false, geo is ignored. Enabled by default."
               },
               {
                  "name":"AirCameraEnable",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"AirCameraDisable",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"AirCameraFollowHeight",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"AirCameraFollowDistance",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"AirCameraFollowHeightSmooth",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Same as AirCameraFollowHeight, except it does a smooth transition."
               },
               {
                  "name":"AirCameraFollowDistanceSmooth",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Same as AirCameraFollowDistance, except it does a smooth transition."
               },
               {
                  "name":"AirCameraMinPitch",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"AirCameraMaxPitch",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"AirCameraMinPitchSmooth",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Same as AirCameraMinPitch, except it does a smooth transition."
               },
               {
                  "name":"AirCameraMaxPitchSmooth",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Same as AirCameraMaxPitch, except it does a smooth transition."
               },
               {
                  "name":"AirCameraShootFromPlayer",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"NotifyDidDamage",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Inform clients that they've damaged another player or entity."
               },
               {
                  "name":"CockpitStartDisembark",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Start disembarking from cockpit."
               },
               {
                  "name":"CockpitStartEject",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Start ejecting from cockpit."
               },
               {
                  "name":"CockpitStartBoot",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Start cockpit boot up."
               },
               {
                  "name":"SetHotDropImpactDelay",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Time in seconds until hot drop impact."
               },
               {
                  "name":"ClearHotDropImpactTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clear out the active hot drop impact."
               },
               {
                  "name":"SetPlayerGameStat",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the player's value for the given game stat. Stat indices start with PGS, such as PGS_KILLS."
               },
               {
                  "name":"AddToPlayerGameStat",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Adds to the player's value for the given game stat. Stat indices start with PGS, such as PGS_KILLS."
               },
               {
                  "name":"GetPlayerGameStat",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets the player's value for the given game stat. Stat indices start with PGS, such as PGS_KILLS. Call with -1 for list of valid values. (stat index)"
               },
               {
                  "name":"HasEntitlement",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Check if player has an entitlement"
               },
               {
                  "name":"Script_SetHighSpeedViewmodelAnims",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether this player should use \"fast\" viewmodel animations"
               },
               {
                  "name":"Script_GetHighSpeedViewmodelAnims",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Sets whether this player is using \"fast\" viewmodel animations"
               },
               {
                  "name":"CameraPosition",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get current camera position"
               },
               {
                  "name":"CameraAngles",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get current camera angles"
               },
               {
                  "name":"SnapEyeAngles",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Snaps the player's eye angles to the given angles"
               },
               {
                  "name":"SnapFeetToEyes",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Snaps the player's feet to the direction they are looking"
               },
               {
                  "name":"SnapEyesToFeet",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Snaps the player's eyes to the direction of their feet"
               },
               {
                  "name":"GetPetTitan",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Get the players pet titan"
               },
               {
                  "name":"SetPetTitan",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Get the players pet titan"
               },
               {
                  "name":"GetPetTitanMode",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get the players pet titan mode"
               },
               {
                  "name":"SetPetTitanMode",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Get the players pet titan mode"
               },
               {
                  "name":"GetPlayerModHealthPerSegment",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"float"
               },
               {
                  "name":"GetPlayerModHealth",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetRemoteTurret",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetSelectedOffhandToMelee",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetNextTitanRespawnAvailable",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetNextTitanRespawnAvailable",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetHardpointEntity",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Get the players hardpoint entity"
               },
               {
                  "name":"SetHardpointEntity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Get the players hardpoint entity"
               },
               {
                  "name":"DisableWeapon",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Disable the player's weapon"
               },
               {
                  "name":"DisableWeaponWithSlowHolster",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"EnableWeapon",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Enable the player's weapon"
               },
               {
                  "name":"EnableWeaponWithSlowDeploy",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"HolsterWeapon",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Holster player's weapon with slower holster animation"
               },
               {
                  "name":"DeployWeapon",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Pull out the player's weapon using slow deploy animation"
               },
               {
                  "name":"DisableWeaponViewModel",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Disable the player's weapon viewmodel"
               },
               {
                  "name":"EnableWeaponViewModel",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Enable the player's weapon viewmodel"
               },
               {
                  "name":"Weapon_StartCustomActivity",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Given (activityName, playRaiseAnimOnComplete), Plays the given activity on the weapon viewmodel"
               },
               {
                  "name":"Weapon_StopCustomActivity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Stops any custom activities currently playing on the weapon viewmodel"
               },
               {
                  "name":"Weapon_IsInCustomActivity",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Queries whether the weapon viewmodel is currently playing a custom activity"
               },
               {
                  "name":"Weapon_HasCustomActivity",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Given (activityName), Returns whether the activity is valid for the current weapon"
               },
               {
                  "name":"Weapon_GetCustomActivityFraction",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns the fraction of the current custom weapon activity that is complete."
               },
               {
                  "name":"Weapon_GetCustomActivityDuration",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns the duration of the current custom weapon activity."
               },
               {
                  "name":"Weapon_CustomActivityAttachModel",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Specifies a model to be attached to the viewmodel during the current custom activity, as well as an attachment index."
               },
               {
                  "name":"Weapon_CustomActivityClearAttachedModel",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clears the attached custom activity model."
               },
               {
                  "name":"RemoveAllItems",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Remove all the player's items"
               },
               {
                  "name":"IsGodMode",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Is player in god mode."
               },
               {
                  "name":"IsBuddhaMode",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Is player in Buddha mode."
               },
               {
                  "name":"ForceUseEntity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Forces a user to use an entity. Does not do any validity check"
               },
               {
                  "name":"PlayerCone_Disable",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Disable the player view-limiting cone."
               },
               {
                  "name":"PlayerCone_FromAnim",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Player view-limiting cone provided by scriptanim."
               },
               {
                  "name":"PlayerCone_SetSpecific",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Directly specify center of view-limiting cone."
               },
               {
                  "name":"PlayerCone_SetLerpTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the number of seconds to lerp out a 180 degree error into the player view-limiting cone."
               },
               {
                  "name":"PlayerCone_SetMinYaw",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the minimum yaw of the player view-limiting cone."
               },
               {
                  "name":"PlayerCone_SetMaxYaw",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the maximum yaw of the player view-limiting cone."
               },
               {
                  "name":"PlayerCone_SetMinPitch",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the minimum pitch of the player view-limiting cone."
               },
               {
                  "name":"PlayerCone_SetMaxPitch",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the maximum pitch of the player view-limiting cone."
               },
               {
                  "name":"HidePlayer",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Hides the player."
               },
               {
                  "name":"UnhidePlayer",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Undoes the effects of .HidePlayer()"
               },
               {
                  "name":"ViewOffsetEntity_SetEntity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set view offset entity for first-person animation."
               },
               {
                  "name":"ViewOffsetEntity_Clear",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clear view offset entity for first-person animation."
               },
               {
                  "name":"ViewOffsetEntity_SetLerpInTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the lerp-in duration for the view offset entity. Setting the entity resets the time to zero, so call this after setting the view entity."
               },
               {
                  "name":"ViewOffsetEntity_SetLerpOutTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the lerp-out duration for the view offset entity. Setting the entity resets the time to zero, so call this after setting the view entity."
               },
               {
                  "name":"AnimViewEntity_SetEntity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set view entity for first-person animation."
               },
               {
                  "name":"AnimViewEntity_Clear",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clear view entity for first-person animation."
               },
               {
                  "name":"AnimViewEntity_EnableThirdPersonCameraVisibilityChecks",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Make the third person camera try to slide around collision rather than going right through it. And also change camera attachments to get a better view."
               },
               {
                  "name":"AnimViewEntity_SetLerpInTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the lerp-in duration for the anim view entity. Setting the entity resets the time to zero, so call this after setting the view entity."
               },
               {
                  "name":"AnimViewEntity_SetLerpOutTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the lerp-out duration for the anim view entity. Setting the entity resets the time to zero, so call this after setting the view entity."
               },
               {
                  "name":"GetDodgePower",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the raw dodge power of the suit"
               },
               {
                  "name":"Server_SetDodgePower",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the power of the suit to whatever value you want (100 = max)."
               },
               {
                  "name":"GetSuitPower",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the percentage of \"suit power\" remaining (used for sprint, etc) (100 = max)"
               },
               {
                  "name":"GetSuitJumpPower",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the percentage of \"suit jump power\" remaining (used for double jump) (100 = max)"
               },
               {
                  "name":"GetSuitGrapplePower",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the percentage of \"grapple power\" remaining (100 = max)"
               },
               {
                  "name":"SetSuitPower",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the percentage of \"suit power\" remaining (used for sprint, etc) (100 = max)"
               },
               {
                  "name":"SetSuitJumpPower",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the percentage of \"suit jump power\" remaining (used for double jump) (100 = max)"
               },
               {
                  "name":"SetSuitGrapplePower",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the percentage of \"grapple power\" remaining (100 = max)"
               },
               {
                  "name":"CreatePlayerDecoy",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Creates a decoy of this player"
               },
               {
                  "name":"CreateAnimatedPlayerDecoy",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Creates a decoy that plays an animation"
               },
               {
                  "name":"IsWallRunning",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether the player is wallrunning"
               },
               {
                  "name":"IsWallHanging",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether the player is wall-hanging."
               },
               {
                  "name":"IsSprinting",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether the player is sprinting"
               },
               {
                  "name":"IsDoubleJumping",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether the player is in the middle of a double-jump."
               },
               {
                  "name":"IsDodging",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether the player is dodging."
               },
               {
                  "name":"IsTraversing",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether the player is traversing (i.e. mantle or window anims)."
               },
               {
                  "name":"IsMantling",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether the player is mantling."
               },
               {
                  "name":"GetMantlingEndPosition",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Returns the position the player is going to finish mantling."
               },
               {
                  "name":"IsPredicting",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether this player has prediction enabled."
               },
               {
                  "name":"HasGrapple",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether this player has grapple available in general."
               },
               {
                  "name":"MayGrapple",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether this player can grapple the surface they're looking at."
               },
               {
                  "name":"IsSliding",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether the player is sliding"
               },
               {
                  "name":"ClearTraverse",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Ends traversals such as mantle. Moves the player to the nearest nonsolid location."
               },
               {
                  "name":"GetOriginOutOfTraversal",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Returns the player's origin, or, if the player is traversing / mantling, returns a safe nearby position that is not in solid."
               },
               {
                  "name":"GetViewVector",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get the forward view vector of the player"
               },
               {
                  "name":"GetViewForward",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get the forward view vector of the player"
               },
               {
                  "name":"GetViewRight",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get the right view vector of the player"
               },
               {
                  "name":"GetViewUp",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get the up view vector of the player"
               },
               {
                  "name":"GetViewPunchSqrd",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get the players current viewpunch amount, squared"
               },
               {
                  "name":"ViewPunch",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Punch the players view from the specified origin. Takes arguments: origin, softAmount, hardAmount, randomBoost"
               },
               {
                  "name":"Dev_GetPlayerSettingByKeyField",
                  "retrunType":35,
                  "a3arg":0,
                  "helpText":"Get player setting key field."
               },
               {
                  "name":"Code_SetPlayerSettings",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the current player class"
               },
               {
                  "name":"HasClassMod",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Given (string), returns true if mod is active on this player"
               },
               {
                  "name":"HasClassPosMod",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Given (string, pose)"
               },
               {
                  "name":"IsClassModAvailableForPlayerSetting",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Given (string), returns true if given mod is available to use for this player"
               },
               {
                  "name":"IsClassPosModAvailableForPlayerSetting",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"return true if given mod is on a given pose of the class settings"
               },
               {
                  "name":"GetClassPosCount",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetPlayerRequestedSettings",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the requested player class"
               },
               {
                  "name":"GetPlayerRequestedClass",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"What class has the player requested"
               },
               {
                  "name":"GetPlayerSettings",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"What class is the player"
               },
               {
                  "name":"GetPlayerRequestedSettings",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"What class has the player requested"
               },
               {
                  "name":"GetPlayerClass",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"What general class is the player (pilot/titan)"
               },
               {
                  "name":"GetPlayerSubClass",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"What general subclass is the player (wallrun/boost)"
               },
               {
                  "name":"GetPlayerSettingsAsset",
                  "retrunType":40,
                  "a3arg":0,
                  "helpText":"Gets the value of this setting from the current player class settings (.set files)",
                  "argTypes":"string",
                  "returnTypeString":"asset"
               },
               {
                  "name":"SetViewEntity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set player's view entity."
               },
               {
                  "name":"ClearViewEntity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clear view entity."
               },
               {
                  "name":"SetViewIndex",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the view entity to index from GetViewIndexForEntity."
               },
               {
                  "name":"GetPlayerIndex",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Return player's index number (which is entindex() -1 )"
               },
               {
                  "name":"FreezeControlsOnServer",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Makes player controls not affect movement, etc."
               },
               {
                  "name":"UnfreezeControlsOnServer",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Makes player controls not affect movement, etc."
               },
               {
                  "name":"LockWeaponChange",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Disallows weapon changes."
               },
               {
                  "name":"UnlockWeaponChange",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Allows weapon changes."
               },
               {
                  "name":"IsWeaponChangeLocked",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Query the weapon change allowed state."
               },
               {
                  "name":"MovementEnable",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Enable player movement"
               },
               {
                  "name":"MovementDisable",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Disable player movement"
               },
               {
                  "name":"Server_TurnOffhandWeaponsDisabledOn",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Turns the disable offhand weapons flag on."
               },
               {
                  "name":"Server_TurnOffhandWeaponsDisabledOff",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Turns the disable offhand weapons flag off."
               },
               {
                  "name":"Server_TurnDodgeDisabledOn",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Turns the disable dodge flag on."
               },
               {
                  "name":"Server_TurnDodgeDisabledOff",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Turns the diable dodge flag off."
               },
               {
                  "name":"ForceMPAimassist",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"void"
               },
               {
                  "name":"PreventWeaponDestroyNoAmmo",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"EnableWeaponDestroyNoAmmo",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"EnableAllIDLightsFriendly",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"DisableAllIDLightsFriendly",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"Code_RespawnPlayer",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Respawns the player."
               },
               {
                  "name":"ReserveSpawnPoint",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Reserves a spawn point for a player."
               },
               {
                  "name":"ClearSpawnPoint",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clears a spawn point reservation."
               },
               {
                  "name":"SetLastSpawnPoint",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the last spawn point used by the player."
               },
               {
                  "name":"IsReplay",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns if player is a fake player for replays"
               },
               {
                  "name":"IsObserver",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether the player is in an observer mode"
               },
               {
                  "name":"GetObserverMode",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Returns the player's observer mode. OBS_MODE_NONE if they are not observing"
               },
               {
                  "name":"StartObserverMode",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Put player into the given observer mode"
               },
               {
                  "name":"StopObserverMode",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clears observer mode to OBS_MODE_NONE."
               },
               {
                  "name":"SetObserverTarget",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set target entity for player's observer mode"
               },
               {
                  "name":"GetObserverTarget",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets the target entity for player's observer mode"
               },
               {
                  "name":"GetFirstObserverTarget",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets the first target entity in the cycle for player's observer mode"
               },
               {
                  "name":"SetObserverModeStaticPosition",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the position that this player will use when they are in OBS_MODE_STATIC or OBS_MODE_STATIC_LOCKED"
               },
               {
                  "name":"SetObserverModeStaticAngles",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the angles that this player will use when they are in OBS_MODE_STATIC or OBS_MODE_STATIC_LOCKED"
               },
               {
                  "name":"SetIsValidChaseObserverTarget",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether this player is a valid observer target for other players who are using OBS_MODE_CHASE"
               },
               {
                  "name":"StartObservingPlayerInFirstPerson",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Start using another player for you first person view."
               },
               {
                  "name":"StopObservingPlayerInFirstPerson",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Stop observing another player in first person."
               },
               {
                  "name":"GetZoomFrac",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get how zoomed-in a player is. Result is between (0.0, 1.0)."
               },
               {
                  "name":"GetPlayerMins",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Returns player's minimum bounds"
               },
               {
                  "name":"GetPlayerMaxs",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Returns player's maximum bounds"
               },
               {
                  "name":"UseButtonPressed",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns whether player has use button pressed"
               },
               {
                  "name":"GetPlayerName",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Get the player's name."
               },
               {
                  "name":"GetPlayerPlatformName",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Get the player's platform name."
               },
               {
                  "name":"PlayerMelee_StartAttack",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Let code know a melee attack has started"
               },
               {
                  "name":"PlayerMelee_EndAttack",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Let code know a melee attack has ended"
               },
               {
                  "name":"PlayerMelee_IsAttackActive",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Let script query whether a melee attack is currently in progress"
               },
               {
                  "name":"PlayerMelee_SetAttackHitEntity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Let code know the melee attack hit something (so code will stop the lunge movement)"
               },
               {
                  "name":"PlayerMelee_SetAttackRecoveryShouldBeQuick",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"PlayerMelee_GetAttackHitEntity",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Let script query whether the melee attack hit flag has been set"
               },
               {
                  "name":"PlayerMelee_SetState",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets scripted melee state (arbitrary integer)"
               },
               {
                  "name":"PlayerMelee_GetState",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets scripted melee state (arbitrary integer)"
               },
               {
                  "name":"SetMeleeDisabled",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Increments disabled melee counter"
               },
               {
                  "name":"ClearMeleeDisabled",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Decrements disabled melee counter"
               },
               {
                  "name":"GetMeleeDisabled",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets the disabled melee counter"
               },
               {
                  "name":"Lunge_SetTargetEntity",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Have the player lerp towards the given target as they wind up for their attack"
               },
               {
                  "name":"Lunge_GetTargetEntity",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Get the current lunge target"
               },
               {
                  "name":"Lunge_SetTargetPosition",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Make the player lerp towards the given position"
               },
               {
                  "name":"Lunge_GetTargetPosition",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get the position the player is lunging towards"
               },
               {
                  "name":"Lunge_SetEndPositionOffset",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"Lunge_GetEndPositionOffset",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"Lunge_ClearTarget",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clears any lunging currently going on"
               },
               {
                  "name":"Lunge_EnableFlying",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Allow the lunge to fly into the air, if it needs to"
               },
               {
                  "name":"Lunge_LockPitch",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Whether lunging to adjust the player's view pitch"
               },
               {
                  "name":"Lunge_SetSmoothTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets how long it takes to lunge to the target. Default is 0.5 seconds."
               },
               {
                  "name":"Lunge_SetMaxTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets maximum time for how long a lunge will go on for"
               },
               {
                  "name":"Lunge_SetMaxEndSpeed",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the maximum speed the player can end lunging with. Defaults to 0."
               },
               {
                  "name":"Lunge_IsActive",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Is the player lunging."
               },
               {
                  "name":"Lunge_IsLungingToEntity",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Is the player lunging towards an entity"
               },
               {
                  "name":"Lunge_IsLungingToPosition",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Is the player lunging towards a position"
               },
               {
                  "name":"Lunge_IsGroundExecute",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Is the player lunging to ground execute"
               },
               {
                  "name":"Lunge_GetStartPositionOffset",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Returns the initial relative position of the player from the lunge target"
               },
               {
                  "name":"RumbleEffect",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Plays a controller rumble on the current player. Takes three parameters: rumble index (the wave pattern of the vibration or 0 to stop all rumbles), rumble data (optional data for the rumble flags parameter that follows), and rumble flags (additional flags for the rumble). See rumble_shared.h for further details."
               },
               {
                  "name":"TouchGround",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Force things (like superjump and wallrunning) to reset as if the player touched ground."
               },
               {
                  "name":"ConsumeDoubleJump",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Makes the player unable to double jump until they touch the ground again."
               },
               {
                  "name":"SetStaggering",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set this entity to use staggered walk and run animations"
               },
               {
                  "name":"SetAnimNearZ",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the near Z to use when playing scripted animations"
               },
               {
                  "name":"ClearAnimNearZ",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Resets the near Z to default when playing scripted animations"
               },
               {
                  "name":"SetMoveSpeedScale",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Scales the movement speed of the player"
               },
               {
                  "name":"SetAccelerationScale",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Scales the movement acceleration of the player"
               },
               {
                  "name":"SetPowerRegenRateScale",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Scales the power regen rate of the player (e.g. for dodge use)"
               },
               {
                  "name":"SetDodgePowerDelayScale",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Scales the dodge power delay of the player"
               },
               {
                  "name":"WantsMatchmaking",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the player wants to be actively matchmaking"
               },
               {
                  "name":"Despawn",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Kills the player (without leaving a corpse)"
               },
               {
                  "name":"IsZiplining",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the player is ziplining (in either direction)"
               },
               {
                  "name":"IsZipliningInReverse",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the player is ziplining in reverse"
               },
               {
                  "name":"SmartAmmo_GetHighestLockOnMeFraction",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns the highest fraction value a smart-ammo-enabled weapon has locked onto this entity right now"
               },
               {
                  "name":"SmartAmmo_GetPreviousHighestLockOnMeFraction",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns the previous highest fraction value"
               },
               {
                  "name":"SmartAmmo_GetHighestLocksOnMeEntities",
                  "retrunType":35,
                  "a3arg":0,
                  "helpText":"Returns an array of the weapon entities with the highest fraction/locks on us",
                  "argTypes":"",
                  "returnTypeString":"array< entity >"
               },
               {
                  "name":"SetOneHandedWeaponUsageOn",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Enable one-handed weapon anims."
               },
               {
                  "name":"SetOneHandedWeaponUsageOff",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Disable one-handed weapon anims."
               },
               {
                  "name":"SetSkyCamera",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the skycamera entity that this player should use."
               },
               {
                  "name":"SetTitanSoulBeingRodeoed",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the titan soul of the titan this player is rodeoing"
               },
               {
                  "name":"GetTitanSoulBeingRodeoed",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets the titan soul of the titan this player is rodeoing"
               },
               {
                  "name":"SetSyncedEntity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets an entity that should be time-aligned with the player"
               },
               {
                  "name":"GetSyncedEntity",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets the entity that should be time-aligned with the player"
               },
               {
                  "name":"GetReplayDelay",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the player's replay delay"
               },
               {
                  "name":"IsWatchingKillReplay",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the local client is watching a kill replay."
               },
               {
                  "name":"IsWatchingSpecReplay",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the local client is watching a spectator replay."
               },
               {
                  "name":"SetKillReplayDelay",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the player's delay for kill replay (starts/ends kill replay)",
                  "argTypes":"float delay, bool forceThirdPerson",
                  "returnTypeString":"void"
               },
               {
                  "name":"SetSpecReplayDelay",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the player's delay for 1st person spectator (starts/ends spectator replay)"
               },
               {
                  "name":"ClearReplayDelay",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clear's the player's delay for replay, whether kill or spectator"
               },
               {
                  "name":"SetKillReplayVictim",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Who was killed. Used for non-player killers, to aim the camera toward the victim. It is cleared automatically by code when a replay ends (when replay delay is set to 0)."
               },
               {
                  "name":"SetKillReplayInflictorEHandle",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"int encodedEHandle",
                  "returnTypeString":"void"
               },
               {
                  "name":"SetIsReplayRoundWinning",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets a bool that is sent to the client. Call after calling SetKillReplayDelay(). The value clears to false on start/end of any replay. Read on the client with IsReplayRoundWinning(). "
               },
               {
                  "name":"SetPredictionEnabled",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Allow enabling and disable prediction...useful for death cam."
               },
               {
                  "name":"GetUID",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetPlatformUID",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetSkill",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetMMDbgFlags",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get debug flags that clients have set on themselves."
               },
               {
                  "name":"Code_SetActiveBurnCardIndex",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"Code_GetActiveBurnCardIndex",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetLatency",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the duration of the most recent network round trip to the player"
               },
               {
                  "name":"GetTitanBuildTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetTitanBuildTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetTitanBubbleShieldTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetTitanBubbleShieldTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetCinematicEventFlags",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetCinematicEventFlags",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GivePassive",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"RemovePassive",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"HasPassive",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetForcedDialogueOnly",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetForcedDialogueOnly",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetTitanEmbarkEnabled",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetTitanEmbarkEnabled",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetTitanDisembarkEnabled",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetTitanDisembarkEnabled",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetObjectiveIndex",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set index that client script can use for objective info"
               },
               {
                  "name":"SetObjectiveEntity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set entity that client script can use for objectives"
               },
               {
                  "name":"SetObjectiveEndTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set time when the object will expire"
               },
               {
                  "name":"GetObjectiveIndex",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get index that client script can use for objective info"
               },
               {
                  "name":"GetObjectiveEntity",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Get entity that client script can use for objectives"
               },
               {
                  "name":"GetObjectiveEndTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get time when the object will expire"
               },
               {
                  "name":"SetVoicePackIndex",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set index that client script can use for voice pack info"
               },
               {
                  "name":"GetVoicePackIndex",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get index that client script can use for voice pack info"
               },
               {
                  "name":"XPChanged",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Call when XP changes to refresh code XP value"
               },
               {
                  "name":"GenChanged",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Call when generation changes to refresh code GEN value"
               },
               {
                  "name":"RankedChanged",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Call when rank-related persistence variables are changed"
               },
               {
                  "name":"GetXPRate",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the player's XP rate"
               },
               {
                  "name":"AddXP",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Adds XP to player"
               },
               {
                  "name":"GetXP",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets the player's XP"
               },
               {
                  "name":"GetLevel",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets the player's Level"
               },
               {
                  "name":"GetGen",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets the player's generation"
               },
               {
                  "name":"GetRank",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets the player's rank"
               },
               {
                  "name":"IsPlayingRanked",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Find out if the player is playing in ranked mode"
               },
               {
                  "name":"GetCommunityName",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Gets the player's current community name"
               },
               {
                  "name":"GetCommunityClanTag",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Gets the player's current community clan tag"
               },
               {
                  "name":"GetCommunityId",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets the player's current community id"
               },
               {
                  "name":"GetFaction",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Gets the player's faction"
               },
               {
                  "name":"ResetIdleTimer",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Marks the player as active to prevent being kicked for no activity"
               },
               {
                  "name":"HasBadReputation",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if this player has a bad reputation"
               },
               {
                  "name":"TrueTeamSwitch",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetIdleTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetStandingViewHeight",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns the view height when standing"
               },
               {
                  "name":"GetCrouchingViewHeight",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns the view height when crouching"
               },
               {
                  "name":"GetStandingHullMin",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Returns the min hull vector when standing"
               },
               {
                  "name":"GetStandingHullMax",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Returns the max hull vector when standing"
               },
               {
                  "name":"GetCrouchingHullMin",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Returns the min hull vector when crouching"
               },
               {
                  "name":"GetCrouchingHullMax",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Returns the max hull vector when crouching"
               },
               {
                  "name":"ForceCrouch",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Forces the player to crouch"
               },
               {
                  "name":"UnforceCrouch",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Lets the player stand again"
               },
               {
                  "name":"ForceSlide",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Forces the player to crouch and slide"
               },
               {
                  "name":"UnforceSlide",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Lets the player stand again"
               },
               {
                  "name":"ForceStand",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Blocks the player from crouching"
               },
               {
                  "name":"UnforceStand",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Lets the player crouch again"
               },
               {
                  "name":"IsStanding",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns if the player is standing."
               },
               {
                  "name":"IsCrouched",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns if the player is crouched."
               },
               {
                  "name":"IsBot",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if this player is a bot"
               },
               {
                  "name":"IsPlayback",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if this player is a a bot created to play back a recording from 'bot_record'"
               },
               {
                  "name":"Anim_PlayGesture",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Plays the named activity animation as a gesture"
               },
               {
                  "name":"Anim_StopGesture",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Stop gesture from playing"
               },
               {
                  "name":"Grapple",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Toggles grapple"
               },
               {
                  "name":"GetPilotClassIndex",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get the players pilot class index."
               },
               {
                  "name":"SetPilotClassIndex",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the players pilot class index."
               },
               {
                  "name":"IsBoosting",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the player is currently boosting"
               },
               {
                  "name":"IsJetpack",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the player is currently using the jetpack"
               },
               {
                  "name":"IsGliding",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the player is currently gliding"
               },
               {
                  "name":"IsHovering",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the player is currently hovering"
               },
               {
                  "name":"IsHoverEnabled",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the player can hover"
               },
               {
                  "name":"IsInAirSlowMo",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the player is in air slowmo"
               },
               {
                  "name":"GetNumPingsUsed",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets the number of pings used by the player. Initially 0."
               },
               {
                  "name":"GetNumPingsAvailable",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets the number of pings available to be used. Initially 0."
               },
               {
                  "name":"GetLastPingTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the time the player last performed a ping. Initially 0.0"
               },
               {
                  "name":"GetPingGroupStartTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the start time for the current ping group. Initially 0.0"
               },
               {
                  "name":"GetPingGroupAccumulator",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Accumulates pings in a group so we can limit to x pings in y seconds. Initially 0"
               },
               {
                  "name":"SetNumPingsUsed",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the number of pings used by the player"
               },
               {
                  "name":"SetNumPingsAvailable",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the number of pings available to be used"
               },
               {
                  "name":"SetLastPingTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the time the player last performed a ping"
               },
               {
                  "name":"SetPingGroupStartTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the start time for the current ping group"
               },
               {
                  "name":"SetPingGroupAccumulator",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the ping group accumulator"
               },
               {
                  "name":"GetTitanTarget",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Get a titan available for smart targetting type uses."
               },
               {
                  "name":"GetSendMovementCallbacks",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns if movement callbacks are being dispatched for the player."
               },
               {
                  "name":"SetSendMovementCallbacks",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets if movement callbacks are being dispatched for the player."
               },
               {
                  "name":"GetSendInputCallbacks",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns if input callbacks are being dispatched for the player."
               },
               {
                  "name":"SetSendInputCallbacks",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets if input callbacks are being dispatched for the player."
               },
               {
                  "name":"IsInputCommandHeld",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Indicates if the specified input command is being pressed. May be inaccurate as the server does not update as often as the client."
               },
               {
                  "name":"IsInputCommandPressed",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Indicates if the specified input command was pressed this frame. May be inaccurate as the server does not update as often as the client."
               },
               {
                  "name":"IsInputCommandReleased",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Indicates if the specified input command was released this frame. May be inaccurate as the server does not update as often as the client."
               },
               {
                  "name":"GetInputAxisForward",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the amount the left stick or WASD keys are pressed forward between -1 to 1."
               },
               {
                  "name":"GetInputAxisRight",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the amount the left stick or WASD keys are pressed right between -1 to 1."
               },
               {
                  "name":"StartRecordingAnimation",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Begins recording the player's animation for playback later."
               },
               {
                  "name":"GetGroundFrictionScale",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the ground friction scale for the player."
               },
               {
                  "name":"SetGroundFrictionScale",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the ground friction scale for the player. Default is 1.0."
               },
               {
                  "name":"GetWallrunFrictionScale",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the wallrun friction scale for the player."
               },
               {
                  "name":"SetWallrunFrictionScale",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the wallrun friction scale for the player. Default is 1.0."
               },
               {
                  "name":"EnableWorldSpacePlayerEyeAngles",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Player eye angles remain independent of their move parent's angles."
               },
               {
                  "name":"DisableWorldSpacePlayerEyeAngles",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Player eye angles are based off their move parent's angles."
               },
               {
                  "name":"IsWorldSpacePlayerEyeAngles",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the player eye angles are independent of their move parent's angles."
               },
               {
                  "name":"SetCallingCard",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the calling card of the current player on stryder"
               },
               {
                  "name":"SetCallSign",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the calling card of the current player on stryder"
               },
               {
                  "name":"SetCallSignStyle",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the calling card of the current player on stryder"
               },
               {
                  "name":"SetPlayerNetBool",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets a bool network variable on the player (see RegisterNetworkedVariable)"
               },
               {
                  "name":"SetPlayerNetInt",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets an int network variable on the player (see RegisterNetworkedVariable)"
               },
               {
                  "name":"SetPlayerNetFloat",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets a float network variable on the player (see RegisterNetworkedVariable)"
               },
               {
                  "name":"SetPlayerNetFloatOverTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Changes a float network variable on the player gradually over time from its current value to the specified new value (see RegisterNetworkedVariable)"
               },
               {
                  "name":"SetPlayerNetTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets a time (float) network variable on the player (see RegisterNetworkedVariable)"
               },
               {
                  "name":"SetPlayerNetEnt",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets an entity network variable on the player (see RegisterNetworkedVariable)"
               },
               {
                  "name":"GetPlayerNetBool",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Gets a bool network variable on the player (see RegisterNetworkedVariable)"
               },
               {
                  "name":"GetPlayerNetInt",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets an int network variable on the player (see RegisterNetworkedVariable)"
               },
               {
                  "name":"GetPlayerNetFloat",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets a float network variable on the player (see RegisterNetworkedVariable)"
               },
               {
                  "name":"GetPlayerNetTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets a time (float) network variable on the player (see RegisterNetworkedVariable)"
               },
               {
                  "name":"GetPlayerNetEnt",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets an entity network variable on the player (see RegisterNetworkedVariable)"
               },
               {
                  "name":"RequestCallbackWhenPlayerHasBeenConnectedForDuration",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"( duration ). Requests CodeCallback_PlayerHasBeenConnectedForDuration() to be called once duration has elapsed since fully connected, or immediately if that amount of time has already elapsed. If there was a previous request that had not yet called the callback, this call will cancel the previous request and set up a new one."
               },
               {
                  "name":"Player_GetWorldViewAngles",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Returns eye direction of the 3p player"
               },
               {
                  "name":"ForceAutoSprintOn",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Forces the autosprint setting to \"on\""
               },
               {
                  "name":"ForceAutoSprintOff",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Forces the autosprint setting to \"off\""
               },
               {
                  "name":"UnforceAutoSprint",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Returns to user-specified autosprint setting"
               },
               {
                  "name":"GetAutoSprintSetting",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Returns user's autosprint setting"
               },
               {
                  "name":"JumpedOffRodeo",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Used to prevent very specific cases of jumping"
               },
               {
                  "name":"GetPINNucleusId",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetPINPlatformId",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetIPString",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Gets the player's IP address as a string"
               },
               {
                  "name":"GetPreferredDataCenter",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Gets the player's prefered data center"
               },
               {
                  "name":"GetSPDifficulty",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetSPStartPoint",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetSPLastMission",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetSPUnlockedMission",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetSPHighestDifficultyCompleted",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetSPTitanLoadoutsUsed",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetSPTitanLoadoutsSelected",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetSPTitanLoadoutCurrent",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"AnimViewEntity_SetThirdPersonCameraAttachments",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Sets the name of the attachment the camera will follow instead of the default (\"CAMERA\")",
                  "argTypes":"array < string >",
                  "returnTypeString":"void"
               },
               {
                  "name":"SetPlayerSettingsWithMods",
                  "retrunType":0,
                  "a3arg":1,
                  "helpText":"Sets the class of the player with given mods applied",
                  "argTypes":"\"classname\", [modName0, modname1, ...]",
                  "returnTypeString":"null",
                  "shortArgTypes":".sa"
               },
               {
                  "name":"SetPlayerSettingPosMods",
                  "retrunType":0,
                  "a3arg":1,
                  "helpText":"sets the pose mods on the class of the player",
                  "argTypes":"int, [modName0, modname1, ...]",
                  "returnTypeString":"null",
                  "shortArgTypes":".ia"
               },
               {
                  "name":"GetPlayerSettingsMods",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Get an array of mods active on this player",
                  "argTypes":"",
                  "returnTypeString":"array<string>"
               },
               {
                  "name":"GetPlayerModsForPos",
                  "retrunType":37,
                  "a3arg":1,
                  "helpText":"Gets the array of mods for a pose in a player class",
                  "argTypes":"int",
                  "returnTypeString":"array",
                  "shortArgTypes":".i"
               },
               {
                  "name":"GetPlayerSettingsField",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Gets the value of this setting from the current player class settings (.set files)",
                  "argTypes":"( fieldName )",
                  "returnTypeString":"var",
                  "shortArgTypes":".s"
               },
               {
                  "name":"GetPlayerRequestedSettingsField",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Gets the value of this setting from the player's requested class settings (.set files)",
                  "argTypes":"( fieldName )",
                  "returnTypeString":"var",
                  "shortArgTypes":".s"
               },
               {
                  "name":"GetPersistentVar",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"",
                  "argTypes":"\"variableName\"",
                  "returnTypeString":"result",
                  "shortArgTypes":".s"
               },
               {
                  "name":"GetPersistentVarAsInt",
                  "retrunType":5,
                  "a3arg":1,
                  "helpText":"",
                  "argTypes":"\"variableName\"",
                  "returnTypeString":"int",
                  "shortArgTypes":".s"
               },
               {
                  "name":"SetPersistentVar",
                  "retrunType":0,
                  "a3arg":1,
                  "helpText":"",
                  "argTypes":"\"variableName\", newVal",
                  "returnTypeString":"",
                  "shortArgTypes":".s."
               },
               {
                  "name":"GetExtraWeaponMods",
                  "retrunType":37,
                  "a3arg":1,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"array",
                  "shortArgTypes":"."
               },
               {
                  "name":"SetExtraWeaponMods",
                  "retrunType":0,
                  "a3arg":1,
                  "helpText":"",
                  "argTypes":"[\"modName4\", \"modname1\", ...]",
                  "returnTypeString":"",
                  "shortArgTypes":".a"
               },
               {
                  "name":"StopRecordingAnimation",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Ends recording the player's animation for playback later.",
                  "argTypes":"",
                  "returnTypeString":"var"
               },
               {
                  "name":"GetPINAdditionalData",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Gets a table of additional telemetry data sent by code functions for a player.",
                  "argTypes":"",
                  "returnTypeString":"table"
               },
               {
                  "name":"GetPlayerStateStats",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Gets a table of time and distance stats for different player states",
                  "argTypes":"",
                  "returnTypeString":"table<string,int>"
               }
            ]
         },
         {
            "className":"CPlayerDecoy",
            "parent":"CBaseAnimating",
            "functions":[
               {
                  "name":"Decoy_Die",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Kill the player decoy and dissolve at the same time."
               },
               {
                  "name":"Decoy_Dissolve",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Dissolve out the player decoy without killing it."
               },
               {
                  "name":"SetFriendlyFire",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether friendly fire is enabled or disabled for this player decoy (default enabled)."
               },
               {
                  "name":"GetFriendlyFire",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if friendly fire is enabled for this player decoy"
               },
               {
                  "name":"SetLandSplash",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether splashes out when it lands from airborne state (default disabled)."
               },
               {
                  "name":"GetLandSplash",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if land splash is enabled for this player decoy"
               },
               {
                  "name":"SetTimeout",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set timeout in seconds. When timeout finishes the decoy dies. Default is -1 (no timeout)"
               },
               {
                  "name":"SetJumpDelay",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the delay for when the decoy jumps after created in air"
               },
               {
                  "name":"SetFlickerRate",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the rate at which the decoy flickers after created"
               },
               {
                  "name":"SetEnableRandomLanding",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Lets the decoy land in slide or sprint"
               },
               {
                  "name":"SetKillOnCollision",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether or not the decoy dies on collisions"
               },
               {
                  "name":"SetDecoyRandomPulseRateMax",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets max rate the decoy can pulse at. Randomly pulses at around this rate on the minimap"
               }
            ]
         },
         {
            "className":"CProjectile",
            "parent":"CBaseAnimating",
            "functions":[
               {
                  "name":"ProjectileGetWeaponClassName",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Gets the weapon classname that fired this projectile."
               },
               {
                  "name":"SetVortexRefired",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether the projectile has been refired from the vortex; affects which script is run."
               },
               {
                  "name":"DamageAliveOnly",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set whether projectile should do damage to alive entities only"
               },
               {
                  "name":"ProjectileGetWeaponInfoFileKeyField",
                  "retrunType":35,
                  "a3arg":0,
                  "helpText":"Resolves a string key to its value in this weapons info file."
               },
               {
                  "name":"ProjectileGetWeaponInfoFileKeyFieldAsset",
                  "retrunType":40,
                  "a3arg":0,
                  "helpText":"Resolves a string key to its asset in this weapons info file.",
                  "argTypes":"string",
                  "returnTypeString":"asset"
               },
               {
                  "name":"ProjectileGetWeaponChargeLevel",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets a weapons charge level returns 0 if not a charge weapon or has 0 charge"
               },
               {
                  "name":"ProjectileGetRodeoDamage",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get the damage amount this projectile's weapon should do to a titan that the player is rodeoing."
               },
               {
                  "name":"ForceAdjustToGunBarrelDisabled",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Force projectile to act as if the 'adjust_to_gun_barrel' weapon setting had been set to false."
               },
               {
                  "name":"GetProjectileCreationTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns the time the projectile was created by the player"
               },
               {
                  "name":"GetProjectileCreationTimeServer",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Return the time the projectile was created on the server"
               },
               {
                  "name":"SetProjectilTrailEffectIndex",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Specify which of the weapon's \"projectile_trail_effect_#\" settings this projectile should use."
               },
               {
                  "name":"SetProjectileLifetime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets how long the projectile is alive for 0 is infinite or until it collides"
               },
               {
                  "name":"SetProjectileDestructionDistance",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets how far the projectile can travel for 0 is infinite or until it collides"
               },
               {
                  "name":"GetTimeToProjectileDeath",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets how long before the lifetime of the projectile is up."
               },
               {
                  "name":"GetProjectileAllowHeadShots",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Gets whether or not this projectile allows headshots"
               },
               {
                  "name":"SetReducedEffects",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"void"
               },
               {
                  "name":"SetImpactEffectTable",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the impact FX table to use for collisions."
               },
               {
                  "name":"SetProjectileImpactDamageOverride",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"float damage",
                  "returnTypeString":"void"
               },
               {
                  "name":"SetWeaponClassName",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Set the weapon classname that this projectile will report."
               },
               {
                  "name":"ProjectileGetDamageSourceID",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get the damagesourceID set on this projectile."
               },
               {
                  "name":"ProjectileSetDamageSourceID",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the damagesourceID set on this projectile."
               },
               {
                  "name":"ProjectileGetMods",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Get an array of mods active on the weapon that shot this projectile.",
                  "argTypes":"",
                  "returnTypeString":"array< string >"
               },
               {
                  "name":"GetProjectileWeaponSettingInt",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.",
                  "argTypes":"int eWeaponVar",
                  "returnTypeString":"int"
               },
               {
                  "name":"GetProjectileWeaponSettingFloat",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.",
                  "argTypes":"int eWeaponVar",
                  "returnTypeString":"float"
               },
               {
                  "name":"GetProjectileWeaponSettingBool",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.",
                  "argTypes":"int eWeaponVar",
                  "returnTypeString":"bool"
               },
               {
                  "name":"GetProjectileWeaponSettingVector",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.",
                  "argTypes":"int eWeaponVar",
                  "returnTypeString":"vector"
               },
               {
                  "name":"GetProjectileWeaponSettingString",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.",
                  "argTypes":"int eWeaponVar",
                  "returnTypeString":"string"
               },
               {
                  "name":"GetProjectileWeaponSettingAsset",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.",
                  "argTypes":"int eWeaponVar",
                  "returnTypeString":"asset"
               }
            ]
         },
         {
            "className":"CRopeKeyframe",
            "parent":"CBaseEntity",
            "functions":[
               {
                  "name":"RopeWiggle",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Makes the rope wiggle, straightening as it reaches a max length or max time, to simulate fast motion. maxlen, magnitude, speed, duration, fadeDuration. Wiggle fades as length reaches maxlen and within fadeDuration seconds of duration. Magnitude scales with rope length."
               },
               {
                  "name":"Zipline_Enable",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Allows the zipline to be used"
               },
               {
                  "name":"Zipline_Disable",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Disallow using the zipline"
               },
               {
                  "name":"Zipline_IsEnabled",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if this rope is a zipline and it is allowed to be used"
               }
            ]
         },
         {
            "className":"CScriptProp",
            "parent":"CDynamicProp",
            "functions":[
               {
                  "name":"SetArmorType",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetFootstepType",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set custom footstep type to use"
               },
               {
                  "name":"SetScriptPropFlags",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"int flags",
                  "returnTypeString":"void"
               },
               {
                  "name":"GetScriptPropFlags",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"int"
               },
               {
                  "name":"SetSmartAmmoLockType",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the type of custom smart ammo target this is"
               },
               {
                  "name":"GetSmartAmmoLockType",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets the type of custom smart ammo target this is"
               }
            ]
         },
         {
            "className":"CScriptTraceVolume",
            "parent":"CBaseEntity",
            "functions":[
               {
                  "name":"SetSphere",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the collision volume to a sphere shape."
               },
               {
                  "name":"SetBox",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the collision volume to an obb shape."
               }
            ]
         },
         {
            "className":"CSpawner",
            "parent":"CBaseEntity",
            "functions":[
               {
                  "name":"SpawnEntity",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Spawn the entity associated with this spawner"
               },
               {
                  "name":"GetSpawnCount",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Return the number of times SpawnEntity() has been called"
               },
               {
                  "name":"SetSpawnCallback",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set a script callback that will be called each time this spawner spawns something",
                  "argTypes":"void functionref( entity spawned ) spawnCallback",
                  "returnTypeString":"void"
               },
               {
                  "name":"GetSpawnEntityClassName",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Return the class name of the entity that will be spawned by this spawner"
               },
               {
                  "name":"GetSpawnEntityKeyValues",
                  "retrunType":34,
                  "a3arg":0,
                  "helpText":"Return a table of the key-values that will be applied to the spawned entity",
                  "argTypes":"",
                  "returnTypeString":"table"
               },
               {
                  "name":"GetSpawnerModelName",
                  "retrunType":40,
                  "a3arg":0,
                  "helpText":"Return the model key as an asset.",
                  "argTypes":"",
                  "returnTypeString":"asset"
               }
            ]
         },
         {
            "className":"CTeamSpawnPoint",
            "parent":"CBaseEntity",
            "functions":[
               {
                  "name":"IsVisibleToEnemies",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Determines whether the spawnpoint is visible to any enemy players of the given team"
               },
               {
                  "name":"NearbyEnemyScore",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns the nearby enemies scored by distance using spawnpoint_near_dist and spawnpoint_far_dist"
               },
               {
                  "name":"NearbyEnemyDistance",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns the distance of the nearest enemy"
               },
               {
                  "name":"NearbyAllyScore",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns the nearby allies scored by distance using spawnpoint_near_dist and spawnpoint_far_dist"
               },
               {
                  "name":"NearbyAllyDistance",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns the distance of the nearest ally"
               },
               {
                  "name":"CalculateRating",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Calculate the final rating and with additional value from script"
               },
               {
                  "name":"CalculateRatingDontCache",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Calculate the final rating, but don't use or modify saved state from earlier calls this frame"
               },
               {
                  "name":"CalculateFrontlineRating",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Calculate frontline rating"
               },
               {
                  "name":"IsOccupied",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Determines whether any entities are inside of this spawnpoint"
               },
               {
                  "name":"GetRatingData",
                  "retrunType":38,
                  "a3arg":1,
                  "helpText":"Returns table of spawn point rating data",
                  "argTypes":"",
                  "returnTypeString":"table",
                  "shortArgTypes":"."
               }
            ]
         },
         {
            "className":"CTitanSoul",
            "parent":"CBaseEntity",
            "functions":[
               {
                  "name":"GetLastRodeoHitTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get last rodeo hit time"
               },
               {
                  "name":"SetLastRodeoHitTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set last rodeo hit time"
               },
               {
                  "name":"GetStance",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetStance",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetPlayerSettingsNum",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetPlayerSettingsNum",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"EnableDoomed",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"DisableDoomed",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"IsDoomed",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetInvalidHealthBarEnt",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetInvalidHealthBarEnt",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"IsEjecting",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetEjecting",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetIsValidRodeoTarget",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Whether the Titan can be rodeo-ed by players or not"
               },
               {
                  "name":"SetDefensivePlacement",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set active defensive placement information for AI to use"
               },
               {
                  "name":"SetDefensiveAttachment",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set active defensive attachment information for AI to use"
               },
               {
                  "name":"HasValidTitan",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns if the titanSoul has a valid titan"
               },
               {
                  "name":"GetTitan",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets the titan for this titanSoul entity"
               },
               {
                  "name":"GetNextCoreChargeAvailable",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetNextCoreChargeAvailable",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetCoreChargeExpireTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetCoreChargeExpireTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetCoreChargeStartTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetCoreChargeStartTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetCoreUseDuration",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetCoreUseDuration",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"AddTitanSoulSpawnFlag",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Adds a spawn flag to the titan soul"
               },
               {
                  "name":"SetTitanSoulNetBool",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets a bool network variable on the titan soul (see RegisterNetworkedVariable)"
               },
               {
                  "name":"SetTitanSoulNetInt",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets an int network variable on the titan soul (see RegisterNetworkedVariable)"
               },
               {
                  "name":"SetTitanSoulNetFloat",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets a float network variable on the titan soul (see RegisterNetworkedVariable)"
               },
               {
                  "name":"SetTitanSoulNetFloatOverTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Changes a float network variable on the titan soul gradually over time from its current value to the specified new value (see RegisterNetworkedVariable)"
               },
               {
                  "name":"SetTitanSoulNetTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets a time (float) network variable on the titan soul (see RegisterNetworkedVariable)"
               },
               {
                  "name":"SetTitanSoulNetEnt",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets an entity network variable on the titan soul (see RegisterNetworkedVariable)"
               },
               {
                  "name":"GetTitanSoulNetBool",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Gets a bool network variable on the titan soul (see RegisterNetworkedVariable)"
               },
               {
                  "name":"GetTitanSoulNetInt",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets an int network variable on the titan soul (see RegisterNetworkedVariable)"
               },
               {
                  "name":"GetTitanSoulNetFloat",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets a float network variable on the titan soul (see RegisterNetworkedVariable)"
               },
               {
                  "name":"GetTitanSoulNetTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets a time (float) network variable on the titan soul (see RegisterNetworkedVariable)"
               },
               {
                  "name":"GetTitanSoulNetEnt",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Gets an entity network variable on the titan soul (see RegisterNetworkedVariable)"
               }
            ]
         },
         {
            "className":"CTriggerCylinder",
            "parent":"CBaseTrigger",
            "functions":[
               {
                  "name":"GetRadius",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get the cylinder's radius"
               },
               {
                  "name":"SetRadius",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the cylinder's radius"
               },
               {
                  "name":"GetAboveHeight",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get the cylinder's height above its origin"
               },
               {
                  "name":"SetAboveHeight",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the cylinder's height extending upward from its origin."
               },
               {
                  "name":"GetBelowHeight",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get the cylinder's height below its origin"
               },
               {
                  "name":"SetBelowHeight",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the cylinder's height extending downward from its origin."
               },
               {
                  "name":"CheckForLOS",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Checks for a line of sight to touching entities and signals \"TouchVisible\" if one succeeds"
               }
            ]
         },
         {
            "className":"CTriggerPointGravity",
            "parent":"CTriggerCylinder",
            "functions":[
               {
                  "name":"SetParams",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set gravity parameters. (pull inner radius, pull outer radius, reduce speed inner radius, reduce speed outer radius, pull accel, pull speed)"
               }
            ]
         },
         {
            "className":"CTurret",
            "parent":"CBaseCombatCharacter",
            "functions":[
               {
                  "name":"SetDriver",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the driver of the turret"
               },
               {
                  "name":"GetDriver",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"ClearDriver",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clears the driver of the turret"
               },
               {
                  "name":"AimTurret",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the aim direction of the turret (while there is no player controlling)"
               }
            ]
         },
         {
            "className":"CVortexSphere",
            "parent":"CBaseEntity",
            "functions":[
               {
                  "name":"GetBulletAbsorbedCount",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"int"
               },
               {
                  "name":"GetProjectileAbsorbedCount",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"int"
               },
               {
                  "name":"SetOwnerWeapon",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the weapon entity that owns this vortex sphere."
               },
               {
                  "name":"SetVortexEffect",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"sets the particle effect of the vortex sphere."
               },
               {
                  "name":"SetGunVortexAngles",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"sets local angles on the effect of the vortex"
               },
               {
                  "name":"SetGunVortexAttachment",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"sets the attachment for the gun"
               },
               {
                  "name":"GetOwnerWeapon",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Get the weapon entity that owns this vortex sphere."
               },
               {
                  "name":"AddBulletToSphere",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Add a single bullet to the sphere"
               },
               {
                  "name":"AddProjectileToSphere",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Add a single projectile to the sphere."
               },
               {
                  "name":"ClearAllBulletsFromSphere",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"void"
               },
               {
                  "name":"DisableVortexBlockLOS",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Allows npc's to target behind vortex sphere"
               },
               {
                  "name":"RemoveBulletFromSphere",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Remove a single bullet from the sphere."
               },
               {
                  "name":"RemoveProjectileFromSphere",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Remove a single projectile from the sphere."
               }
            ]
         },
         {
            "className":"CWeaponX",
            "parent":"CBaseCombatWeapon",
            "functions":[
               {
                  "name":"GetWeaponOwner",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Returns entity using the weapon"
               },
               {
                  "name":"GetAttackPosition",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Returns the position to fire from"
               },
               {
                  "name":"GetAttackDirection",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Returns the direction to fire from"
               },
               {
                  "name":"AllowUse",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets whether a weapon can be used or not"
               },
               {
                  "name":"HasSilencer",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns if weapon has a silencer"
               },
               {
                  "name":"EmitWeaponSound_1p3p",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Plays appropriate 1p and 3p sounds",
                  "argTypes":"string soundName1p, string soundName3p",
                  "returnTypeString":"void"
               },
               {
                  "name":"EmitWeaponSound",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Plays the sound on the weapon"
               },
               {
                  "name":"StopWeaponSound",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Stops the sound on the weapon"
               },
               {
                  "name":"EmitWeaponNpcSound",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Notifies NPCs of weapon sound"
               },
               {
                  "name":"EmitWeaponNpcSound_DontUpdateLastFiredTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Notifies NPCs of weapon sound"
               },
               {
                  "name":"IsNetOptimized",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if this weapon is net optimized *and* net weapon optimizations are enabled ('net_optimize_weapons 1')"
               },
               {
                  "name":"PlayWeaponEffectNoCull",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Plays the effect on the weapon, always spawn even if out of view",
                  "argTypes":"asset, asset, string",
                  "returnTypeString":"void"
               },
               {
                  "name":"PlayWeaponEffect",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Plays the effect on the weapon",
                  "argTypes":"asset, asset, string",
                  "returnTypeString":"void"
               },
               {
                  "name":"StopWeaponEffect",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Stops the effect on the weapon",
                  "argTypes":"asset, asset",
                  "returnTypeString":"void"
               },
               {
                  "name":"SetWeaponBurstFireCount",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the burst fire count"
               },
               {
                  "name":"GetWeaponBurstFireCount",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get the burst fire count"
               },
               {
                  "name":"SetWeaponSkin",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the skin index on the weapon"
               },
               {
                  "name":"SetWeaponCamo",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the camo index on the weapon"
               },
               {
                  "name":"FireWeaponBullet",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Fires a bullet"
               },
               {
                  "name":"FireWeaponBullet_Special",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Fires a bullet, can set to skip lag compensation, have zero spread, dryfire, or only cause a whizby sound."
               },
               {
                  "name":"FireWeaponBolt",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Fires a bolt projectile, given ( pos, dir, float speed, touchDamageType, explosionDamageType, isClientPredicted, additionalRandomSeed )."
               },
               {
                  "name":"FireWeaponGrenade",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"vector, vector, vector, float, int, int, bool, bool, bool",
                  "returnTypeString":"entity"
               },
               {
                  "name":"FireWeaponMissile",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Fires a missile projectile, given ( pos, dir, float speed, touchDamageType, explosionDamageType, doRandomVelocAndThinkVars, isClientPredicted )."
               },
               {
                  "name":"GetWeaponPrimaryAmmoCount",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Returns the amount of primary ammo"
               },
               {
                  "name":"SetWeaponPrimaryAmmoCount",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the amount of primary ammo"
               },
               {
                  "name":"GetProjectilesPerShot",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets the number of projectiles per shot"
               },
               {
                  "name":"GetAmmoPerShot",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets the ammo consumed per shot"
               },
               {
                  "name":"GetAmmoDisplay",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Gets the display type of the ammo"
               },
               {
                  "name":"GetWeaponPrimaryClipCountMax",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Returns the max amount of primary ammo that can be in the clip."
               },
               {
                  "name":"SetWeaponPrimaryClipCount",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the amount of primary ammo in the clip"
               },
               {
                  "name":"SetWeaponPrimaryClipCountAbsolute",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the amount of primary ammo in the clip"
               },
               {
                  "name":"SetWeaponPrimaryClipCountNoRegenReset",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets primary ammo count, doesn't reset regen"
               },
               {
                  "name":"IsWeaponRegenDraining",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"gets whether or not the regen ammo on this weapon is draining or not"
               },
               {
                  "name":"GetWeaponPrimaryClipCount",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Returns the amount of primary ammo in the clip."
               },
               {
                  "name":"RegenerateAmmoReset",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"void"
               },
               {
                  "name":"GetLifetimeShotsRemaining",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"int"
               },
               {
                  "name":"SetLifetimeShotsRemaining",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"int newCount",
                  "returnTypeString":"void"
               },
               {
                  "name":"SetLifetimeShotsRemainingInfinite",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"void"
               },
               {
                  "name":"GetWeaponUtilityEntity",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Get the weapon's utility entity"
               },
               {
                  "name":"IsReloading",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the weapon is reloading"
               },
               {
                  "name":"IsWeaponInAds",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the weapon is in ADS"
               },
               {
                  "name":"IsWeaponAdsButtonPressed",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the ADS button is pressed, even if the weapon doesn't allow zooming"
               },
               {
                  "name":"GetWeaponType",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Return weapon type: WT_DEFAULT, WT_SIDEARM, WT_ANTI_TITAN, WT_SHOULDER"
               },
               {
                  "name":"IsChargeWeapon",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the weapon has a charge ability."
               },
               {
                  "name":"IsWeaponCharging",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the weapon is currently charging"
               },
               {
                  "name":"GetWeaponChargeTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns how long the weapon has been charging"
               },
               {
                  "name":"GetWeaponChargeTimeRemaining",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns how long the weapon has left to charge"
               },
               {
                  "name":"GetWeaponChargeFraction",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns fraction [0,1] where the charge level is."
               },
               {
                  "name":"SetWeaponChargeFraction",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets charge of the weapon as a fraction [0,1]."
               },
               {
                  "name":"SetWeaponChargeFractionForced",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetWeaponChargeLevel",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetWeaponChargeLevelMax",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetChargeDuration",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the total charge duration of the weapon."
               },
               {
                  "name":"GetWeaponReadyToFireProgress",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetWeaponChargeEnergyCost",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetWeaponDefaultEnergyCost",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"ResetWeaponToDefaultEnergyCost",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetWeaponCurrentEnergyCost",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetWeaponEnergyCost",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetWeaponInfoFileKeyField",
                  "retrunType":35,
                  "a3arg":0,
                  "helpText":"Resolves a string key to its value in this weapons info file."
               },
               {
                  "name":"GetWeaponInfoFileKeyFieldAsset",
                  "retrunType":40,
                  "a3arg":0,
                  "helpText":"Resolves a string key to its value in this weapons info file.",
                  "argTypes":"string key",
                  "returnTypeString":"asset"
               },
               {
                  "name":"CheckWeaponIsDisabled",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"takes in a player and checks to see if the weapon is disabled"
               },
               {
                  "name":"Deploy",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Triggers weapon deploy"
               },
               {
                  "name":"DeployInstant",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Triggers weapon deploy"
               },
               {
                  "name":"Raise",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Triggers weapon raise (or equip)"
               },
               {
                  "name":"ShouldPredictProjectiles",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if it is appropriate to fire predicted projectiles on the client"
               },
               {
                  "name":"SmartAmmo_IsEnabled",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if smart ammo tracking is enabled"
               },
               {
                  "name":"SmartAmmo_SetNewTargetTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Let script inform code it started locking on a new target in this tick"
               },
               {
                  "name":"SmartAmmo_GetNewTargetTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns the last time a new target was acquired"
               },
               {
                  "name":"SmartAmmo_GetSearchAngle",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns the angle used by the smart ammo cone search"
               },
               {
                  "name":"SmartAmmo_GetTargets",
                  "retrunType":35,
                  "a3arg":0,
                  "helpText":"Returns a list of targets currently being tracked by the smart ammo system and their current and previous lock fractions"
               },
               {
                  "name":"SmartAmmo_SetTarget",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Appends new smart ammo target if not already in the list"
               },
               {
                  "name":"SmartAmmo_StoreTargets",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Stores the current list of smart ammo targets for later retrieval"
               },
               {
                  "name":"SmartAmmo_GetStoredTargets",
                  "retrunType":35,
                  "a3arg":0,
                  "helpText":"Returns the list of targets that was last stored",
                  "argTypes":"",
                  "returnTypeString":"array< entity >"
               },
               {
                  "name":"SmartAmmo_Clear",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clears all current smart ammo targets. Pass in true for the first argument to clear stored targets too. Pass in true for the second argument to clear trackers too."
               },
               {
                  "name":"SmartAmmo_GetFirePosition",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Returns the position to fire at for this target"
               },
               {
                  "name":"SmartAmmo_TrackEntity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Marks an entity as trackable by the smart ammo system"
               },
               {
                  "name":"SmartAmmo_UntrackEntity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clears an entity as trackable by the smart ammo system"
               },
               {
                  "name":"SmartAmmo_GetNumTrackersOnEntity",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Returns number of trackers currently on entity"
               },
               {
                  "name":"SmartAmmo_IsVisibleTarget",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the given target is visible to the weapon"
               },
               {
                  "name":"SmartAmmo_GetTrackedEntities",
                  "retrunType":35,
                  "a3arg":0,
                  "helpText":"Returns array of all entities currently tracked by this weapon",
                  "argTypes":"",
                  "returnTypeString":"array< entity >"
               },
               {
                  "name":"IsReadyToFire",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if weapon is ready to fire (based on next allowed attack time)"
               },
               {
                  "name":"IsBurstFireInProgress",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if a burst fire is in progress"
               },
               {
                  "name":"GetBurstFireShotsPending",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"TimeUntilReadyToFire",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Returns time remaining until ready to fire"
               },
               {
                  "name":"GetWeaponClassName",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Returns the class name of the weapon"
               },
               {
                  "name":"GetDamageSourceID",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets the damage source ID for this weapon"
               },
               {
                  "name":"GetMaxDamageFarDist",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the largest damage far dist for current owner"
               },
               {
                  "name":"ForceRelease",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Forces the offhand weapon to release"
               },
               {
                  "name":"IsForceRelease",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the offhand weapon was forced to release"
               },
               {
                  "name":"ForceReleaseFromServer",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Forces the offhand weapon to release (on server only)"
               },
               {
                  "name":"IsForceReleaseFromServer",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the offhand weapon was forced to release (on server only)"
               },
               {
                  "name":"HasMod",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Given (string), returns true if mod is active on this weapon."
               },
               {
                  "name":"AddMod",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Given (string), add the mod from this weapon."
               },
               {
                  "name":"RemoveMod",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Given (string), remove the mod from this weapon."
               },
               {
                  "name":"SetModBitField",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets mods bit field"
               },
               {
                  "name":"GetModBitField",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets mods bit field"
               },
               {
                  "name":"GetSmartAmmoHudLockStyle",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Retrieve weapons smart_ammo_hud_lock_style setting"
               },
               {
                  "name":"GetSmartAmmoWeaponType",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Retrieve weapons smart_ammo_weapon_type setting"
               },
               {
                  "name":"IsWeaponOffhand",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if the weapon is offhand"
               },
               {
                  "name":"GetNextAttackAllowedTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get this weapon's internal when-can-I-shoot-next time."
               },
               {
                  "name":"GetNextAttackAllowedTimeRaw",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get this weapon's internal when-can-I-shoot-next time, ignoring the \"ready\" timer"
               },
               {
                  "name":"SetNextAttackAllowedTime",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set this weapon's internal when-can-I-shoot-next time."
               },
               {
                  "name":"GetRodeoDamage",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Get the damage amount this weapon should do to a titan that the player is rodeoing."
               },
               {
                  "name":"GetShotCount",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetWeaponClass",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":"Gets the string specified in the weapon's .txt file for 'weaponClass'."
               },
               {
                  "name":"SetAttackKickScale",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Only useful within primaryattack callbacks."
               },
               {
                  "name":"SetAttackKickRollScale",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Only useful within primaryattack callbacks."
               },
               {
                  "name":"IsInCooldown",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if weapon is in a cooldown state."
               },
               {
                  "name":"IsCooldownPending",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Returns true if weapon is has a cooldown state pending."
               },
               {
                  "name":"GetWeaponDamageFlags",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetWeaponExplosionDamageFlags",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetImpactTableIndex",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetNPCMissFastPlayer",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetMeleeLungeTargetRange",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetMeleeLungeTargetAngle",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetMeleeCanHitHumanSized",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetMeleeCanHitTitans",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetDamageAmountForArmorType",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetMeleeAttackRange",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetMeleeAttackAngle",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetMeleeAnim3p",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetWeaponReadyMsg",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetWeaponReadyHint",
                  "retrunType":33,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetGrenadeFuseTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"float"
               },
               {
                  "name":"GetGrenadeIgnitionTime",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"float"
               },
               {
                  "name":"GetAllowHeadShots",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Does this weapon allow for headshot damage"
               },
               {
                  "name":"GetCurrentAltFireIndex",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets the index for the next shot to be fired"
               },
               {
                  "name":"GetWeaponZoomFOV",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the current zoom FOV of the weapon"
               },
               {
                  "name":"GetReloadMilestoneIndex",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"SetForcedADS",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Forces the player to ads"
               },
               {
                  "name":"ClearForcedADS",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Lets the player choose whether or not to ads"
               },
               {
                  "name":"GetForcedADS",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"Gets whether or not the player is forced into ads"
               },
               {
                  "name":"GetInventoryIndex",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"GetChargeAnimIndex",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"int"
               },
               {
                  "name":"SetChargeAnimIndex",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"int",
                  "returnTypeString":"void"
               },
               {
                  "name":"GetWeaponDamageForce",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":""
               },
               {
                  "name":"ForceSustainedDischargeEnd",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Forcibly ends a sustained discharge. Does nothing if no sustained discharge is occurring."
               },
               {
                  "name":"ForceChargeEndNoAttack",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Forcibly ends charging, without an attack. Does nothing if no charging is occurring."
               },
               {
                  "name":"GetCoreDuration",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the core duration"
               },
               {
                  "name":"IsSustainedDischargeWeapon",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Indicates if this is a sustained discharge weapon."
               },
               {
                  "name":"IsDischarging",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Indicates if the weapon is currently performing a sustained discharge"
               },
               {
                  "name":"GetSustainedDischargeDuration",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the total duration of a sustained discharge."
               },
               {
                  "name":"GetSustainedDischargeRemainder",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the time remaining for the current sustained discharge between."
               },
               {
                  "name":"GetSustainedDischargeFraction",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the fraction of completion for the current sustained discharge between [0, 1]."
               },
               {
                  "name":"GetSustainedDischargePulseFrequency",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the frequency at which pulse callbacks are dispatched if enabled. Also controls frequency of sustained laser damage."
               },
               {
                  "name":"SetSustainedDischargeFractionForced",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Forces the discharge to be at a certain fraction"
               },
               {
                  "name":"IsSustainedLaserWeapon",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"Indicates if this is a sustained laser weapon."
               },
               {
                  "name":"DoMeleeHitConfirmation",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"float",
                  "returnTypeString":"void"
               },
               {
                  "name":"SetScriptTime0",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"float",
                  "returnTypeString":"void"
               },
               {
                  "name":"GetScriptTime0",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"float"
               },
               {
                  "name":"SetScriptFlags0",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"int",
                  "returnTypeString":"void"
               },
               {
                  "name":"GetScriptFlags0",
                  "retrunType":5,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"int"
               },
               {
                  "name":"ThrowWeapon",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"Duplicate this weapon and throw it."
               },
               {
                  "name":"SetWeaponUtilityEntity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the weapon's utility entity"
               },
               {
                  "name":"PlayWeaponEffectOnOwner",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Plays the effect on the weapons owner, use this when the weapon does NOT have a world model.",
                  "argTypes":"asset, int",
                  "returnTypeString":"void"
               },
               {
                  "name":"EnableCatchAnimation",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Makes the weapon play ACT_VM_DRAWCATCH next time it is deployed to a player."
               },
               {
                  "name":"MarkAsLoadoutPickup",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"void"
               },
               {
                  "name":"ForceDryfireEvent",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"void"
               },
               {
                  "name":"SetProScreenOwner",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"entity proScreenOwner",
                  "returnTypeString":"void"
               },
               {
                  "name":"GetProScreenOwner",
                  "retrunType":13,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"entity"
               },
               {
                  "name":"SetProScreenIntValForIndex",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"int index, int val",
                  "returnTypeString":"void"
               },
               {
                  "name":"SetProScreenFloatValForIndex",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"int index, float val",
                  "returnTypeString":"void"
               },
               {
                  "name":"IsLoadoutPickup",
                  "retrunType":6,
                  "a3arg":0,
                  "helpText":"",
                  "argTypes":"",
                  "returnTypeString":"bool"
               },
               {
                  "name":"GetMods",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Get an array of mods active on this weapon.",
                  "argTypes":"",
                  "returnTypeString":"array< string >"
               },
               {
                  "name":"SetMods",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Reset and apply active mods on a weapon.",
                  "argTypes":"array< string > mods",
                  "returnTypeString":"void"
               },
               {
                  "name":"GetWeaponSettingInt",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.",
                  "argTypes":"int eWeaponVar",
                  "returnTypeString":"int"
               },
               {
                  "name":"GetWeaponSettingFloat",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.",
                  "argTypes":"int eWeaponVar",
                  "returnTypeString":"float"
               },
               {
                  "name":"GetWeaponSettingBool",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.",
                  "argTypes":"int eWeaponVar",
                  "returnTypeString":"bool"
               },
               {
                  "name":"GetWeaponSettingVector",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.",
                  "argTypes":"int eWeaponVar",
                  "returnTypeString":"vector"
               },
               {
                  "name":"GetWeaponSettingString",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.",
                  "argTypes":"int eWeaponVar",
                  "returnTypeString":"string"
               },
               {
                  "name":"GetWeaponSettingAsset",
                  "retrunType":32,
                  "a3arg":1,
                  "helpText":"Retrieve a weapon's current setting. Must be a valid modable eWeaponVar.* value.",
                  "argTypes":"int eWeaponVar",
                  "returnTypeString":"asset"
               }
            ]
         },
         {
            "className":"CWindowHint",
            "parent":"CBaseEntity",
            "functions":[
               {
                  "name":"GetNormal",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Gets the forward direction of the window"
               },
               {
                  "name":"GetRight",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Gets the sideways direction of the window"
               },
               {
                  "name":"GetHalfWidth",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets half the width of the window"
               },
               {
                  "name":"GetHalfHeight",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets half the height of the window"
               }
            ]
         },
         {
            "className":"CBreakable",
            "parent":"CBaseEntity"
         },
         {
            "className":"ScriptMover",
            "parent":"CScriptProp",
            "functions":[
               {
                  "name":"SetMoveToPosition",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set desired position toward which we will move and stop at."
               },
               {
                  "name":"GetMoveToPosition",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get desired position toward which we will move and stop at."
               },
               {
                  "name":"SetMaxSpeed",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set max/cruising speed for moving to a desired position."
               },
               {
                  "name":"GetMaxSpeed",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get max/cruising speed for moving to a desired position."
               },
               {
                  "name":"SetDesiredVelocityHorizontal",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the drone's desired velocity."
               },
               {
                  "name":"SetDesiredVelocity3D",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the drone's desired velocity."
               },
               {
                  "name":"GetDesiredVelocity",
                  "retrunType":3,
                  "a3arg":0,
                  "helpText":"Get the drone's desired velocity."
               },
               {
                  "name":"SetDesiredHeight",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set drone's desired height."
               },
               {
                  "name":"GetDesiredHeight",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get drone's desired height."
               },
               {
                  "name":"SetDesiredYaw",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Overrides the direction to face."
               },
               {
                  "name":"ClearDesiredYaw",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Switches back to code controll of yaw."
               },
               {
                  "name":"GetDesiredYaw",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get yaw override."
               },
               {
                  "name":"SetYawRate",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the yaw rate."
               },
               {
                  "name":"GetYawRate",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get the yaw rate."
               },
               {
                  "name":"SetBobScale",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Set the amplitude of the random bobbing. Zero is no bobbing."
               },
               {
                  "name":"SetBobSpeedScale",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets the rate of the random bobbing."
               },
               {
                  "name":"GetBobScale",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Get the amplitude of the random bobbing. Zero is no bobbing."
               },
               {
                  "name":"GetBobSpeedScale",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the rate of the random bobbing."
               },
               {
                  "name":"SetAccelScale",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"When you have a desired velocity set, this controls how fast we accelerate to the desired velocity."
               },
               {
                  "name":"GetAccelScale",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"When you have a desired velocity set, this controls how fast we accelerate to the desired velocity."
               },
               {
                  "name":"SetMinimalHeight",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets an absolute minimal height. Additional velocity will be applied to ensure the mover never goes below this height."
               },
               {
                  "name":"ClearMinimalHeight",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Clears any absolute minimal height previously set."
               },
               {
                  "name":"SetRollTorque",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Applies a force that makes the entity spin around its forward axis."
               },
               {
                  "name":"GetRollTorque",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"Gets the force that makes the entity spin around its forward axis."
               },
               {
                  "name":"SetSideForce",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Applies a force to the entity's left. Combined with SetRollTorque() can create a wobbly trajectory."
               },
               {
                  "name":"GetSideForce",
                  "retrunType":1,
                  "a3arg":0,
                  "helpText":"The force to the entity's left. Combined with SetRollTorque() can create a wobbly trajectory."
               },
               {
                  "name":"AllowNPCGroundEnt",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Sets if this script mover and child entities can be a ground entity for NPCs"
               },
               {
                  "name":"ChangeNPCPathsOnMove",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Connect/disconnect NPC paths for child entities attached to this, when this moves"
               },
               {
                  "name":"NonPhysicsStop",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Stop all movement/rotation immediately"
               },
               {
                  "name":"NonPhysicsMoveTo",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Move to a given point over time. Specify total travel time, acceleration time, and deceleration time."
               },
               {
                  "name":"NonPhysicsMoveInWorldSpaceToLocalPos",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Move to a given point over time. The point is specified in the local space (i.e. relative to our parent), but the movement is linear in world space."
               },
               {
                  "name":"NonPhysicsMoveWithGravity",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Move with a given starting velocity and apply the given gravity over time"
               },
               {
                  "name":"NonPhysicsRotateTo",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Rotate to given angles over time. Specify total travel time."
               },
               {
                  "name":"NonPhysicsRotate",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"Rotate around the given axis with the given speed. Use an axis or speed of 0 to stop."
               },
               {
                  "name":"NonPhysicsSetMoveModeLocal",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"When set true, will use local positions."
               },
               {
                  "name":"NonPhysicsSetRotateModeLocal",
                  "retrunType":0,
                  "a3arg":0,
                  "helpText":"When set true, will use local rotation."
               }
            ]
         }
      ]
   }
}